/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsAllPreferences
    /// </summary>
    [DataContract]
    public partial class ModelsAllPreferences :  IEquatable<ModelsAllPreferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsAllPreferences" /> class.
        /// </summary>
        /// <param name="activityTimelineDisplayActivity">activityTimelineDisplayActivity.</param>
        /// <param name="activityTimelineGroupingInterval">activityTimelineGroupingInterval.</param>
        /// <param name="activityTimelineGroupingMethod">activityTimelineGroupingMethod.</param>
        /// <param name="activityTimelineRecordingLevel">activityTimelineRecordingLevel.</param>
        /// <param name="activityTimelineSyncEvents">activityTimelineSyncEvents.</param>
        /// <param name="alphaFeatures">will be omitted if empty.</param>
        /// <param name="automaticTagging">automaticTagging.</param>
        /// <param name="autotrackingEnabled">autotrackingEnabled.</param>
        /// <param name="beginningOfWeek">will be omitted if empty.</param>
        /// <param name="calendarSnapDuration">calendarSnapDuration.</param>
        /// <param name="calendarSnapInitialLocation">calendarSnapInitialLocation.</param>
        /// <param name="calendarVisibleHoursEnd">calendarVisibleHoursEnd.</param>
        /// <param name="calendarVisibleHoursStart">calendarVisibleHoursStart.</param>
        /// <param name="calendarZoomLevel">calendarZoomLevel.</param>
        /// <param name="cellSwipeActionsEnabled">cellSwipeActionsEnabled.</param>
        /// <param name="chartsViewType">chartsViewType.</param>
        /// <param name="collapseDetailedReportEntries">will be omitted if empty.</param>
        /// <param name="collapseTimeEntries">will be omitted if empty.</param>
        /// <param name="dashboardsViewType">dashboardsViewType.</param>
        /// <param name="dateFormat">dateFormat.</param>
        /// <param name="decimalSeparator">will be omitted if empty.</param>
        /// <param name="defaultProjectId">defaultProjectId.</param>
        /// <param name="defaultTaskId">defaultTaskId.</param>
        /// <param name="displayDensity">will be omitted if empty.</param>
        /// <param name="distinctRates">will be omitted if empty.</param>
        /// <param name="durationFormat">durationFormat.</param>
        /// <param name="durationFormatOnTimerDurationField">durationFormatOnTimerDurationField.</param>
        /// <param name="editPopupIntegrationTimer">editPopupIntegrationTimer.</param>
        /// <param name="extensionSendErrorReports">extensionSendErrorReports.</param>
        /// <param name="extensionSendUsageStatistics">extensionSendUsageStatistics.</param>
        /// <param name="firstSeenBusinessPromo">will be omitted if empty.</param>
        /// <param name="focusAppOnTimeEntryStarted">focusAppOnTimeEntryStarted.</param>
        /// <param name="focusAppOnTimeEntryStopped">focusAppOnTimeEntryStopped.</param>
        /// <param name="hapticFeedbackEnabled">hapticFeedbackEnabled.</param>
        /// <param name="hideKeyboardShortcut">will be omitted if empty.</param>
        /// <param name="idleDetectionEnabled">idleDetectionEnabled.</param>
        /// <param name="idleDetectionIntervalInMinutes">idleDetectionIntervalInMinutes.</param>
        /// <param name="inactivityBehavior">inactivityBehavior.</param>
        /// <param name="isSummaryTotalViewVisible">isSummaryTotalViewVisible.</param>
        /// <param name="keepMiniTimerOnTop">keepMiniTimerOnTop.</param>
        /// <param name="keepWindowOnTop">keepWindowOnTop.</param>
        /// <param name="keyboardIncrementTimerPage">keyboardIncrementTimerPage.</param>
        /// <param name="keyboardShortcutsEnabled">will be omitted if empty.</param>
        /// <param name="macosAutoTrackingRules">macosAutoTrackingRules.</param>
        /// <param name="macosShowHideTogglKeyboardShortcut">macosShowHideTogglKeyboardShortcut.</param>
        /// <param name="macosStopContinueKeyboardShortcut">macosStopContinueKeyboardShortcut.</param>
        /// <param name="manualEntryMode">will be omitted if empty.</param>
        /// <param name="manualMode">will be omitted if empty.</param>
        /// <param name="manualModeOverlaySeen">will be omitted if empty.</param>
        /// <param name="modifyOnStartTimeChange">modifyOnStartTimeChange.</param>
        /// <param name="offlineMode">will be omitted if empty.</param>
        /// <param name="pgTimeZoneName">pgTimeZoneName.</param>
        /// <param name="pomodoroAutoStartBreak">pomodoroAutoStartBreak.</param>
        /// <param name="pomodoroAutoStartFocus">pomodoroAutoStartFocus.</param>
        /// <param name="pomodoroBreakIntervalInMinutes">pomodoroBreakIntervalInMinutes.</param>
        /// <param name="pomodoroBreakProjectId">pomodoroBreakProjectId.</param>
        /// <param name="pomodoroBreakStartSoundEnabled">pomodoroBreakStartSoundEnabled.</param>
        /// <param name="pomodoroBreakTagId">pomodoroBreakTagId.</param>
        /// <param name="pomodoroCountdownTimer">pomodoroCountdownTimer.</param>
        /// <param name="pomodoroEnabled">pomodoroEnabled.</param>
        /// <param name="pomodoroFocusIntervalInMinutes">pomodoroFocusIntervalInMinutes.</param>
        /// <param name="pomodoroFocusSound">pomodoroFocusSound.</param>
        /// <param name="pomodoroGlobalSoundEnabled">pomodoroGlobalSoundEnabled.</param>
        /// <param name="pomodoroIntervalEndSound">pomodoroIntervalEndSound.</param>
        /// <param name="pomodoroIntervalEndVolume">pomodoroIntervalEndVolume.</param>
        /// <param name="pomodoroLongerBreakDurationInMinutes">pomodoroLongerBreakDurationInMinutes.</param>
        /// <param name="pomodoroPreventScreenLock">pomodoroPreventScreenLock.</param>
        /// <param name="pomodoroRoundsBeforeLongerBreak">pomodoroRoundsBeforeLongerBreak.</param>
        /// <param name="pomodoroSessionStartSoundEnabled">pomodoroSessionStartSoundEnabled.</param>
        /// <param name="pomodoroShowNotifications">pomodoroShowNotifications.</param>
        /// <param name="pomodoroStopTimerAtIntervalEnd">pomodoroStopTimerAtIntervalEnd.</param>
        /// <param name="pomodoroTrackBreaksAsTimeEntries">pomodoroTrackBreaksAsTimeEntries.</param>
        /// <param name="projectDashboardActivityMode">will be omitted if empty.</param>
        /// <param name="projectShortcutEnabled">projectShortcutEnabled.</param>
        /// <param name="recordTimeline">recordTimeline.</param>
        /// <param name="rememberLastProject">rememberLastProject.</param>
        /// <param name="reminderDays">reminderDays.</param>
        /// <param name="reminderEnabled">reminderEnabled.</param>
        /// <param name="reminderIntervalInMinutes">reminderIntervalInMinutes.</param>
        /// <param name="reminderPeriod">reminderPeriod.</param>
        /// <param name="reminderSnoozingInMinutes">reminderSnoozingInMinutes.</param>
        /// <param name="reportRounding">will be omitted if empty.</param>
        /// <param name="reportRoundingDirection">will be omitted if empty.</param>
        /// <param name="reportRoundingStepInMinutes">will be omitted if empty.</param>
        /// <param name="reportsHideWeekends">will be omitted if empty.</param>
        /// <param name="runningEntryWarning">runningEntryWarning.</param>
        /// <param name="runningTimerNotificationEnabled">runningTimerNotificationEnabled.</param>
        /// <param name="seenFollowModal">will be omitted if empty.</param>
        /// <param name="seenFooterPopup">will be omitted if empty.</param>
        /// <param name="seenProjectDashboardOverlay">will be omitted if empty.</param>
        /// <param name="seenTogglButtonModal">will be omitted if empty.</param>
        /// <param name="sendProductEmails">sendProductEmails.</param>
        /// <param name="sendTimerNotifications">sendTimerNotifications.</param>
        /// <param name="sendWeeklyReport">sendWeeklyReport.</param>
        /// <param name="showTimeInTitle">will be omitted if empty.</param>
        /// <param name="showAllEntries">showAllEntries.</param>
        /// <param name="showChangelog">showChangelog.</param>
        /// <param name="showDescriptionInMenuBar">showDescriptionInMenuBar.</param>
        /// <param name="showDockIcon">showDockIcon.</param>
        /// <param name="showEventsInCalendar">showEventsInCalendar.</param>
        /// <param name="showProjectInMenuBar">showProjectInMenuBar.</param>
        /// <param name="showQrScanner">showQrScanner.</param>
        /// <param name="showSecondsInMenuBar">showSecondsInMenuBar.</param>
        /// <param name="showTimelineInDayView">will be omitted if empty.</param>
        /// <param name="showTimerInMenuBar">showTimerInMenuBar.</param>
        /// <param name="showTodayTotalInMenuBar">showTodayTotalInMenuBar.</param>
        /// <param name="showTotalBillableHours">will be omitted if empty.</param>
        /// <param name="showWeekendOnTimerPage">will be omitted if empty.</param>
        /// <param name="showWorkoutsInCalendar">showWorkoutsInCalendar.</param>
        /// <param name="sleepBehaviour">sleepBehaviour.</param>
        /// <param name="smartAlertsOption">smartAlertsOption.</param>
        /// <param name="snowballReportRounding">will be omitted if empty.</param>
        /// <param name="stackTimesOnManualModeAfter">stackTimesOnManualModeAfter.</param>
        /// <param name="startAutomatically">startAutomatically.</param>
        /// <param name="startShortcutMode">startShortcutMode.</param>
        /// <param name="stopAtSpecificTime">stopAtSpecificTime.</param>
        /// <param name="stopAutomatically">stopAutomatically.</param>
        /// <param name="stopEntryOnShutdown">stopEntryOnShutdown.</param>
        /// <param name="stopSpecifiedTime">stopSpecifiedTime.</param>
        /// <param name="stoppedTimerNotificationEnabled">stoppedTimerNotificationEnabled.</param>
        /// <param name="suggestionsEnabled">suggestionsEnabled.</param>
        /// <param name="summaryReportAmounts">will be omitted if empty.</param>
        /// <param name="summaryReportDistinctRates">will be omitted if empty.</param>
        /// <param name="summaryReportGrouping">will be omitted if empty.</param>
        /// <param name="summaryReportSortAsc">will be omitted if empty.</param>
        /// <param name="summaryReportSortField">will be omitted if empty.</param>
        /// <param name="summaryReportSubGrouping">will be omitted if empty.</param>
        /// <param name="summaryTotalMode">summaryTotalMode.</param>
        /// <param name="tagsShortcutEnabled">tagsShortcutEnabled.</param>
        /// <param name="theme">will be omitted if empty.</param>
        /// <param name="timeEntryDisplayMode">timeEntryDisplayMode.</param>
        /// <param name="timeEntryGhostSuggestionsEnabled">timeEntryGhostSuggestionsEnabled.</param>
        /// <param name="timeEntryInvitationsNotificationEnabled">timeEntryInvitationsNotificationEnabled.</param>
        /// <param name="timeEntryStartStopInputMode">timeEntryStartStopInputMode.</param>
        /// <param name="timeofdayFormat">timeofdayFormat.</param>
        /// <param name="timerView">will be omitted if empty.</param>
        /// <param name="timerViewMobile">will be omitted if empty.</param>
        /// <param name="toSAcceptNeeded">ToSAcceptNeeded represents the trigger for new ToS accept dialog.</param>
        /// <param name="useMiniTimer">useMiniTimer.</param>
        /// <param name="visibleFooter">will be omitted if empty.</param>
        /// <param name="webTimeEntryStarted">will be omitted if empty.</param>
        /// <param name="webTimeEntryStopped">will be omitted if empty.</param>
        /// <param name="weeklyReportGrouping">will be omitted if empty.</param>
        /// <param name="weeklyReportValueToShow">will be omitted if empty.</param>
        /// <param name="windowsAutoTrackingRules">windowsAutoTrackingRules.</param>
        /// <param name="windowsShowHideTogglKeyboardShortcut">windowsShowHideTogglKeyboardShortcut.</param>
        /// <param name="windowsStopContinueKeyboardShortcut">windowsStopContinueKeyboardShortcut.</param>
        /// <param name="windowsStopStartKeyboardShortcut">windowsStopStartKeyboardShortcut.</param>
        /// <param name="windowsTheme">windowsTheme.</param>
        /// <param name="workoutDefaultProjectId">workoutDefaultProjectId.</param>
        /// <param name="workoutDefaultTagId">workoutDefaultTagId.</param>
        public ModelsAllPreferences(bool? activityTimelineDisplayActivity = default(bool?), string activityTimelineGroupingInterval = default(string), string activityTimelineGroupingMethod = default(string), string activityTimelineRecordingLevel = default(string), bool? activityTimelineSyncEvents = default(bool?), List<ModelsAlphaFeature> alphaFeatures = default(List<ModelsAlphaFeature>), bool? automaticTagging = default(bool?), bool? autotrackingEnabled = default(bool?), int? beginningOfWeek = default(int?), string calendarSnapDuration = default(string), string calendarSnapInitialLocation = default(string), int? calendarVisibleHoursEnd = default(int?), int? calendarVisibleHoursStart = default(int?), string calendarZoomLevel = default(string), bool? cellSwipeActionsEnabled = default(bool?), string chartsViewType = default(string), bool? collapseDetailedReportEntries = default(bool?), bool? collapseTimeEntries = default(bool?), string dashboardsViewType = default(string), string dateFormat = default(string), string decimalSeparator = default(string), int? defaultProjectId = default(int?), int? defaultTaskId = default(int?), string displayDensity = default(string), string distinctRates = default(string), string durationFormat = default(string), bool? durationFormatOnTimerDurationField = default(bool?), bool? editPopupIntegrationTimer = default(bool?), bool? extensionSendErrorReports = default(bool?), bool? extensionSendUsageStatistics = default(bool?), int? firstSeenBusinessPromo = default(int?), bool? focusAppOnTimeEntryStarted = default(bool?), bool? focusAppOnTimeEntryStopped = default(bool?), bool? hapticFeedbackEnabled = default(bool?), bool? hideKeyboardShortcut = default(bool?), bool? idleDetectionEnabled = default(bool?), int? idleDetectionIntervalInMinutes = default(int?), string inactivityBehavior = default(string), bool? isSummaryTotalViewVisible = default(bool?), bool? keepMiniTimerOnTop = default(bool?), bool? keepWindowOnTop = default(bool?), int? keyboardIncrementTimerPage = default(int?), bool? keyboardShortcutsEnabled = default(bool?), ModelsMacOSAutoTrackingRules macosAutoTrackingRules = default(ModelsMacOSAutoTrackingRules), ModelsKeyboardShortcut macosShowHideTogglKeyboardShortcut = default(ModelsKeyboardShortcut), ModelsKeyboardShortcut macosStopContinueKeyboardShortcut = default(ModelsKeyboardShortcut), string manualEntryMode = default(string), bool? manualMode = default(bool?), bool? manualModeOverlaySeen = default(bool?), string modifyOnStartTimeChange = default(string), string offlineMode = default(string), string pgTimeZoneName = default(string), bool? pomodoroAutoStartBreak = default(bool?), bool? pomodoroAutoStartFocus = default(bool?), int? pomodoroBreakIntervalInMinutes = default(int?), int? pomodoroBreakProjectId = default(int?), bool? pomodoroBreakStartSoundEnabled = default(bool?), int? pomodoroBreakTagId = default(int?), bool? pomodoroCountdownTimer = default(bool?), bool? pomodoroEnabled = default(bool?), int? pomodoroFocusIntervalInMinutes = default(int?), string pomodoroFocusSound = default(string), bool? pomodoroGlobalSoundEnabled = default(bool?), bool? pomodoroIntervalEndSound = default(bool?), int? pomodoroIntervalEndVolume = default(int?), int? pomodoroLongerBreakDurationInMinutes = default(int?), bool? pomodoroPreventScreenLock = default(bool?), int? pomodoroRoundsBeforeLongerBreak = default(int?), bool? pomodoroSessionStartSoundEnabled = default(bool?), bool? pomodoroShowNotifications = default(bool?), bool? pomodoroStopTimerAtIntervalEnd = default(bool?), bool? pomodoroTrackBreaksAsTimeEntries = default(bool?), string projectDashboardActivityMode = default(string), bool? projectShortcutEnabled = default(bool?), bool? recordTimeline = default(bool?), string rememberLastProject = default(string), string reminderDays = default(string), bool? reminderEnabled = default(bool?), int? reminderIntervalInMinutes = default(int?), string reminderPeriod = default(string), int? reminderSnoozingInMinutes = default(int?), bool? reportRounding = default(bool?), string reportRoundingDirection = default(string), int? reportRoundingStepInMinutes = default(int?), bool? reportsHideWeekends = default(bool?), string runningEntryWarning = default(string), bool? runningTimerNotificationEnabled = default(bool?), bool? seenFollowModal = default(bool?), bool? seenFooterPopup = default(bool?), bool? seenProjectDashboardOverlay = default(bool?), bool? seenTogglButtonModal = default(bool?), bool? sendProductEmails = default(bool?), bool? sendTimerNotifications = default(bool?), bool? sendWeeklyReport = default(bool?), bool? showTimeInTitle = default(bool?), bool? showAllEntries = default(bool?), bool? showChangelog = default(bool?), bool? showDescriptionInMenuBar = default(bool?), bool? showDockIcon = default(bool?), bool? showEventsInCalendar = default(bool?), bool? showProjectInMenuBar = default(bool?), bool? showQrScanner = default(bool?), bool? showSecondsInMenuBar = default(bool?), bool? showTimelineInDayView = default(bool?), bool? showTimerInMenuBar = default(bool?), bool? showTodayTotalInMenuBar = default(bool?), bool? showTotalBillableHours = default(bool?), bool? showWeekendOnTimerPage = default(bool?), bool? showWorkoutsInCalendar = default(bool?), string sleepBehaviour = default(string), string smartAlertsOption = default(string), string snowballReportRounding = default(string), string stackTimesOnManualModeAfter = default(string), bool? startAutomatically = default(bool?), string startShortcutMode = default(string), bool? stopAtSpecificTime = default(bool?), bool? stopAutomatically = default(bool?), bool? stopEntryOnShutdown = default(bool?), string stopSpecifiedTime = default(string), bool? stoppedTimerNotificationEnabled = default(bool?), bool? suggestionsEnabled = default(bool?), string summaryReportAmounts = default(string), bool? summaryReportDistinctRates = default(bool?), string summaryReportGrouping = default(string), bool? summaryReportSortAsc = default(bool?), string summaryReportSortField = default(string), string summaryReportSubGrouping = default(string), string summaryTotalMode = default(string), bool? tagsShortcutEnabled = default(bool?), string theme = default(string), string timeEntryDisplayMode = default(string), bool? timeEntryGhostSuggestionsEnabled = default(bool?), bool? timeEntryInvitationsNotificationEnabled = default(bool?), string timeEntryStartStopInputMode = default(string), string timeofdayFormat = default(string), string timerView = default(string), string timerViewMobile = default(string), bool? toSAcceptNeeded = default(bool?), bool? useMiniTimer = default(bool?), string visibleFooter = default(string), bool? webTimeEntryStarted = default(bool?), bool? webTimeEntryStopped = default(bool?), string weeklyReportGrouping = default(string), string weeklyReportValueToShow = default(string), ModelsWindowsAutoTrackingRules windowsAutoTrackingRules = default(ModelsWindowsAutoTrackingRules), ModelsKeyboardShortcut windowsShowHideTogglKeyboardShortcut = default(ModelsKeyboardShortcut), ModelsKeyboardShortcut windowsStopContinueKeyboardShortcut = default(ModelsKeyboardShortcut), ModelsKeyboardShortcut windowsStopStartKeyboardShortcut = default(ModelsKeyboardShortcut), string windowsTheme = default(string), int? workoutDefaultProjectId = default(int?), int? workoutDefaultTagId = default(int?))
        {
            this.ActivityTimelineDisplayActivity = activityTimelineDisplayActivity;
            this.ActivityTimelineGroupingInterval = activityTimelineGroupingInterval;
            this.ActivityTimelineGroupingMethod = activityTimelineGroupingMethod;
            this.ActivityTimelineRecordingLevel = activityTimelineRecordingLevel;
            this.ActivityTimelineSyncEvents = activityTimelineSyncEvents;
            this.AlphaFeatures = alphaFeatures;
            this.AutomaticTagging = automaticTagging;
            this.AutotrackingEnabled = autotrackingEnabled;
            this.BeginningOfWeek = beginningOfWeek;
            this.CalendarSnapDuration = calendarSnapDuration;
            this.CalendarSnapInitialLocation = calendarSnapInitialLocation;
            this.CalendarVisibleHoursEnd = calendarVisibleHoursEnd;
            this.CalendarVisibleHoursStart = calendarVisibleHoursStart;
            this.CalendarZoomLevel = calendarZoomLevel;
            this.CellSwipeActionsEnabled = cellSwipeActionsEnabled;
            this.ChartsViewType = chartsViewType;
            this.CollapseDetailedReportEntries = collapseDetailedReportEntries;
            this.CollapseTimeEntries = collapseTimeEntries;
            this.DashboardsViewType = dashboardsViewType;
            this.DateFormat = dateFormat;
            this.DecimalSeparator = decimalSeparator;
            this.DefaultProjectId = defaultProjectId;
            this.DefaultTaskId = defaultTaskId;
            this.DisplayDensity = displayDensity;
            this.DistinctRates = distinctRates;
            this.DurationFormat = durationFormat;
            this.DurationFormatOnTimerDurationField = durationFormatOnTimerDurationField;
            this.EditPopupIntegrationTimer = editPopupIntegrationTimer;
            this.ExtensionSendErrorReports = extensionSendErrorReports;
            this.ExtensionSendUsageStatistics = extensionSendUsageStatistics;
            this.FirstSeenBusinessPromo = firstSeenBusinessPromo;
            this.FocusAppOnTimeEntryStarted = focusAppOnTimeEntryStarted;
            this.FocusAppOnTimeEntryStopped = focusAppOnTimeEntryStopped;
            this.HapticFeedbackEnabled = hapticFeedbackEnabled;
            this.HideKeyboardShortcut = hideKeyboardShortcut;
            this.IdleDetectionEnabled = idleDetectionEnabled;
            this.IdleDetectionIntervalInMinutes = idleDetectionIntervalInMinutes;
            this.InactivityBehavior = inactivityBehavior;
            this.IsSummaryTotalViewVisible = isSummaryTotalViewVisible;
            this.KeepMiniTimerOnTop = keepMiniTimerOnTop;
            this.KeepWindowOnTop = keepWindowOnTop;
            this.KeyboardIncrementTimerPage = keyboardIncrementTimerPage;
            this.KeyboardShortcutsEnabled = keyboardShortcutsEnabled;
            this.MacosAutoTrackingRules = macosAutoTrackingRules;
            this.MacosShowHideTogglKeyboardShortcut = macosShowHideTogglKeyboardShortcut;
            this.MacosStopContinueKeyboardShortcut = macosStopContinueKeyboardShortcut;
            this.ManualEntryMode = manualEntryMode;
            this.ManualMode = manualMode;
            this.ManualModeOverlaySeen = manualModeOverlaySeen;
            this.ModifyOnStartTimeChange = modifyOnStartTimeChange;
            this.OfflineMode = offlineMode;
            this.PgTimeZoneName = pgTimeZoneName;
            this.PomodoroAutoStartBreak = pomodoroAutoStartBreak;
            this.PomodoroAutoStartFocus = pomodoroAutoStartFocus;
            this.PomodoroBreakIntervalInMinutes = pomodoroBreakIntervalInMinutes;
            this.PomodoroBreakProjectId = pomodoroBreakProjectId;
            this.PomodoroBreakStartSoundEnabled = pomodoroBreakStartSoundEnabled;
            this.PomodoroBreakTagId = pomodoroBreakTagId;
            this.PomodoroCountdownTimer = pomodoroCountdownTimer;
            this.PomodoroEnabled = pomodoroEnabled;
            this.PomodoroFocusIntervalInMinutes = pomodoroFocusIntervalInMinutes;
            this.PomodoroFocusSound = pomodoroFocusSound;
            this.PomodoroGlobalSoundEnabled = pomodoroGlobalSoundEnabled;
            this.PomodoroIntervalEndSound = pomodoroIntervalEndSound;
            this.PomodoroIntervalEndVolume = pomodoroIntervalEndVolume;
            this.PomodoroLongerBreakDurationInMinutes = pomodoroLongerBreakDurationInMinutes;
            this.PomodoroPreventScreenLock = pomodoroPreventScreenLock;
            this.PomodoroRoundsBeforeLongerBreak = pomodoroRoundsBeforeLongerBreak;
            this.PomodoroSessionStartSoundEnabled = pomodoroSessionStartSoundEnabled;
            this.PomodoroShowNotifications = pomodoroShowNotifications;
            this.PomodoroStopTimerAtIntervalEnd = pomodoroStopTimerAtIntervalEnd;
            this.PomodoroTrackBreaksAsTimeEntries = pomodoroTrackBreaksAsTimeEntries;
            this.ProjectDashboardActivityMode = projectDashboardActivityMode;
            this.ProjectShortcutEnabled = projectShortcutEnabled;
            this.RecordTimeline = recordTimeline;
            this.RememberLastProject = rememberLastProject;
            this.ReminderDays = reminderDays;
            this.ReminderEnabled = reminderEnabled;
            this.ReminderIntervalInMinutes = reminderIntervalInMinutes;
            this.ReminderPeriod = reminderPeriod;
            this.ReminderSnoozingInMinutes = reminderSnoozingInMinutes;
            this.ReportRounding = reportRounding;
            this.ReportRoundingDirection = reportRoundingDirection;
            this.ReportRoundingStepInMinutes = reportRoundingStepInMinutes;
            this.ReportsHideWeekends = reportsHideWeekends;
            this.RunningEntryWarning = runningEntryWarning;
            this.RunningTimerNotificationEnabled = runningTimerNotificationEnabled;
            this.SeenFollowModal = seenFollowModal;
            this.SeenFooterPopup = seenFooterPopup;
            this.SeenProjectDashboardOverlay = seenProjectDashboardOverlay;
            this.SeenTogglButtonModal = seenTogglButtonModal;
            this.SendProductEmails = sendProductEmails;
            this.SendTimerNotifications = sendTimerNotifications;
            this.SendWeeklyReport = sendWeeklyReport;
            this.ShowTimeInTitle = showTimeInTitle;
            this.ShowAllEntries = showAllEntries;
            this.ShowChangelog = showChangelog;
            this.ShowDescriptionInMenuBar = showDescriptionInMenuBar;
            this.ShowDockIcon = showDockIcon;
            this.ShowEventsInCalendar = showEventsInCalendar;
            this.ShowProjectInMenuBar = showProjectInMenuBar;
            this.ShowQrScanner = showQrScanner;
            this.ShowSecondsInMenuBar = showSecondsInMenuBar;
            this.ShowTimelineInDayView = showTimelineInDayView;
            this.ShowTimerInMenuBar = showTimerInMenuBar;
            this.ShowTodayTotalInMenuBar = showTodayTotalInMenuBar;
            this.ShowTotalBillableHours = showTotalBillableHours;
            this.ShowWeekendOnTimerPage = showWeekendOnTimerPage;
            this.ShowWorkoutsInCalendar = showWorkoutsInCalendar;
            this.SleepBehaviour = sleepBehaviour;
            this.SmartAlertsOption = smartAlertsOption;
            this.SnowballReportRounding = snowballReportRounding;
            this.StackTimesOnManualModeAfter = stackTimesOnManualModeAfter;
            this.StartAutomatically = startAutomatically;
            this.StartShortcutMode = startShortcutMode;
            this.StopAtSpecificTime = stopAtSpecificTime;
            this.StopAutomatically = stopAutomatically;
            this.StopEntryOnShutdown = stopEntryOnShutdown;
            this.StopSpecifiedTime = stopSpecifiedTime;
            this.StoppedTimerNotificationEnabled = stoppedTimerNotificationEnabled;
            this.SuggestionsEnabled = suggestionsEnabled;
            this.SummaryReportAmounts = summaryReportAmounts;
            this.SummaryReportDistinctRates = summaryReportDistinctRates;
            this.SummaryReportGrouping = summaryReportGrouping;
            this.SummaryReportSortAsc = summaryReportSortAsc;
            this.SummaryReportSortField = summaryReportSortField;
            this.SummaryReportSubGrouping = summaryReportSubGrouping;
            this.SummaryTotalMode = summaryTotalMode;
            this.TagsShortcutEnabled = tagsShortcutEnabled;
            this.Theme = theme;
            this.TimeEntryDisplayMode = timeEntryDisplayMode;
            this.TimeEntryGhostSuggestionsEnabled = timeEntryGhostSuggestionsEnabled;
            this.TimeEntryInvitationsNotificationEnabled = timeEntryInvitationsNotificationEnabled;
            this.TimeEntryStartStopInputMode = timeEntryStartStopInputMode;
            this.TimeofdayFormat = timeofdayFormat;
            this.TimerView = timerView;
            this.TimerViewMobile = timerViewMobile;
            this.ToSAcceptNeeded = toSAcceptNeeded;
            this.UseMiniTimer = useMiniTimer;
            this.VisibleFooter = visibleFooter;
            this.WebTimeEntryStarted = webTimeEntryStarted;
            this.WebTimeEntryStopped = webTimeEntryStopped;
            this.WeeklyReportGrouping = weeklyReportGrouping;
            this.WeeklyReportValueToShow = weeklyReportValueToShow;
            this.WindowsAutoTrackingRules = windowsAutoTrackingRules;
            this.WindowsShowHideTogglKeyboardShortcut = windowsShowHideTogglKeyboardShortcut;
            this.WindowsStopContinueKeyboardShortcut = windowsStopContinueKeyboardShortcut;
            this.WindowsStopStartKeyboardShortcut = windowsStopStartKeyboardShortcut;
            this.WindowsTheme = windowsTheme;
            this.WorkoutDefaultProjectId = workoutDefaultProjectId;
            this.WorkoutDefaultTagId = workoutDefaultTagId;
        }
        
        /// <summary>
        /// Gets or Sets ActivityTimelineDisplayActivity
        /// </summary>
        [DataMember(Name="activity_timeline_display_activity", EmitDefaultValue=false)]
        public bool? ActivityTimelineDisplayActivity { get; set; }

        /// <summary>
        /// Gets or Sets ActivityTimelineGroupingInterval
        /// </summary>
        [DataMember(Name="activity_timeline_grouping_interval", EmitDefaultValue=false)]
        public string ActivityTimelineGroupingInterval { get; set; }

        /// <summary>
        /// Gets or Sets ActivityTimelineGroupingMethod
        /// </summary>
        [DataMember(Name="activity_timeline_grouping_method", EmitDefaultValue=false)]
        public string ActivityTimelineGroupingMethod { get; set; }

        /// <summary>
        /// Gets or Sets ActivityTimelineRecordingLevel
        /// </summary>
        [DataMember(Name="activity_timeline_recording_level", EmitDefaultValue=false)]
        public string ActivityTimelineRecordingLevel { get; set; }

        /// <summary>
        /// Gets or Sets ActivityTimelineSyncEvents
        /// </summary>
        [DataMember(Name="activity_timeline_sync_events", EmitDefaultValue=false)]
        public bool? ActivityTimelineSyncEvents { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="alpha_features", EmitDefaultValue=false)]
        public List<ModelsAlphaFeature> AlphaFeatures { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticTagging
        /// </summary>
        [DataMember(Name="automatic_tagging", EmitDefaultValue=false)]
        public bool? AutomaticTagging { get; set; }

        /// <summary>
        /// Gets or Sets AutotrackingEnabled
        /// </summary>
        [DataMember(Name="autotracking_enabled", EmitDefaultValue=false)]
        public bool? AutotrackingEnabled { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="beginningOfWeek", EmitDefaultValue=false)]
        public int? BeginningOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets CalendarSnapDuration
        /// </summary>
        [DataMember(Name="calendar_snap_duration", EmitDefaultValue=false)]
        public string CalendarSnapDuration { get; set; }

        /// <summary>
        /// Gets or Sets CalendarSnapInitialLocation
        /// </summary>
        [DataMember(Name="calendar_snap_initial_location", EmitDefaultValue=false)]
        public string CalendarSnapInitialLocation { get; set; }

        /// <summary>
        /// Gets or Sets CalendarVisibleHoursEnd
        /// </summary>
        [DataMember(Name="calendar_visible_hours_end", EmitDefaultValue=false)]
        public int? CalendarVisibleHoursEnd { get; set; }

        /// <summary>
        /// Gets or Sets CalendarVisibleHoursStart
        /// </summary>
        [DataMember(Name="calendar_visible_hours_start", EmitDefaultValue=false)]
        public int? CalendarVisibleHoursStart { get; set; }

        /// <summary>
        /// Gets or Sets CalendarZoomLevel
        /// </summary>
        [DataMember(Name="calendar_zoom_level", EmitDefaultValue=false)]
        public string CalendarZoomLevel { get; set; }

        /// <summary>
        /// Gets or Sets CellSwipeActionsEnabled
        /// </summary>
        [DataMember(Name="cell_swipe_actions_enabled", EmitDefaultValue=false)]
        public bool? CellSwipeActionsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ChartsViewType
        /// </summary>
        [DataMember(Name="charts_view_type", EmitDefaultValue=false)]
        public string ChartsViewType { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="collapseDetailedReportEntries", EmitDefaultValue=false)]
        public bool? CollapseDetailedReportEntries { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="collapseTimeEntries", EmitDefaultValue=false)]
        public bool? CollapseTimeEntries { get; set; }

        /// <summary>
        /// Gets or Sets DashboardsViewType
        /// </summary>
        [DataMember(Name="dashboards_view_type", EmitDefaultValue=false)]
        public string DashboardsViewType { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name="date_format", EmitDefaultValue=false)]
        public string DateFormat { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="decimal_separator", EmitDefaultValue=false)]
        public string DecimalSeparator { get; set; }

        /// <summary>
        /// Gets or Sets DefaultProjectId
        /// </summary>
        [DataMember(Name="default_project_id", EmitDefaultValue=false)]
        public int? DefaultProjectId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTaskId
        /// </summary>
        [DataMember(Name="default_task_id", EmitDefaultValue=false)]
        public int? DefaultTaskId { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="displayDensity", EmitDefaultValue=false)]
        public string DisplayDensity { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="distinctRates", EmitDefaultValue=false)]
        public string DistinctRates { get; set; }

        /// <summary>
        /// Gets or Sets DurationFormat
        /// </summary>
        [DataMember(Name="duration_format", EmitDefaultValue=false)]
        public string DurationFormat { get; set; }

        /// <summary>
        /// Gets or Sets DurationFormatOnTimerDurationField
        /// </summary>
        [DataMember(Name="duration_format_on_timer_duration_field", EmitDefaultValue=false)]
        public bool? DurationFormatOnTimerDurationField { get; set; }

        /// <summary>
        /// Gets or Sets EditPopupIntegrationTimer
        /// </summary>
        [DataMember(Name="edit_popup_integration_timer", EmitDefaultValue=false)]
        public bool? EditPopupIntegrationTimer { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionSendErrorReports
        /// </summary>
        [DataMember(Name="extension_send_error_reports", EmitDefaultValue=false)]
        public bool? ExtensionSendErrorReports { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionSendUsageStatistics
        /// </summary>
        [DataMember(Name="extension_send_usage_statistics", EmitDefaultValue=false)]
        public bool? ExtensionSendUsageStatistics { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="firstSeenBusinessPromo", EmitDefaultValue=false)]
        public int? FirstSeenBusinessPromo { get; set; }

        /// <summary>
        /// Gets or Sets FocusAppOnTimeEntryStarted
        /// </summary>
        [DataMember(Name="focus_app_on_time_entry_started", EmitDefaultValue=false)]
        public bool? FocusAppOnTimeEntryStarted { get; set; }

        /// <summary>
        /// Gets or Sets FocusAppOnTimeEntryStopped
        /// </summary>
        [DataMember(Name="focus_app_on_time_entry_stopped", EmitDefaultValue=false)]
        public bool? FocusAppOnTimeEntryStopped { get; set; }

        /// <summary>
        /// Gets or Sets HapticFeedbackEnabled
        /// </summary>
        [DataMember(Name="haptic_feedback_enabled", EmitDefaultValue=false)]
        public bool? HapticFeedbackEnabled { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="hide_keyboard_shortcut", EmitDefaultValue=false)]
        public bool? HideKeyboardShortcut { get; set; }

        /// <summary>
        /// Gets or Sets IdleDetectionEnabled
        /// </summary>
        [DataMember(Name="idle_detection_enabled", EmitDefaultValue=false)]
        public bool? IdleDetectionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IdleDetectionIntervalInMinutes
        /// </summary>
        [DataMember(Name="idle_detection_interval_in_minutes", EmitDefaultValue=false)]
        public int? IdleDetectionIntervalInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets InactivityBehavior
        /// </summary>
        [DataMember(Name="inactivity_behavior", EmitDefaultValue=false)]
        public string InactivityBehavior { get; set; }

        /// <summary>
        /// Gets or Sets IsSummaryTotalViewVisible
        /// </summary>
        [DataMember(Name="is_summary_total_view_visible", EmitDefaultValue=false)]
        public bool? IsSummaryTotalViewVisible { get; set; }

        /// <summary>
        /// Gets or Sets KeepMiniTimerOnTop
        /// </summary>
        [DataMember(Name="keep_mini_timer_on_top", EmitDefaultValue=false)]
        public bool? KeepMiniTimerOnTop { get; set; }

        /// <summary>
        /// Gets or Sets KeepWindowOnTop
        /// </summary>
        [DataMember(Name="keep_window_on_top", EmitDefaultValue=false)]
        public bool? KeepWindowOnTop { get; set; }

        /// <summary>
        /// Gets or Sets KeyboardIncrementTimerPage
        /// </summary>
        [DataMember(Name="keyboard_increment_timer_page", EmitDefaultValue=false)]
        public int? KeyboardIncrementTimerPage { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="keyboard_shortcuts_enabled", EmitDefaultValue=false)]
        public bool? KeyboardShortcutsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets MacosAutoTrackingRules
        /// </summary>
        [DataMember(Name="macos_auto_tracking_rules", EmitDefaultValue=false)]
        public ModelsMacOSAutoTrackingRules MacosAutoTrackingRules { get; set; }

        /// <summary>
        /// Gets or Sets MacosShowHideTogglKeyboardShortcut
        /// </summary>
        [DataMember(Name="macos_show_hide_toggl_keyboard_shortcut", EmitDefaultValue=false)]
        public ModelsKeyboardShortcut MacosShowHideTogglKeyboardShortcut { get; set; }

        /// <summary>
        /// Gets or Sets MacosStopContinueKeyboardShortcut
        /// </summary>
        [DataMember(Name="macos_stop_continue_keyboard_shortcut", EmitDefaultValue=false)]
        public ModelsKeyboardShortcut MacosStopContinueKeyboardShortcut { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="manualEntryMode", EmitDefaultValue=false)]
        public string ManualEntryMode { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="manualMode", EmitDefaultValue=false)]
        public bool? ManualMode { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="manualModeOverlaySeen", EmitDefaultValue=false)]
        public bool? ManualModeOverlaySeen { get; set; }

        /// <summary>
        /// Gets or Sets ModifyOnStartTimeChange
        /// </summary>
        [DataMember(Name="modify_on_start_time_change", EmitDefaultValue=false)]
        public string ModifyOnStartTimeChange { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="offlineMode", EmitDefaultValue=false)]
        public string OfflineMode { get; set; }

        /// <summary>
        /// Gets or Sets PgTimeZoneName
        /// </summary>
        [DataMember(Name="pg_time_zone_name", EmitDefaultValue=false)]
        public string PgTimeZoneName { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroAutoStartBreak
        /// </summary>
        [DataMember(Name="pomodoro_auto_start_break", EmitDefaultValue=false)]
        public bool? PomodoroAutoStartBreak { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroAutoStartFocus
        /// </summary>
        [DataMember(Name="pomodoro_auto_start_focus", EmitDefaultValue=false)]
        public bool? PomodoroAutoStartFocus { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroBreakIntervalInMinutes
        /// </summary>
        [DataMember(Name="pomodoro_break_interval_in_minutes", EmitDefaultValue=false)]
        public int? PomodoroBreakIntervalInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroBreakProjectId
        /// </summary>
        [DataMember(Name="pomodoro_break_project_id", EmitDefaultValue=false)]
        public int? PomodoroBreakProjectId { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroBreakStartSoundEnabled
        /// </summary>
        [DataMember(Name="pomodoro_break_start_sound_enabled", EmitDefaultValue=false)]
        public bool? PomodoroBreakStartSoundEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroBreakTagId
        /// </summary>
        [DataMember(Name="pomodoro_break_tag_id", EmitDefaultValue=false)]
        public int? PomodoroBreakTagId { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroCountdownTimer
        /// </summary>
        [DataMember(Name="pomodoro_countdown_timer", EmitDefaultValue=false)]
        public bool? PomodoroCountdownTimer { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroEnabled
        /// </summary>
        [DataMember(Name="pomodoro_enabled", EmitDefaultValue=false)]
        public bool? PomodoroEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroFocusIntervalInMinutes
        /// </summary>
        [DataMember(Name="pomodoro_focus_interval_in_minutes", EmitDefaultValue=false)]
        public int? PomodoroFocusIntervalInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroFocusSound
        /// </summary>
        [DataMember(Name="pomodoro_focus_sound", EmitDefaultValue=false)]
        public string PomodoroFocusSound { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroGlobalSoundEnabled
        /// </summary>
        [DataMember(Name="pomodoro_global_sound_enabled", EmitDefaultValue=false)]
        public bool? PomodoroGlobalSoundEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroIntervalEndSound
        /// </summary>
        [DataMember(Name="pomodoro_interval_end_sound", EmitDefaultValue=false)]
        public bool? PomodoroIntervalEndSound { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroIntervalEndVolume
        /// </summary>
        [DataMember(Name="pomodoro_interval_end_volume", EmitDefaultValue=false)]
        public int? PomodoroIntervalEndVolume { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroLongerBreakDurationInMinutes
        /// </summary>
        [DataMember(Name="pomodoro_longer_break_duration_in_minutes", EmitDefaultValue=false)]
        public int? PomodoroLongerBreakDurationInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroPreventScreenLock
        /// </summary>
        [DataMember(Name="pomodoro_prevent_screen_lock", EmitDefaultValue=false)]
        public bool? PomodoroPreventScreenLock { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroRoundsBeforeLongerBreak
        /// </summary>
        [DataMember(Name="pomodoro_rounds_before_longer_break", EmitDefaultValue=false)]
        public int? PomodoroRoundsBeforeLongerBreak { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroSessionStartSoundEnabled
        /// </summary>
        [DataMember(Name="pomodoro_session_start_sound_enabled", EmitDefaultValue=false)]
        public bool? PomodoroSessionStartSoundEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroShowNotifications
        /// </summary>
        [DataMember(Name="pomodoro_show_notifications", EmitDefaultValue=false)]
        public bool? PomodoroShowNotifications { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroStopTimerAtIntervalEnd
        /// </summary>
        [DataMember(Name="pomodoro_stop_timer_at_interval_end", EmitDefaultValue=false)]
        public bool? PomodoroStopTimerAtIntervalEnd { get; set; }

        /// <summary>
        /// Gets or Sets PomodoroTrackBreaksAsTimeEntries
        /// </summary>
        [DataMember(Name="pomodoro_track_breaks_as_time_entries", EmitDefaultValue=false)]
        public bool? PomodoroTrackBreaksAsTimeEntries { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="projectDashboardActivityMode", EmitDefaultValue=false)]
        public string ProjectDashboardActivityMode { get; set; }

        /// <summary>
        /// Gets or Sets ProjectShortcutEnabled
        /// </summary>
        [DataMember(Name="project_shortcut_enabled", EmitDefaultValue=false)]
        public bool? ProjectShortcutEnabled { get; set; }

        /// <summary>
        /// Gets or Sets RecordTimeline
        /// </summary>
        [DataMember(Name="record_timeline", EmitDefaultValue=false)]
        public bool? RecordTimeline { get; set; }

        /// <summary>
        /// Gets or Sets RememberLastProject
        /// </summary>
        [DataMember(Name="remember_last_project", EmitDefaultValue=false)]
        public string RememberLastProject { get; set; }

        /// <summary>
        /// Gets or Sets ReminderDays
        /// </summary>
        [DataMember(Name="reminder_days", EmitDefaultValue=false)]
        public string ReminderDays { get; set; }

        /// <summary>
        /// Gets or Sets ReminderEnabled
        /// </summary>
        [DataMember(Name="reminder_enabled", EmitDefaultValue=false)]
        public bool? ReminderEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ReminderIntervalInMinutes
        /// </summary>
        [DataMember(Name="reminder_interval_in_minutes", EmitDefaultValue=false)]
        public int? ReminderIntervalInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ReminderPeriod
        /// </summary>
        [DataMember(Name="reminder_period", EmitDefaultValue=false)]
        public string ReminderPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ReminderSnoozingInMinutes
        /// </summary>
        [DataMember(Name="reminder_snoozing_in_minutes", EmitDefaultValue=false)]
        public int? ReminderSnoozingInMinutes { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="reportRounding", EmitDefaultValue=false)]
        public bool? ReportRounding { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="reportRoundingDirection", EmitDefaultValue=false)]
        public string ReportRoundingDirection { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="reportRoundingStepInMinutes", EmitDefaultValue=false)]
        public int? ReportRoundingStepInMinutes { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="reportsHideWeekends", EmitDefaultValue=false)]
        public bool? ReportsHideWeekends { get; set; }

        /// <summary>
        /// Gets or Sets RunningEntryWarning
        /// </summary>
        [DataMember(Name="running_entry_warning", EmitDefaultValue=false)]
        public string RunningEntryWarning { get; set; }

        /// <summary>
        /// Gets or Sets RunningTimerNotificationEnabled
        /// </summary>
        [DataMember(Name="running_timer_notification_enabled", EmitDefaultValue=false)]
        public bool? RunningTimerNotificationEnabled { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="seenFollowModal", EmitDefaultValue=false)]
        public bool? SeenFollowModal { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="seenFooterPopup", EmitDefaultValue=false)]
        public bool? SeenFooterPopup { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="seenProjectDashboardOverlay", EmitDefaultValue=false)]
        public bool? SeenProjectDashboardOverlay { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="seenTogglButtonModal", EmitDefaultValue=false)]
        public bool? SeenTogglButtonModal { get; set; }

        /// <summary>
        /// Gets or Sets SendProductEmails
        /// </summary>
        [DataMember(Name="send_product_emails", EmitDefaultValue=false)]
        public bool? SendProductEmails { get; set; }

        /// <summary>
        /// Gets or Sets SendTimerNotifications
        /// </summary>
        [DataMember(Name="send_timer_notifications", EmitDefaultValue=false)]
        public bool? SendTimerNotifications { get; set; }

        /// <summary>
        /// Gets or Sets SendWeeklyReport
        /// </summary>
        [DataMember(Name="send_weekly_report", EmitDefaultValue=false)]
        public bool? SendWeeklyReport { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="showTimeInTitle", EmitDefaultValue=false)]
        public bool? ShowTimeInTitle { get; set; }

        /// <summary>
        /// Gets or Sets ShowAllEntries
        /// </summary>
        [DataMember(Name="show_all_entries", EmitDefaultValue=false)]
        public bool? ShowAllEntries { get; set; }

        /// <summary>
        /// Gets or Sets ShowChangelog
        /// </summary>
        [DataMember(Name="show_changelog", EmitDefaultValue=false)]
        public bool? ShowChangelog { get; set; }

        /// <summary>
        /// Gets or Sets ShowDescriptionInMenuBar
        /// </summary>
        [DataMember(Name="show_description_in_menu_bar", EmitDefaultValue=false)]
        public bool? ShowDescriptionInMenuBar { get; set; }

        /// <summary>
        /// Gets or Sets ShowDockIcon
        /// </summary>
        [DataMember(Name="show_dock_icon", EmitDefaultValue=false)]
        public bool? ShowDockIcon { get; set; }

        /// <summary>
        /// Gets or Sets ShowEventsInCalendar
        /// </summary>
        [DataMember(Name="show_events_in_calendar", EmitDefaultValue=false)]
        public bool? ShowEventsInCalendar { get; set; }

        /// <summary>
        /// Gets or Sets ShowProjectInMenuBar
        /// </summary>
        [DataMember(Name="show_project_in_menu_bar", EmitDefaultValue=false)]
        public bool? ShowProjectInMenuBar { get; set; }

        /// <summary>
        /// Gets or Sets ShowQrScanner
        /// </summary>
        [DataMember(Name="show_qr_scanner", EmitDefaultValue=false)]
        public bool? ShowQrScanner { get; set; }

        /// <summary>
        /// Gets or Sets ShowSecondsInMenuBar
        /// </summary>
        [DataMember(Name="show_seconds_in_menu_bar", EmitDefaultValue=false)]
        public bool? ShowSecondsInMenuBar { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="show_timeline_in_day_view", EmitDefaultValue=false)]
        public bool? ShowTimelineInDayView { get; set; }

        /// <summary>
        /// Gets or Sets ShowTimerInMenuBar
        /// </summary>
        [DataMember(Name="show_timer_in_menu_bar", EmitDefaultValue=false)]
        public bool? ShowTimerInMenuBar { get; set; }

        /// <summary>
        /// Gets or Sets ShowTodayTotalInMenuBar
        /// </summary>
        [DataMember(Name="show_today_total_in_menu_bar", EmitDefaultValue=false)]
        public bool? ShowTodayTotalInMenuBar { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="show_total_billable_hours", EmitDefaultValue=false)]
        public bool? ShowTotalBillableHours { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="show_weekend_on_timer_page", EmitDefaultValue=false)]
        public bool? ShowWeekendOnTimerPage { get; set; }

        /// <summary>
        /// Gets or Sets ShowWorkoutsInCalendar
        /// </summary>
        [DataMember(Name="show_workouts_in_calendar", EmitDefaultValue=false)]
        public bool? ShowWorkoutsInCalendar { get; set; }

        /// <summary>
        /// Gets or Sets SleepBehaviour
        /// </summary>
        [DataMember(Name="sleep_behaviour", EmitDefaultValue=false)]
        public string SleepBehaviour { get; set; }

        /// <summary>
        /// Gets or Sets SmartAlertsOption
        /// </summary>
        [DataMember(Name="smart_alerts_option", EmitDefaultValue=false)]
        public string SmartAlertsOption { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="snowballReportRounding", EmitDefaultValue=false)]
        public string SnowballReportRounding { get; set; }

        /// <summary>
        /// Gets or Sets StackTimesOnManualModeAfter
        /// </summary>
        [DataMember(Name="stack_times_on_manual_mode_after", EmitDefaultValue=false)]
        public string StackTimesOnManualModeAfter { get; set; }

        /// <summary>
        /// Gets or Sets StartAutomatically
        /// </summary>
        [DataMember(Name="start_automatically", EmitDefaultValue=false)]
        public bool? StartAutomatically { get; set; }

        /// <summary>
        /// Gets or Sets StartShortcutMode
        /// </summary>
        [DataMember(Name="start_shortcut_mode", EmitDefaultValue=false)]
        public string StartShortcutMode { get; set; }

        /// <summary>
        /// Gets or Sets StopAtSpecificTime
        /// </summary>
        [DataMember(Name="stop_at_specific_time", EmitDefaultValue=false)]
        public bool? StopAtSpecificTime { get; set; }

        /// <summary>
        /// Gets or Sets StopAutomatically
        /// </summary>
        [DataMember(Name="stop_automatically", EmitDefaultValue=false)]
        public bool? StopAutomatically { get; set; }

        /// <summary>
        /// Gets or Sets StopEntryOnShutdown
        /// </summary>
        [DataMember(Name="stop_entry_on_shutdown", EmitDefaultValue=false)]
        public bool? StopEntryOnShutdown { get; set; }

        /// <summary>
        /// Gets or Sets StopSpecifiedTime
        /// </summary>
        [DataMember(Name="stop_specified_time", EmitDefaultValue=false)]
        public string StopSpecifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets StoppedTimerNotificationEnabled
        /// </summary>
        [DataMember(Name="stopped_timer_notification_enabled", EmitDefaultValue=false)]
        public bool? StoppedTimerNotificationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SuggestionsEnabled
        /// </summary>
        [DataMember(Name="suggestions_enabled", EmitDefaultValue=false)]
        public bool? SuggestionsEnabled { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="summaryReportAmounts", EmitDefaultValue=false)]
        public string SummaryReportAmounts { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="summaryReportDistinctRates", EmitDefaultValue=false)]
        public bool? SummaryReportDistinctRates { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="summaryReportGrouping", EmitDefaultValue=false)]
        public string SummaryReportGrouping { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="summaryReportSortAsc", EmitDefaultValue=false)]
        public bool? SummaryReportSortAsc { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="summaryReportSortField", EmitDefaultValue=false)]
        public string SummaryReportSortField { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="summaryReportSubGrouping", EmitDefaultValue=false)]
        public string SummaryReportSubGrouping { get; set; }

        /// <summary>
        /// Gets or Sets SummaryTotalMode
        /// </summary>
        [DataMember(Name="summary_total_mode", EmitDefaultValue=false)]
        public string SummaryTotalMode { get; set; }

        /// <summary>
        /// Gets or Sets TagsShortcutEnabled
        /// </summary>
        [DataMember(Name="tags_shortcut_enabled", EmitDefaultValue=false)]
        public bool? TagsShortcutEnabled { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public string Theme { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryDisplayMode
        /// </summary>
        [DataMember(Name="time_entry_display_mode", EmitDefaultValue=false)]
        public string TimeEntryDisplayMode { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryGhostSuggestionsEnabled
        /// </summary>
        [DataMember(Name="time_entry_ghost_suggestions_enabled", EmitDefaultValue=false)]
        public bool? TimeEntryGhostSuggestionsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryInvitationsNotificationEnabled
        /// </summary>
        [DataMember(Name="time_entry_invitations_notification_enabled", EmitDefaultValue=false)]
        public bool? TimeEntryInvitationsNotificationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryStartStopInputMode
        /// </summary>
        [DataMember(Name="time_entry_start_stop_input_mode", EmitDefaultValue=false)]
        public string TimeEntryStartStopInputMode { get; set; }

        /// <summary>
        /// Gets or Sets TimeofdayFormat
        /// </summary>
        [DataMember(Name="timeofday_format", EmitDefaultValue=false)]
        public string TimeofdayFormat { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="timerView", EmitDefaultValue=false)]
        public string TimerView { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="timerViewMobile", EmitDefaultValue=false)]
        public string TimerViewMobile { get; set; }

        /// <summary>
        /// ToSAcceptNeeded represents the trigger for new ToS accept dialog
        /// </summary>
        /// <value>ToSAcceptNeeded represents the trigger for new ToS accept dialog</value>
        [DataMember(Name="toSAcceptNeeded", EmitDefaultValue=false)]
        public bool? ToSAcceptNeeded { get; set; }

        /// <summary>
        /// Gets or Sets UseMiniTimer
        /// </summary>
        [DataMember(Name="use_mini_timer", EmitDefaultValue=false)]
        public bool? UseMiniTimer { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="visibleFooter", EmitDefaultValue=false)]
        public string VisibleFooter { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="webTimeEntryStarted", EmitDefaultValue=false)]
        public bool? WebTimeEntryStarted { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="webTimeEntryStopped", EmitDefaultValue=false)]
        public bool? WebTimeEntryStopped { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="weeklyReportGrouping", EmitDefaultValue=false)]
        public string WeeklyReportGrouping { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="weeklyReportValueToShow", EmitDefaultValue=false)]
        public string WeeklyReportValueToShow { get; set; }

        /// <summary>
        /// Gets or Sets WindowsAutoTrackingRules
        /// </summary>
        [DataMember(Name="windows_auto_tracking_rules", EmitDefaultValue=false)]
        public ModelsWindowsAutoTrackingRules WindowsAutoTrackingRules { get; set; }

        /// <summary>
        /// Gets or Sets WindowsShowHideTogglKeyboardShortcut
        /// </summary>
        [DataMember(Name="windows_show_hide_toggl_keyboard_shortcut", EmitDefaultValue=false)]
        public ModelsKeyboardShortcut WindowsShowHideTogglKeyboardShortcut { get; set; }

        /// <summary>
        /// Gets or Sets WindowsStopContinueKeyboardShortcut
        /// </summary>
        [DataMember(Name="windows_stop_continue_keyboard_shortcut", EmitDefaultValue=false)]
        public ModelsKeyboardShortcut WindowsStopContinueKeyboardShortcut { get; set; }

        /// <summary>
        /// Gets or Sets WindowsStopStartKeyboardShortcut
        /// </summary>
        [DataMember(Name="windows_stop_start_keyboard_shortcut", EmitDefaultValue=false)]
        public ModelsKeyboardShortcut WindowsStopStartKeyboardShortcut { get; set; }

        /// <summary>
        /// Gets or Sets WindowsTheme
        /// </summary>
        [DataMember(Name="windows_theme", EmitDefaultValue=false)]
        public string WindowsTheme { get; set; }

        /// <summary>
        /// Gets or Sets WorkoutDefaultProjectId
        /// </summary>
        [DataMember(Name="workout_default_project_id", EmitDefaultValue=false)]
        public int? WorkoutDefaultProjectId { get; set; }

        /// <summary>
        /// Gets or Sets WorkoutDefaultTagId
        /// </summary>
        [DataMember(Name="workout_default_tag_id", EmitDefaultValue=false)]
        public int? WorkoutDefaultTagId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsAllPreferences {\n");
            sb.Append("  ActivityTimelineDisplayActivity: ").Append(ActivityTimelineDisplayActivity).Append("\n");
            sb.Append("  ActivityTimelineGroupingInterval: ").Append(ActivityTimelineGroupingInterval).Append("\n");
            sb.Append("  ActivityTimelineGroupingMethod: ").Append(ActivityTimelineGroupingMethod).Append("\n");
            sb.Append("  ActivityTimelineRecordingLevel: ").Append(ActivityTimelineRecordingLevel).Append("\n");
            sb.Append("  ActivityTimelineSyncEvents: ").Append(ActivityTimelineSyncEvents).Append("\n");
            sb.Append("  AlphaFeatures: ").Append(AlphaFeatures).Append("\n");
            sb.Append("  AutomaticTagging: ").Append(AutomaticTagging).Append("\n");
            sb.Append("  AutotrackingEnabled: ").Append(AutotrackingEnabled).Append("\n");
            sb.Append("  BeginningOfWeek: ").Append(BeginningOfWeek).Append("\n");
            sb.Append("  CalendarSnapDuration: ").Append(CalendarSnapDuration).Append("\n");
            sb.Append("  CalendarSnapInitialLocation: ").Append(CalendarSnapInitialLocation).Append("\n");
            sb.Append("  CalendarVisibleHoursEnd: ").Append(CalendarVisibleHoursEnd).Append("\n");
            sb.Append("  CalendarVisibleHoursStart: ").Append(CalendarVisibleHoursStart).Append("\n");
            sb.Append("  CalendarZoomLevel: ").Append(CalendarZoomLevel).Append("\n");
            sb.Append("  CellSwipeActionsEnabled: ").Append(CellSwipeActionsEnabled).Append("\n");
            sb.Append("  ChartsViewType: ").Append(ChartsViewType).Append("\n");
            sb.Append("  CollapseDetailedReportEntries: ").Append(CollapseDetailedReportEntries).Append("\n");
            sb.Append("  CollapseTimeEntries: ").Append(CollapseTimeEntries).Append("\n");
            sb.Append("  DashboardsViewType: ").Append(DashboardsViewType).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  DecimalSeparator: ").Append(DecimalSeparator).Append("\n");
            sb.Append("  DefaultProjectId: ").Append(DefaultProjectId).Append("\n");
            sb.Append("  DefaultTaskId: ").Append(DefaultTaskId).Append("\n");
            sb.Append("  DisplayDensity: ").Append(DisplayDensity).Append("\n");
            sb.Append("  DistinctRates: ").Append(DistinctRates).Append("\n");
            sb.Append("  DurationFormat: ").Append(DurationFormat).Append("\n");
            sb.Append("  DurationFormatOnTimerDurationField: ").Append(DurationFormatOnTimerDurationField).Append("\n");
            sb.Append("  EditPopupIntegrationTimer: ").Append(EditPopupIntegrationTimer).Append("\n");
            sb.Append("  ExtensionSendErrorReports: ").Append(ExtensionSendErrorReports).Append("\n");
            sb.Append("  ExtensionSendUsageStatistics: ").Append(ExtensionSendUsageStatistics).Append("\n");
            sb.Append("  FirstSeenBusinessPromo: ").Append(FirstSeenBusinessPromo).Append("\n");
            sb.Append("  FocusAppOnTimeEntryStarted: ").Append(FocusAppOnTimeEntryStarted).Append("\n");
            sb.Append("  FocusAppOnTimeEntryStopped: ").Append(FocusAppOnTimeEntryStopped).Append("\n");
            sb.Append("  HapticFeedbackEnabled: ").Append(HapticFeedbackEnabled).Append("\n");
            sb.Append("  HideKeyboardShortcut: ").Append(HideKeyboardShortcut).Append("\n");
            sb.Append("  IdleDetectionEnabled: ").Append(IdleDetectionEnabled).Append("\n");
            sb.Append("  IdleDetectionIntervalInMinutes: ").Append(IdleDetectionIntervalInMinutes).Append("\n");
            sb.Append("  InactivityBehavior: ").Append(InactivityBehavior).Append("\n");
            sb.Append("  IsSummaryTotalViewVisible: ").Append(IsSummaryTotalViewVisible).Append("\n");
            sb.Append("  KeepMiniTimerOnTop: ").Append(KeepMiniTimerOnTop).Append("\n");
            sb.Append("  KeepWindowOnTop: ").Append(KeepWindowOnTop).Append("\n");
            sb.Append("  KeyboardIncrementTimerPage: ").Append(KeyboardIncrementTimerPage).Append("\n");
            sb.Append("  KeyboardShortcutsEnabled: ").Append(KeyboardShortcutsEnabled).Append("\n");
            sb.Append("  MacosAutoTrackingRules: ").Append(MacosAutoTrackingRules).Append("\n");
            sb.Append("  MacosShowHideTogglKeyboardShortcut: ").Append(MacosShowHideTogglKeyboardShortcut).Append("\n");
            sb.Append("  MacosStopContinueKeyboardShortcut: ").Append(MacosStopContinueKeyboardShortcut).Append("\n");
            sb.Append("  ManualEntryMode: ").Append(ManualEntryMode).Append("\n");
            sb.Append("  ManualMode: ").Append(ManualMode).Append("\n");
            sb.Append("  ManualModeOverlaySeen: ").Append(ManualModeOverlaySeen).Append("\n");
            sb.Append("  ModifyOnStartTimeChange: ").Append(ModifyOnStartTimeChange).Append("\n");
            sb.Append("  OfflineMode: ").Append(OfflineMode).Append("\n");
            sb.Append("  PgTimeZoneName: ").Append(PgTimeZoneName).Append("\n");
            sb.Append("  PomodoroAutoStartBreak: ").Append(PomodoroAutoStartBreak).Append("\n");
            sb.Append("  PomodoroAutoStartFocus: ").Append(PomodoroAutoStartFocus).Append("\n");
            sb.Append("  PomodoroBreakIntervalInMinutes: ").Append(PomodoroBreakIntervalInMinutes).Append("\n");
            sb.Append("  PomodoroBreakProjectId: ").Append(PomodoroBreakProjectId).Append("\n");
            sb.Append("  PomodoroBreakStartSoundEnabled: ").Append(PomodoroBreakStartSoundEnabled).Append("\n");
            sb.Append("  PomodoroBreakTagId: ").Append(PomodoroBreakTagId).Append("\n");
            sb.Append("  PomodoroCountdownTimer: ").Append(PomodoroCountdownTimer).Append("\n");
            sb.Append("  PomodoroEnabled: ").Append(PomodoroEnabled).Append("\n");
            sb.Append("  PomodoroFocusIntervalInMinutes: ").Append(PomodoroFocusIntervalInMinutes).Append("\n");
            sb.Append("  PomodoroFocusSound: ").Append(PomodoroFocusSound).Append("\n");
            sb.Append("  PomodoroGlobalSoundEnabled: ").Append(PomodoroGlobalSoundEnabled).Append("\n");
            sb.Append("  PomodoroIntervalEndSound: ").Append(PomodoroIntervalEndSound).Append("\n");
            sb.Append("  PomodoroIntervalEndVolume: ").Append(PomodoroIntervalEndVolume).Append("\n");
            sb.Append("  PomodoroLongerBreakDurationInMinutes: ").Append(PomodoroLongerBreakDurationInMinutes).Append("\n");
            sb.Append("  PomodoroPreventScreenLock: ").Append(PomodoroPreventScreenLock).Append("\n");
            sb.Append("  PomodoroRoundsBeforeLongerBreak: ").Append(PomodoroRoundsBeforeLongerBreak).Append("\n");
            sb.Append("  PomodoroSessionStartSoundEnabled: ").Append(PomodoroSessionStartSoundEnabled).Append("\n");
            sb.Append("  PomodoroShowNotifications: ").Append(PomodoroShowNotifications).Append("\n");
            sb.Append("  PomodoroStopTimerAtIntervalEnd: ").Append(PomodoroStopTimerAtIntervalEnd).Append("\n");
            sb.Append("  PomodoroTrackBreaksAsTimeEntries: ").Append(PomodoroTrackBreaksAsTimeEntries).Append("\n");
            sb.Append("  ProjectDashboardActivityMode: ").Append(ProjectDashboardActivityMode).Append("\n");
            sb.Append("  ProjectShortcutEnabled: ").Append(ProjectShortcutEnabled).Append("\n");
            sb.Append("  RecordTimeline: ").Append(RecordTimeline).Append("\n");
            sb.Append("  RememberLastProject: ").Append(RememberLastProject).Append("\n");
            sb.Append("  ReminderDays: ").Append(ReminderDays).Append("\n");
            sb.Append("  ReminderEnabled: ").Append(ReminderEnabled).Append("\n");
            sb.Append("  ReminderIntervalInMinutes: ").Append(ReminderIntervalInMinutes).Append("\n");
            sb.Append("  ReminderPeriod: ").Append(ReminderPeriod).Append("\n");
            sb.Append("  ReminderSnoozingInMinutes: ").Append(ReminderSnoozingInMinutes).Append("\n");
            sb.Append("  ReportRounding: ").Append(ReportRounding).Append("\n");
            sb.Append("  ReportRoundingDirection: ").Append(ReportRoundingDirection).Append("\n");
            sb.Append("  ReportRoundingStepInMinutes: ").Append(ReportRoundingStepInMinutes).Append("\n");
            sb.Append("  ReportsHideWeekends: ").Append(ReportsHideWeekends).Append("\n");
            sb.Append("  RunningEntryWarning: ").Append(RunningEntryWarning).Append("\n");
            sb.Append("  RunningTimerNotificationEnabled: ").Append(RunningTimerNotificationEnabled).Append("\n");
            sb.Append("  SeenFollowModal: ").Append(SeenFollowModal).Append("\n");
            sb.Append("  SeenFooterPopup: ").Append(SeenFooterPopup).Append("\n");
            sb.Append("  SeenProjectDashboardOverlay: ").Append(SeenProjectDashboardOverlay).Append("\n");
            sb.Append("  SeenTogglButtonModal: ").Append(SeenTogglButtonModal).Append("\n");
            sb.Append("  SendProductEmails: ").Append(SendProductEmails).Append("\n");
            sb.Append("  SendTimerNotifications: ").Append(SendTimerNotifications).Append("\n");
            sb.Append("  SendWeeklyReport: ").Append(SendWeeklyReport).Append("\n");
            sb.Append("  ShowTimeInTitle: ").Append(ShowTimeInTitle).Append("\n");
            sb.Append("  ShowAllEntries: ").Append(ShowAllEntries).Append("\n");
            sb.Append("  ShowChangelog: ").Append(ShowChangelog).Append("\n");
            sb.Append("  ShowDescriptionInMenuBar: ").Append(ShowDescriptionInMenuBar).Append("\n");
            sb.Append("  ShowDockIcon: ").Append(ShowDockIcon).Append("\n");
            sb.Append("  ShowEventsInCalendar: ").Append(ShowEventsInCalendar).Append("\n");
            sb.Append("  ShowProjectInMenuBar: ").Append(ShowProjectInMenuBar).Append("\n");
            sb.Append("  ShowQrScanner: ").Append(ShowQrScanner).Append("\n");
            sb.Append("  ShowSecondsInMenuBar: ").Append(ShowSecondsInMenuBar).Append("\n");
            sb.Append("  ShowTimelineInDayView: ").Append(ShowTimelineInDayView).Append("\n");
            sb.Append("  ShowTimerInMenuBar: ").Append(ShowTimerInMenuBar).Append("\n");
            sb.Append("  ShowTodayTotalInMenuBar: ").Append(ShowTodayTotalInMenuBar).Append("\n");
            sb.Append("  ShowTotalBillableHours: ").Append(ShowTotalBillableHours).Append("\n");
            sb.Append("  ShowWeekendOnTimerPage: ").Append(ShowWeekendOnTimerPage).Append("\n");
            sb.Append("  ShowWorkoutsInCalendar: ").Append(ShowWorkoutsInCalendar).Append("\n");
            sb.Append("  SleepBehaviour: ").Append(SleepBehaviour).Append("\n");
            sb.Append("  SmartAlertsOption: ").Append(SmartAlertsOption).Append("\n");
            sb.Append("  SnowballReportRounding: ").Append(SnowballReportRounding).Append("\n");
            sb.Append("  StackTimesOnManualModeAfter: ").Append(StackTimesOnManualModeAfter).Append("\n");
            sb.Append("  StartAutomatically: ").Append(StartAutomatically).Append("\n");
            sb.Append("  StartShortcutMode: ").Append(StartShortcutMode).Append("\n");
            sb.Append("  StopAtSpecificTime: ").Append(StopAtSpecificTime).Append("\n");
            sb.Append("  StopAutomatically: ").Append(StopAutomatically).Append("\n");
            sb.Append("  StopEntryOnShutdown: ").Append(StopEntryOnShutdown).Append("\n");
            sb.Append("  StopSpecifiedTime: ").Append(StopSpecifiedTime).Append("\n");
            sb.Append("  StoppedTimerNotificationEnabled: ").Append(StoppedTimerNotificationEnabled).Append("\n");
            sb.Append("  SuggestionsEnabled: ").Append(SuggestionsEnabled).Append("\n");
            sb.Append("  SummaryReportAmounts: ").Append(SummaryReportAmounts).Append("\n");
            sb.Append("  SummaryReportDistinctRates: ").Append(SummaryReportDistinctRates).Append("\n");
            sb.Append("  SummaryReportGrouping: ").Append(SummaryReportGrouping).Append("\n");
            sb.Append("  SummaryReportSortAsc: ").Append(SummaryReportSortAsc).Append("\n");
            sb.Append("  SummaryReportSortField: ").Append(SummaryReportSortField).Append("\n");
            sb.Append("  SummaryReportSubGrouping: ").Append(SummaryReportSubGrouping).Append("\n");
            sb.Append("  SummaryTotalMode: ").Append(SummaryTotalMode).Append("\n");
            sb.Append("  TagsShortcutEnabled: ").Append(TagsShortcutEnabled).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  TimeEntryDisplayMode: ").Append(TimeEntryDisplayMode).Append("\n");
            sb.Append("  TimeEntryGhostSuggestionsEnabled: ").Append(TimeEntryGhostSuggestionsEnabled).Append("\n");
            sb.Append("  TimeEntryInvitationsNotificationEnabled: ").Append(TimeEntryInvitationsNotificationEnabled).Append("\n");
            sb.Append("  TimeEntryStartStopInputMode: ").Append(TimeEntryStartStopInputMode).Append("\n");
            sb.Append("  TimeofdayFormat: ").Append(TimeofdayFormat).Append("\n");
            sb.Append("  TimerView: ").Append(TimerView).Append("\n");
            sb.Append("  TimerViewMobile: ").Append(TimerViewMobile).Append("\n");
            sb.Append("  ToSAcceptNeeded: ").Append(ToSAcceptNeeded).Append("\n");
            sb.Append("  UseMiniTimer: ").Append(UseMiniTimer).Append("\n");
            sb.Append("  VisibleFooter: ").Append(VisibleFooter).Append("\n");
            sb.Append("  WebTimeEntryStarted: ").Append(WebTimeEntryStarted).Append("\n");
            sb.Append("  WebTimeEntryStopped: ").Append(WebTimeEntryStopped).Append("\n");
            sb.Append("  WeeklyReportGrouping: ").Append(WeeklyReportGrouping).Append("\n");
            sb.Append("  WeeklyReportValueToShow: ").Append(WeeklyReportValueToShow).Append("\n");
            sb.Append("  WindowsAutoTrackingRules: ").Append(WindowsAutoTrackingRules).Append("\n");
            sb.Append("  WindowsShowHideTogglKeyboardShortcut: ").Append(WindowsShowHideTogglKeyboardShortcut).Append("\n");
            sb.Append("  WindowsStopContinueKeyboardShortcut: ").Append(WindowsStopContinueKeyboardShortcut).Append("\n");
            sb.Append("  WindowsStopStartKeyboardShortcut: ").Append(WindowsStopStartKeyboardShortcut).Append("\n");
            sb.Append("  WindowsTheme: ").Append(WindowsTheme).Append("\n");
            sb.Append("  WorkoutDefaultProjectId: ").Append(WorkoutDefaultProjectId).Append("\n");
            sb.Append("  WorkoutDefaultTagId: ").Append(WorkoutDefaultTagId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsAllPreferences);
        }

        /// <summary>
        /// Returns true if ModelsAllPreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsAllPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsAllPreferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityTimelineDisplayActivity == input.ActivityTimelineDisplayActivity ||
                    (this.ActivityTimelineDisplayActivity != null &&
                    this.ActivityTimelineDisplayActivity.Equals(input.ActivityTimelineDisplayActivity))
                ) && 
                (
                    this.ActivityTimelineGroupingInterval == input.ActivityTimelineGroupingInterval ||
                    (this.ActivityTimelineGroupingInterval != null &&
                    this.ActivityTimelineGroupingInterval.Equals(input.ActivityTimelineGroupingInterval))
                ) && 
                (
                    this.ActivityTimelineGroupingMethod == input.ActivityTimelineGroupingMethod ||
                    (this.ActivityTimelineGroupingMethod != null &&
                    this.ActivityTimelineGroupingMethod.Equals(input.ActivityTimelineGroupingMethod))
                ) && 
                (
                    this.ActivityTimelineRecordingLevel == input.ActivityTimelineRecordingLevel ||
                    (this.ActivityTimelineRecordingLevel != null &&
                    this.ActivityTimelineRecordingLevel.Equals(input.ActivityTimelineRecordingLevel))
                ) && 
                (
                    this.ActivityTimelineSyncEvents == input.ActivityTimelineSyncEvents ||
                    (this.ActivityTimelineSyncEvents != null &&
                    this.ActivityTimelineSyncEvents.Equals(input.ActivityTimelineSyncEvents))
                ) && 
                (
                    this.AlphaFeatures == input.AlphaFeatures ||
                    this.AlphaFeatures != null &&
                    this.AlphaFeatures.SequenceEqual(input.AlphaFeatures)
                ) && 
                (
                    this.AutomaticTagging == input.AutomaticTagging ||
                    (this.AutomaticTagging != null &&
                    this.AutomaticTagging.Equals(input.AutomaticTagging))
                ) && 
                (
                    this.AutotrackingEnabled == input.AutotrackingEnabled ||
                    (this.AutotrackingEnabled != null &&
                    this.AutotrackingEnabled.Equals(input.AutotrackingEnabled))
                ) && 
                (
                    this.BeginningOfWeek == input.BeginningOfWeek ||
                    (this.BeginningOfWeek != null &&
                    this.BeginningOfWeek.Equals(input.BeginningOfWeek))
                ) && 
                (
                    this.CalendarSnapDuration == input.CalendarSnapDuration ||
                    (this.CalendarSnapDuration != null &&
                    this.CalendarSnapDuration.Equals(input.CalendarSnapDuration))
                ) && 
                (
                    this.CalendarSnapInitialLocation == input.CalendarSnapInitialLocation ||
                    (this.CalendarSnapInitialLocation != null &&
                    this.CalendarSnapInitialLocation.Equals(input.CalendarSnapInitialLocation))
                ) && 
                (
                    this.CalendarVisibleHoursEnd == input.CalendarVisibleHoursEnd ||
                    (this.CalendarVisibleHoursEnd != null &&
                    this.CalendarVisibleHoursEnd.Equals(input.CalendarVisibleHoursEnd))
                ) && 
                (
                    this.CalendarVisibleHoursStart == input.CalendarVisibleHoursStart ||
                    (this.CalendarVisibleHoursStart != null &&
                    this.CalendarVisibleHoursStart.Equals(input.CalendarVisibleHoursStart))
                ) && 
                (
                    this.CalendarZoomLevel == input.CalendarZoomLevel ||
                    (this.CalendarZoomLevel != null &&
                    this.CalendarZoomLevel.Equals(input.CalendarZoomLevel))
                ) && 
                (
                    this.CellSwipeActionsEnabled == input.CellSwipeActionsEnabled ||
                    (this.CellSwipeActionsEnabled != null &&
                    this.CellSwipeActionsEnabled.Equals(input.CellSwipeActionsEnabled))
                ) && 
                (
                    this.ChartsViewType == input.ChartsViewType ||
                    (this.ChartsViewType != null &&
                    this.ChartsViewType.Equals(input.ChartsViewType))
                ) && 
                (
                    this.CollapseDetailedReportEntries == input.CollapseDetailedReportEntries ||
                    (this.CollapseDetailedReportEntries != null &&
                    this.CollapseDetailedReportEntries.Equals(input.CollapseDetailedReportEntries))
                ) && 
                (
                    this.CollapseTimeEntries == input.CollapseTimeEntries ||
                    (this.CollapseTimeEntries != null &&
                    this.CollapseTimeEntries.Equals(input.CollapseTimeEntries))
                ) && 
                (
                    this.DashboardsViewType == input.DashboardsViewType ||
                    (this.DashboardsViewType != null &&
                    this.DashboardsViewType.Equals(input.DashboardsViewType))
                ) && 
                (
                    this.DateFormat == input.DateFormat ||
                    (this.DateFormat != null &&
                    this.DateFormat.Equals(input.DateFormat))
                ) && 
                (
                    this.DecimalSeparator == input.DecimalSeparator ||
                    (this.DecimalSeparator != null &&
                    this.DecimalSeparator.Equals(input.DecimalSeparator))
                ) && 
                (
                    this.DefaultProjectId == input.DefaultProjectId ||
                    (this.DefaultProjectId != null &&
                    this.DefaultProjectId.Equals(input.DefaultProjectId))
                ) && 
                (
                    this.DefaultTaskId == input.DefaultTaskId ||
                    (this.DefaultTaskId != null &&
                    this.DefaultTaskId.Equals(input.DefaultTaskId))
                ) && 
                (
                    this.DisplayDensity == input.DisplayDensity ||
                    (this.DisplayDensity != null &&
                    this.DisplayDensity.Equals(input.DisplayDensity))
                ) && 
                (
                    this.DistinctRates == input.DistinctRates ||
                    (this.DistinctRates != null &&
                    this.DistinctRates.Equals(input.DistinctRates))
                ) && 
                (
                    this.DurationFormat == input.DurationFormat ||
                    (this.DurationFormat != null &&
                    this.DurationFormat.Equals(input.DurationFormat))
                ) && 
                (
                    this.DurationFormatOnTimerDurationField == input.DurationFormatOnTimerDurationField ||
                    (this.DurationFormatOnTimerDurationField != null &&
                    this.DurationFormatOnTimerDurationField.Equals(input.DurationFormatOnTimerDurationField))
                ) && 
                (
                    this.EditPopupIntegrationTimer == input.EditPopupIntegrationTimer ||
                    (this.EditPopupIntegrationTimer != null &&
                    this.EditPopupIntegrationTimer.Equals(input.EditPopupIntegrationTimer))
                ) && 
                (
                    this.ExtensionSendErrorReports == input.ExtensionSendErrorReports ||
                    (this.ExtensionSendErrorReports != null &&
                    this.ExtensionSendErrorReports.Equals(input.ExtensionSendErrorReports))
                ) && 
                (
                    this.ExtensionSendUsageStatistics == input.ExtensionSendUsageStatistics ||
                    (this.ExtensionSendUsageStatistics != null &&
                    this.ExtensionSendUsageStatistics.Equals(input.ExtensionSendUsageStatistics))
                ) && 
                (
                    this.FirstSeenBusinessPromo == input.FirstSeenBusinessPromo ||
                    (this.FirstSeenBusinessPromo != null &&
                    this.FirstSeenBusinessPromo.Equals(input.FirstSeenBusinessPromo))
                ) && 
                (
                    this.FocusAppOnTimeEntryStarted == input.FocusAppOnTimeEntryStarted ||
                    (this.FocusAppOnTimeEntryStarted != null &&
                    this.FocusAppOnTimeEntryStarted.Equals(input.FocusAppOnTimeEntryStarted))
                ) && 
                (
                    this.FocusAppOnTimeEntryStopped == input.FocusAppOnTimeEntryStopped ||
                    (this.FocusAppOnTimeEntryStopped != null &&
                    this.FocusAppOnTimeEntryStopped.Equals(input.FocusAppOnTimeEntryStopped))
                ) && 
                (
                    this.HapticFeedbackEnabled == input.HapticFeedbackEnabled ||
                    (this.HapticFeedbackEnabled != null &&
                    this.HapticFeedbackEnabled.Equals(input.HapticFeedbackEnabled))
                ) && 
                (
                    this.HideKeyboardShortcut == input.HideKeyboardShortcut ||
                    (this.HideKeyboardShortcut != null &&
                    this.HideKeyboardShortcut.Equals(input.HideKeyboardShortcut))
                ) && 
                (
                    this.IdleDetectionEnabled == input.IdleDetectionEnabled ||
                    (this.IdleDetectionEnabled != null &&
                    this.IdleDetectionEnabled.Equals(input.IdleDetectionEnabled))
                ) && 
                (
                    this.IdleDetectionIntervalInMinutes == input.IdleDetectionIntervalInMinutes ||
                    (this.IdleDetectionIntervalInMinutes != null &&
                    this.IdleDetectionIntervalInMinutes.Equals(input.IdleDetectionIntervalInMinutes))
                ) && 
                (
                    this.InactivityBehavior == input.InactivityBehavior ||
                    (this.InactivityBehavior != null &&
                    this.InactivityBehavior.Equals(input.InactivityBehavior))
                ) && 
                (
                    this.IsSummaryTotalViewVisible == input.IsSummaryTotalViewVisible ||
                    (this.IsSummaryTotalViewVisible != null &&
                    this.IsSummaryTotalViewVisible.Equals(input.IsSummaryTotalViewVisible))
                ) && 
                (
                    this.KeepMiniTimerOnTop == input.KeepMiniTimerOnTop ||
                    (this.KeepMiniTimerOnTop != null &&
                    this.KeepMiniTimerOnTop.Equals(input.KeepMiniTimerOnTop))
                ) && 
                (
                    this.KeepWindowOnTop == input.KeepWindowOnTop ||
                    (this.KeepWindowOnTop != null &&
                    this.KeepWindowOnTop.Equals(input.KeepWindowOnTop))
                ) && 
                (
                    this.KeyboardIncrementTimerPage == input.KeyboardIncrementTimerPage ||
                    (this.KeyboardIncrementTimerPage != null &&
                    this.KeyboardIncrementTimerPage.Equals(input.KeyboardIncrementTimerPage))
                ) && 
                (
                    this.KeyboardShortcutsEnabled == input.KeyboardShortcutsEnabled ||
                    (this.KeyboardShortcutsEnabled != null &&
                    this.KeyboardShortcutsEnabled.Equals(input.KeyboardShortcutsEnabled))
                ) && 
                (
                    this.MacosAutoTrackingRules == input.MacosAutoTrackingRules ||
                    (this.MacosAutoTrackingRules != null &&
                    this.MacosAutoTrackingRules.Equals(input.MacosAutoTrackingRules))
                ) && 
                (
                    this.MacosShowHideTogglKeyboardShortcut == input.MacosShowHideTogglKeyboardShortcut ||
                    (this.MacosShowHideTogglKeyboardShortcut != null &&
                    this.MacosShowHideTogglKeyboardShortcut.Equals(input.MacosShowHideTogglKeyboardShortcut))
                ) && 
                (
                    this.MacosStopContinueKeyboardShortcut == input.MacosStopContinueKeyboardShortcut ||
                    (this.MacosStopContinueKeyboardShortcut != null &&
                    this.MacosStopContinueKeyboardShortcut.Equals(input.MacosStopContinueKeyboardShortcut))
                ) && 
                (
                    this.ManualEntryMode == input.ManualEntryMode ||
                    (this.ManualEntryMode != null &&
                    this.ManualEntryMode.Equals(input.ManualEntryMode))
                ) && 
                (
                    this.ManualMode == input.ManualMode ||
                    (this.ManualMode != null &&
                    this.ManualMode.Equals(input.ManualMode))
                ) && 
                (
                    this.ManualModeOverlaySeen == input.ManualModeOverlaySeen ||
                    (this.ManualModeOverlaySeen != null &&
                    this.ManualModeOverlaySeen.Equals(input.ManualModeOverlaySeen))
                ) && 
                (
                    this.ModifyOnStartTimeChange == input.ModifyOnStartTimeChange ||
                    (this.ModifyOnStartTimeChange != null &&
                    this.ModifyOnStartTimeChange.Equals(input.ModifyOnStartTimeChange))
                ) && 
                (
                    this.OfflineMode == input.OfflineMode ||
                    (this.OfflineMode != null &&
                    this.OfflineMode.Equals(input.OfflineMode))
                ) && 
                (
                    this.PgTimeZoneName == input.PgTimeZoneName ||
                    (this.PgTimeZoneName != null &&
                    this.PgTimeZoneName.Equals(input.PgTimeZoneName))
                ) && 
                (
                    this.PomodoroAutoStartBreak == input.PomodoroAutoStartBreak ||
                    (this.PomodoroAutoStartBreak != null &&
                    this.PomodoroAutoStartBreak.Equals(input.PomodoroAutoStartBreak))
                ) && 
                (
                    this.PomodoroAutoStartFocus == input.PomodoroAutoStartFocus ||
                    (this.PomodoroAutoStartFocus != null &&
                    this.PomodoroAutoStartFocus.Equals(input.PomodoroAutoStartFocus))
                ) && 
                (
                    this.PomodoroBreakIntervalInMinutes == input.PomodoroBreakIntervalInMinutes ||
                    (this.PomodoroBreakIntervalInMinutes != null &&
                    this.PomodoroBreakIntervalInMinutes.Equals(input.PomodoroBreakIntervalInMinutes))
                ) && 
                (
                    this.PomodoroBreakProjectId == input.PomodoroBreakProjectId ||
                    (this.PomodoroBreakProjectId != null &&
                    this.PomodoroBreakProjectId.Equals(input.PomodoroBreakProjectId))
                ) && 
                (
                    this.PomodoroBreakStartSoundEnabled == input.PomodoroBreakStartSoundEnabled ||
                    (this.PomodoroBreakStartSoundEnabled != null &&
                    this.PomodoroBreakStartSoundEnabled.Equals(input.PomodoroBreakStartSoundEnabled))
                ) && 
                (
                    this.PomodoroBreakTagId == input.PomodoroBreakTagId ||
                    (this.PomodoroBreakTagId != null &&
                    this.PomodoroBreakTagId.Equals(input.PomodoroBreakTagId))
                ) && 
                (
                    this.PomodoroCountdownTimer == input.PomodoroCountdownTimer ||
                    (this.PomodoroCountdownTimer != null &&
                    this.PomodoroCountdownTimer.Equals(input.PomodoroCountdownTimer))
                ) && 
                (
                    this.PomodoroEnabled == input.PomodoroEnabled ||
                    (this.PomodoroEnabled != null &&
                    this.PomodoroEnabled.Equals(input.PomodoroEnabled))
                ) && 
                (
                    this.PomodoroFocusIntervalInMinutes == input.PomodoroFocusIntervalInMinutes ||
                    (this.PomodoroFocusIntervalInMinutes != null &&
                    this.PomodoroFocusIntervalInMinutes.Equals(input.PomodoroFocusIntervalInMinutes))
                ) && 
                (
                    this.PomodoroFocusSound == input.PomodoroFocusSound ||
                    (this.PomodoroFocusSound != null &&
                    this.PomodoroFocusSound.Equals(input.PomodoroFocusSound))
                ) && 
                (
                    this.PomodoroGlobalSoundEnabled == input.PomodoroGlobalSoundEnabled ||
                    (this.PomodoroGlobalSoundEnabled != null &&
                    this.PomodoroGlobalSoundEnabled.Equals(input.PomodoroGlobalSoundEnabled))
                ) && 
                (
                    this.PomodoroIntervalEndSound == input.PomodoroIntervalEndSound ||
                    (this.PomodoroIntervalEndSound != null &&
                    this.PomodoroIntervalEndSound.Equals(input.PomodoroIntervalEndSound))
                ) && 
                (
                    this.PomodoroIntervalEndVolume == input.PomodoroIntervalEndVolume ||
                    (this.PomodoroIntervalEndVolume != null &&
                    this.PomodoroIntervalEndVolume.Equals(input.PomodoroIntervalEndVolume))
                ) && 
                (
                    this.PomodoroLongerBreakDurationInMinutes == input.PomodoroLongerBreakDurationInMinutes ||
                    (this.PomodoroLongerBreakDurationInMinutes != null &&
                    this.PomodoroLongerBreakDurationInMinutes.Equals(input.PomodoroLongerBreakDurationInMinutes))
                ) && 
                (
                    this.PomodoroPreventScreenLock == input.PomodoroPreventScreenLock ||
                    (this.PomodoroPreventScreenLock != null &&
                    this.PomodoroPreventScreenLock.Equals(input.PomodoroPreventScreenLock))
                ) && 
                (
                    this.PomodoroRoundsBeforeLongerBreak == input.PomodoroRoundsBeforeLongerBreak ||
                    (this.PomodoroRoundsBeforeLongerBreak != null &&
                    this.PomodoroRoundsBeforeLongerBreak.Equals(input.PomodoroRoundsBeforeLongerBreak))
                ) && 
                (
                    this.PomodoroSessionStartSoundEnabled == input.PomodoroSessionStartSoundEnabled ||
                    (this.PomodoroSessionStartSoundEnabled != null &&
                    this.PomodoroSessionStartSoundEnabled.Equals(input.PomodoroSessionStartSoundEnabled))
                ) && 
                (
                    this.PomodoroShowNotifications == input.PomodoroShowNotifications ||
                    (this.PomodoroShowNotifications != null &&
                    this.PomodoroShowNotifications.Equals(input.PomodoroShowNotifications))
                ) && 
                (
                    this.PomodoroStopTimerAtIntervalEnd == input.PomodoroStopTimerAtIntervalEnd ||
                    (this.PomodoroStopTimerAtIntervalEnd != null &&
                    this.PomodoroStopTimerAtIntervalEnd.Equals(input.PomodoroStopTimerAtIntervalEnd))
                ) && 
                (
                    this.PomodoroTrackBreaksAsTimeEntries == input.PomodoroTrackBreaksAsTimeEntries ||
                    (this.PomodoroTrackBreaksAsTimeEntries != null &&
                    this.PomodoroTrackBreaksAsTimeEntries.Equals(input.PomodoroTrackBreaksAsTimeEntries))
                ) && 
                (
                    this.ProjectDashboardActivityMode == input.ProjectDashboardActivityMode ||
                    (this.ProjectDashboardActivityMode != null &&
                    this.ProjectDashboardActivityMode.Equals(input.ProjectDashboardActivityMode))
                ) && 
                (
                    this.ProjectShortcutEnabled == input.ProjectShortcutEnabled ||
                    (this.ProjectShortcutEnabled != null &&
                    this.ProjectShortcutEnabled.Equals(input.ProjectShortcutEnabled))
                ) && 
                (
                    this.RecordTimeline == input.RecordTimeline ||
                    (this.RecordTimeline != null &&
                    this.RecordTimeline.Equals(input.RecordTimeline))
                ) && 
                (
                    this.RememberLastProject == input.RememberLastProject ||
                    (this.RememberLastProject != null &&
                    this.RememberLastProject.Equals(input.RememberLastProject))
                ) && 
                (
                    this.ReminderDays == input.ReminderDays ||
                    (this.ReminderDays != null &&
                    this.ReminderDays.Equals(input.ReminderDays))
                ) && 
                (
                    this.ReminderEnabled == input.ReminderEnabled ||
                    (this.ReminderEnabled != null &&
                    this.ReminderEnabled.Equals(input.ReminderEnabled))
                ) && 
                (
                    this.ReminderIntervalInMinutes == input.ReminderIntervalInMinutes ||
                    (this.ReminderIntervalInMinutes != null &&
                    this.ReminderIntervalInMinutes.Equals(input.ReminderIntervalInMinutes))
                ) && 
                (
                    this.ReminderPeriod == input.ReminderPeriod ||
                    (this.ReminderPeriod != null &&
                    this.ReminderPeriod.Equals(input.ReminderPeriod))
                ) && 
                (
                    this.ReminderSnoozingInMinutes == input.ReminderSnoozingInMinutes ||
                    (this.ReminderSnoozingInMinutes != null &&
                    this.ReminderSnoozingInMinutes.Equals(input.ReminderSnoozingInMinutes))
                ) && 
                (
                    this.ReportRounding == input.ReportRounding ||
                    (this.ReportRounding != null &&
                    this.ReportRounding.Equals(input.ReportRounding))
                ) && 
                (
                    this.ReportRoundingDirection == input.ReportRoundingDirection ||
                    (this.ReportRoundingDirection != null &&
                    this.ReportRoundingDirection.Equals(input.ReportRoundingDirection))
                ) && 
                (
                    this.ReportRoundingStepInMinutes == input.ReportRoundingStepInMinutes ||
                    (this.ReportRoundingStepInMinutes != null &&
                    this.ReportRoundingStepInMinutes.Equals(input.ReportRoundingStepInMinutes))
                ) && 
                (
                    this.ReportsHideWeekends == input.ReportsHideWeekends ||
                    (this.ReportsHideWeekends != null &&
                    this.ReportsHideWeekends.Equals(input.ReportsHideWeekends))
                ) && 
                (
                    this.RunningEntryWarning == input.RunningEntryWarning ||
                    (this.RunningEntryWarning != null &&
                    this.RunningEntryWarning.Equals(input.RunningEntryWarning))
                ) && 
                (
                    this.RunningTimerNotificationEnabled == input.RunningTimerNotificationEnabled ||
                    (this.RunningTimerNotificationEnabled != null &&
                    this.RunningTimerNotificationEnabled.Equals(input.RunningTimerNotificationEnabled))
                ) && 
                (
                    this.SeenFollowModal == input.SeenFollowModal ||
                    (this.SeenFollowModal != null &&
                    this.SeenFollowModal.Equals(input.SeenFollowModal))
                ) && 
                (
                    this.SeenFooterPopup == input.SeenFooterPopup ||
                    (this.SeenFooterPopup != null &&
                    this.SeenFooterPopup.Equals(input.SeenFooterPopup))
                ) && 
                (
                    this.SeenProjectDashboardOverlay == input.SeenProjectDashboardOverlay ||
                    (this.SeenProjectDashboardOverlay != null &&
                    this.SeenProjectDashboardOverlay.Equals(input.SeenProjectDashboardOverlay))
                ) && 
                (
                    this.SeenTogglButtonModal == input.SeenTogglButtonModal ||
                    (this.SeenTogglButtonModal != null &&
                    this.SeenTogglButtonModal.Equals(input.SeenTogglButtonModal))
                ) && 
                (
                    this.SendProductEmails == input.SendProductEmails ||
                    (this.SendProductEmails != null &&
                    this.SendProductEmails.Equals(input.SendProductEmails))
                ) && 
                (
                    this.SendTimerNotifications == input.SendTimerNotifications ||
                    (this.SendTimerNotifications != null &&
                    this.SendTimerNotifications.Equals(input.SendTimerNotifications))
                ) && 
                (
                    this.SendWeeklyReport == input.SendWeeklyReport ||
                    (this.SendWeeklyReport != null &&
                    this.SendWeeklyReport.Equals(input.SendWeeklyReport))
                ) && 
                (
                    this.ShowTimeInTitle == input.ShowTimeInTitle ||
                    (this.ShowTimeInTitle != null &&
                    this.ShowTimeInTitle.Equals(input.ShowTimeInTitle))
                ) && 
                (
                    this.ShowAllEntries == input.ShowAllEntries ||
                    (this.ShowAllEntries != null &&
                    this.ShowAllEntries.Equals(input.ShowAllEntries))
                ) && 
                (
                    this.ShowChangelog == input.ShowChangelog ||
                    (this.ShowChangelog != null &&
                    this.ShowChangelog.Equals(input.ShowChangelog))
                ) && 
                (
                    this.ShowDescriptionInMenuBar == input.ShowDescriptionInMenuBar ||
                    (this.ShowDescriptionInMenuBar != null &&
                    this.ShowDescriptionInMenuBar.Equals(input.ShowDescriptionInMenuBar))
                ) && 
                (
                    this.ShowDockIcon == input.ShowDockIcon ||
                    (this.ShowDockIcon != null &&
                    this.ShowDockIcon.Equals(input.ShowDockIcon))
                ) && 
                (
                    this.ShowEventsInCalendar == input.ShowEventsInCalendar ||
                    (this.ShowEventsInCalendar != null &&
                    this.ShowEventsInCalendar.Equals(input.ShowEventsInCalendar))
                ) && 
                (
                    this.ShowProjectInMenuBar == input.ShowProjectInMenuBar ||
                    (this.ShowProjectInMenuBar != null &&
                    this.ShowProjectInMenuBar.Equals(input.ShowProjectInMenuBar))
                ) && 
                (
                    this.ShowQrScanner == input.ShowQrScanner ||
                    (this.ShowQrScanner != null &&
                    this.ShowQrScanner.Equals(input.ShowQrScanner))
                ) && 
                (
                    this.ShowSecondsInMenuBar == input.ShowSecondsInMenuBar ||
                    (this.ShowSecondsInMenuBar != null &&
                    this.ShowSecondsInMenuBar.Equals(input.ShowSecondsInMenuBar))
                ) && 
                (
                    this.ShowTimelineInDayView == input.ShowTimelineInDayView ||
                    (this.ShowTimelineInDayView != null &&
                    this.ShowTimelineInDayView.Equals(input.ShowTimelineInDayView))
                ) && 
                (
                    this.ShowTimerInMenuBar == input.ShowTimerInMenuBar ||
                    (this.ShowTimerInMenuBar != null &&
                    this.ShowTimerInMenuBar.Equals(input.ShowTimerInMenuBar))
                ) && 
                (
                    this.ShowTodayTotalInMenuBar == input.ShowTodayTotalInMenuBar ||
                    (this.ShowTodayTotalInMenuBar != null &&
                    this.ShowTodayTotalInMenuBar.Equals(input.ShowTodayTotalInMenuBar))
                ) && 
                (
                    this.ShowTotalBillableHours == input.ShowTotalBillableHours ||
                    (this.ShowTotalBillableHours != null &&
                    this.ShowTotalBillableHours.Equals(input.ShowTotalBillableHours))
                ) && 
                (
                    this.ShowWeekendOnTimerPage == input.ShowWeekendOnTimerPage ||
                    (this.ShowWeekendOnTimerPage != null &&
                    this.ShowWeekendOnTimerPage.Equals(input.ShowWeekendOnTimerPage))
                ) && 
                (
                    this.ShowWorkoutsInCalendar == input.ShowWorkoutsInCalendar ||
                    (this.ShowWorkoutsInCalendar != null &&
                    this.ShowWorkoutsInCalendar.Equals(input.ShowWorkoutsInCalendar))
                ) && 
                (
                    this.SleepBehaviour == input.SleepBehaviour ||
                    (this.SleepBehaviour != null &&
                    this.SleepBehaviour.Equals(input.SleepBehaviour))
                ) && 
                (
                    this.SmartAlertsOption == input.SmartAlertsOption ||
                    (this.SmartAlertsOption != null &&
                    this.SmartAlertsOption.Equals(input.SmartAlertsOption))
                ) && 
                (
                    this.SnowballReportRounding == input.SnowballReportRounding ||
                    (this.SnowballReportRounding != null &&
                    this.SnowballReportRounding.Equals(input.SnowballReportRounding))
                ) && 
                (
                    this.StackTimesOnManualModeAfter == input.StackTimesOnManualModeAfter ||
                    (this.StackTimesOnManualModeAfter != null &&
                    this.StackTimesOnManualModeAfter.Equals(input.StackTimesOnManualModeAfter))
                ) && 
                (
                    this.StartAutomatically == input.StartAutomatically ||
                    (this.StartAutomatically != null &&
                    this.StartAutomatically.Equals(input.StartAutomatically))
                ) && 
                (
                    this.StartShortcutMode == input.StartShortcutMode ||
                    (this.StartShortcutMode != null &&
                    this.StartShortcutMode.Equals(input.StartShortcutMode))
                ) && 
                (
                    this.StopAtSpecificTime == input.StopAtSpecificTime ||
                    (this.StopAtSpecificTime != null &&
                    this.StopAtSpecificTime.Equals(input.StopAtSpecificTime))
                ) && 
                (
                    this.StopAutomatically == input.StopAutomatically ||
                    (this.StopAutomatically != null &&
                    this.StopAutomatically.Equals(input.StopAutomatically))
                ) && 
                (
                    this.StopEntryOnShutdown == input.StopEntryOnShutdown ||
                    (this.StopEntryOnShutdown != null &&
                    this.StopEntryOnShutdown.Equals(input.StopEntryOnShutdown))
                ) && 
                (
                    this.StopSpecifiedTime == input.StopSpecifiedTime ||
                    (this.StopSpecifiedTime != null &&
                    this.StopSpecifiedTime.Equals(input.StopSpecifiedTime))
                ) && 
                (
                    this.StoppedTimerNotificationEnabled == input.StoppedTimerNotificationEnabled ||
                    (this.StoppedTimerNotificationEnabled != null &&
                    this.StoppedTimerNotificationEnabled.Equals(input.StoppedTimerNotificationEnabled))
                ) && 
                (
                    this.SuggestionsEnabled == input.SuggestionsEnabled ||
                    (this.SuggestionsEnabled != null &&
                    this.SuggestionsEnabled.Equals(input.SuggestionsEnabled))
                ) && 
                (
                    this.SummaryReportAmounts == input.SummaryReportAmounts ||
                    (this.SummaryReportAmounts != null &&
                    this.SummaryReportAmounts.Equals(input.SummaryReportAmounts))
                ) && 
                (
                    this.SummaryReportDistinctRates == input.SummaryReportDistinctRates ||
                    (this.SummaryReportDistinctRates != null &&
                    this.SummaryReportDistinctRates.Equals(input.SummaryReportDistinctRates))
                ) && 
                (
                    this.SummaryReportGrouping == input.SummaryReportGrouping ||
                    (this.SummaryReportGrouping != null &&
                    this.SummaryReportGrouping.Equals(input.SummaryReportGrouping))
                ) && 
                (
                    this.SummaryReportSortAsc == input.SummaryReportSortAsc ||
                    (this.SummaryReportSortAsc != null &&
                    this.SummaryReportSortAsc.Equals(input.SummaryReportSortAsc))
                ) && 
                (
                    this.SummaryReportSortField == input.SummaryReportSortField ||
                    (this.SummaryReportSortField != null &&
                    this.SummaryReportSortField.Equals(input.SummaryReportSortField))
                ) && 
                (
                    this.SummaryReportSubGrouping == input.SummaryReportSubGrouping ||
                    (this.SummaryReportSubGrouping != null &&
                    this.SummaryReportSubGrouping.Equals(input.SummaryReportSubGrouping))
                ) && 
                (
                    this.SummaryTotalMode == input.SummaryTotalMode ||
                    (this.SummaryTotalMode != null &&
                    this.SummaryTotalMode.Equals(input.SummaryTotalMode))
                ) && 
                (
                    this.TagsShortcutEnabled == input.TagsShortcutEnabled ||
                    (this.TagsShortcutEnabled != null &&
                    this.TagsShortcutEnabled.Equals(input.TagsShortcutEnabled))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                ) && 
                (
                    this.TimeEntryDisplayMode == input.TimeEntryDisplayMode ||
                    (this.TimeEntryDisplayMode != null &&
                    this.TimeEntryDisplayMode.Equals(input.TimeEntryDisplayMode))
                ) && 
                (
                    this.TimeEntryGhostSuggestionsEnabled == input.TimeEntryGhostSuggestionsEnabled ||
                    (this.TimeEntryGhostSuggestionsEnabled != null &&
                    this.TimeEntryGhostSuggestionsEnabled.Equals(input.TimeEntryGhostSuggestionsEnabled))
                ) && 
                (
                    this.TimeEntryInvitationsNotificationEnabled == input.TimeEntryInvitationsNotificationEnabled ||
                    (this.TimeEntryInvitationsNotificationEnabled != null &&
                    this.TimeEntryInvitationsNotificationEnabled.Equals(input.TimeEntryInvitationsNotificationEnabled))
                ) && 
                (
                    this.TimeEntryStartStopInputMode == input.TimeEntryStartStopInputMode ||
                    (this.TimeEntryStartStopInputMode != null &&
                    this.TimeEntryStartStopInputMode.Equals(input.TimeEntryStartStopInputMode))
                ) && 
                (
                    this.TimeofdayFormat == input.TimeofdayFormat ||
                    (this.TimeofdayFormat != null &&
                    this.TimeofdayFormat.Equals(input.TimeofdayFormat))
                ) && 
                (
                    this.TimerView == input.TimerView ||
                    (this.TimerView != null &&
                    this.TimerView.Equals(input.TimerView))
                ) && 
                (
                    this.TimerViewMobile == input.TimerViewMobile ||
                    (this.TimerViewMobile != null &&
                    this.TimerViewMobile.Equals(input.TimerViewMobile))
                ) && 
                (
                    this.ToSAcceptNeeded == input.ToSAcceptNeeded ||
                    (this.ToSAcceptNeeded != null &&
                    this.ToSAcceptNeeded.Equals(input.ToSAcceptNeeded))
                ) && 
                (
                    this.UseMiniTimer == input.UseMiniTimer ||
                    (this.UseMiniTimer != null &&
                    this.UseMiniTimer.Equals(input.UseMiniTimer))
                ) && 
                (
                    this.VisibleFooter == input.VisibleFooter ||
                    (this.VisibleFooter != null &&
                    this.VisibleFooter.Equals(input.VisibleFooter))
                ) && 
                (
                    this.WebTimeEntryStarted == input.WebTimeEntryStarted ||
                    (this.WebTimeEntryStarted != null &&
                    this.WebTimeEntryStarted.Equals(input.WebTimeEntryStarted))
                ) && 
                (
                    this.WebTimeEntryStopped == input.WebTimeEntryStopped ||
                    (this.WebTimeEntryStopped != null &&
                    this.WebTimeEntryStopped.Equals(input.WebTimeEntryStopped))
                ) && 
                (
                    this.WeeklyReportGrouping == input.WeeklyReportGrouping ||
                    (this.WeeklyReportGrouping != null &&
                    this.WeeklyReportGrouping.Equals(input.WeeklyReportGrouping))
                ) && 
                (
                    this.WeeklyReportValueToShow == input.WeeklyReportValueToShow ||
                    (this.WeeklyReportValueToShow != null &&
                    this.WeeklyReportValueToShow.Equals(input.WeeklyReportValueToShow))
                ) && 
                (
                    this.WindowsAutoTrackingRules == input.WindowsAutoTrackingRules ||
                    (this.WindowsAutoTrackingRules != null &&
                    this.WindowsAutoTrackingRules.Equals(input.WindowsAutoTrackingRules))
                ) && 
                (
                    this.WindowsShowHideTogglKeyboardShortcut == input.WindowsShowHideTogglKeyboardShortcut ||
                    (this.WindowsShowHideTogglKeyboardShortcut != null &&
                    this.WindowsShowHideTogglKeyboardShortcut.Equals(input.WindowsShowHideTogglKeyboardShortcut))
                ) && 
                (
                    this.WindowsStopContinueKeyboardShortcut == input.WindowsStopContinueKeyboardShortcut ||
                    (this.WindowsStopContinueKeyboardShortcut != null &&
                    this.WindowsStopContinueKeyboardShortcut.Equals(input.WindowsStopContinueKeyboardShortcut))
                ) && 
                (
                    this.WindowsStopStartKeyboardShortcut == input.WindowsStopStartKeyboardShortcut ||
                    (this.WindowsStopStartKeyboardShortcut != null &&
                    this.WindowsStopStartKeyboardShortcut.Equals(input.WindowsStopStartKeyboardShortcut))
                ) && 
                (
                    this.WindowsTheme == input.WindowsTheme ||
                    (this.WindowsTheme != null &&
                    this.WindowsTheme.Equals(input.WindowsTheme))
                ) && 
                (
                    this.WorkoutDefaultProjectId == input.WorkoutDefaultProjectId ||
                    (this.WorkoutDefaultProjectId != null &&
                    this.WorkoutDefaultProjectId.Equals(input.WorkoutDefaultProjectId))
                ) && 
                (
                    this.WorkoutDefaultTagId == input.WorkoutDefaultTagId ||
                    (this.WorkoutDefaultTagId != null &&
                    this.WorkoutDefaultTagId.Equals(input.WorkoutDefaultTagId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityTimelineDisplayActivity != null)
                    hashCode = hashCode * 59 + this.ActivityTimelineDisplayActivity.GetHashCode();
                if (this.ActivityTimelineGroupingInterval != null)
                    hashCode = hashCode * 59 + this.ActivityTimelineGroupingInterval.GetHashCode();
                if (this.ActivityTimelineGroupingMethod != null)
                    hashCode = hashCode * 59 + this.ActivityTimelineGroupingMethod.GetHashCode();
                if (this.ActivityTimelineRecordingLevel != null)
                    hashCode = hashCode * 59 + this.ActivityTimelineRecordingLevel.GetHashCode();
                if (this.ActivityTimelineSyncEvents != null)
                    hashCode = hashCode * 59 + this.ActivityTimelineSyncEvents.GetHashCode();
                if (this.AlphaFeatures != null)
                    hashCode = hashCode * 59 + this.AlphaFeatures.GetHashCode();
                if (this.AutomaticTagging != null)
                    hashCode = hashCode * 59 + this.AutomaticTagging.GetHashCode();
                if (this.AutotrackingEnabled != null)
                    hashCode = hashCode * 59 + this.AutotrackingEnabled.GetHashCode();
                if (this.BeginningOfWeek != null)
                    hashCode = hashCode * 59 + this.BeginningOfWeek.GetHashCode();
                if (this.CalendarSnapDuration != null)
                    hashCode = hashCode * 59 + this.CalendarSnapDuration.GetHashCode();
                if (this.CalendarSnapInitialLocation != null)
                    hashCode = hashCode * 59 + this.CalendarSnapInitialLocation.GetHashCode();
                if (this.CalendarVisibleHoursEnd != null)
                    hashCode = hashCode * 59 + this.CalendarVisibleHoursEnd.GetHashCode();
                if (this.CalendarVisibleHoursStart != null)
                    hashCode = hashCode * 59 + this.CalendarVisibleHoursStart.GetHashCode();
                if (this.CalendarZoomLevel != null)
                    hashCode = hashCode * 59 + this.CalendarZoomLevel.GetHashCode();
                if (this.CellSwipeActionsEnabled != null)
                    hashCode = hashCode * 59 + this.CellSwipeActionsEnabled.GetHashCode();
                if (this.ChartsViewType != null)
                    hashCode = hashCode * 59 + this.ChartsViewType.GetHashCode();
                if (this.CollapseDetailedReportEntries != null)
                    hashCode = hashCode * 59 + this.CollapseDetailedReportEntries.GetHashCode();
                if (this.CollapseTimeEntries != null)
                    hashCode = hashCode * 59 + this.CollapseTimeEntries.GetHashCode();
                if (this.DashboardsViewType != null)
                    hashCode = hashCode * 59 + this.DashboardsViewType.GetHashCode();
                if (this.DateFormat != null)
                    hashCode = hashCode * 59 + this.DateFormat.GetHashCode();
                if (this.DecimalSeparator != null)
                    hashCode = hashCode * 59 + this.DecimalSeparator.GetHashCode();
                if (this.DefaultProjectId != null)
                    hashCode = hashCode * 59 + this.DefaultProjectId.GetHashCode();
                if (this.DefaultTaskId != null)
                    hashCode = hashCode * 59 + this.DefaultTaskId.GetHashCode();
                if (this.DisplayDensity != null)
                    hashCode = hashCode * 59 + this.DisplayDensity.GetHashCode();
                if (this.DistinctRates != null)
                    hashCode = hashCode * 59 + this.DistinctRates.GetHashCode();
                if (this.DurationFormat != null)
                    hashCode = hashCode * 59 + this.DurationFormat.GetHashCode();
                if (this.DurationFormatOnTimerDurationField != null)
                    hashCode = hashCode * 59 + this.DurationFormatOnTimerDurationField.GetHashCode();
                if (this.EditPopupIntegrationTimer != null)
                    hashCode = hashCode * 59 + this.EditPopupIntegrationTimer.GetHashCode();
                if (this.ExtensionSendErrorReports != null)
                    hashCode = hashCode * 59 + this.ExtensionSendErrorReports.GetHashCode();
                if (this.ExtensionSendUsageStatistics != null)
                    hashCode = hashCode * 59 + this.ExtensionSendUsageStatistics.GetHashCode();
                if (this.FirstSeenBusinessPromo != null)
                    hashCode = hashCode * 59 + this.FirstSeenBusinessPromo.GetHashCode();
                if (this.FocusAppOnTimeEntryStarted != null)
                    hashCode = hashCode * 59 + this.FocusAppOnTimeEntryStarted.GetHashCode();
                if (this.FocusAppOnTimeEntryStopped != null)
                    hashCode = hashCode * 59 + this.FocusAppOnTimeEntryStopped.GetHashCode();
                if (this.HapticFeedbackEnabled != null)
                    hashCode = hashCode * 59 + this.HapticFeedbackEnabled.GetHashCode();
                if (this.HideKeyboardShortcut != null)
                    hashCode = hashCode * 59 + this.HideKeyboardShortcut.GetHashCode();
                if (this.IdleDetectionEnabled != null)
                    hashCode = hashCode * 59 + this.IdleDetectionEnabled.GetHashCode();
                if (this.IdleDetectionIntervalInMinutes != null)
                    hashCode = hashCode * 59 + this.IdleDetectionIntervalInMinutes.GetHashCode();
                if (this.InactivityBehavior != null)
                    hashCode = hashCode * 59 + this.InactivityBehavior.GetHashCode();
                if (this.IsSummaryTotalViewVisible != null)
                    hashCode = hashCode * 59 + this.IsSummaryTotalViewVisible.GetHashCode();
                if (this.KeepMiniTimerOnTop != null)
                    hashCode = hashCode * 59 + this.KeepMiniTimerOnTop.GetHashCode();
                if (this.KeepWindowOnTop != null)
                    hashCode = hashCode * 59 + this.KeepWindowOnTop.GetHashCode();
                if (this.KeyboardIncrementTimerPage != null)
                    hashCode = hashCode * 59 + this.KeyboardIncrementTimerPage.GetHashCode();
                if (this.KeyboardShortcutsEnabled != null)
                    hashCode = hashCode * 59 + this.KeyboardShortcutsEnabled.GetHashCode();
                if (this.MacosAutoTrackingRules != null)
                    hashCode = hashCode * 59 + this.MacosAutoTrackingRules.GetHashCode();
                if (this.MacosShowHideTogglKeyboardShortcut != null)
                    hashCode = hashCode * 59 + this.MacosShowHideTogglKeyboardShortcut.GetHashCode();
                if (this.MacosStopContinueKeyboardShortcut != null)
                    hashCode = hashCode * 59 + this.MacosStopContinueKeyboardShortcut.GetHashCode();
                if (this.ManualEntryMode != null)
                    hashCode = hashCode * 59 + this.ManualEntryMode.GetHashCode();
                if (this.ManualMode != null)
                    hashCode = hashCode * 59 + this.ManualMode.GetHashCode();
                if (this.ManualModeOverlaySeen != null)
                    hashCode = hashCode * 59 + this.ManualModeOverlaySeen.GetHashCode();
                if (this.ModifyOnStartTimeChange != null)
                    hashCode = hashCode * 59 + this.ModifyOnStartTimeChange.GetHashCode();
                if (this.OfflineMode != null)
                    hashCode = hashCode * 59 + this.OfflineMode.GetHashCode();
                if (this.PgTimeZoneName != null)
                    hashCode = hashCode * 59 + this.PgTimeZoneName.GetHashCode();
                if (this.PomodoroAutoStartBreak != null)
                    hashCode = hashCode * 59 + this.PomodoroAutoStartBreak.GetHashCode();
                if (this.PomodoroAutoStartFocus != null)
                    hashCode = hashCode * 59 + this.PomodoroAutoStartFocus.GetHashCode();
                if (this.PomodoroBreakIntervalInMinutes != null)
                    hashCode = hashCode * 59 + this.PomodoroBreakIntervalInMinutes.GetHashCode();
                if (this.PomodoroBreakProjectId != null)
                    hashCode = hashCode * 59 + this.PomodoroBreakProjectId.GetHashCode();
                if (this.PomodoroBreakStartSoundEnabled != null)
                    hashCode = hashCode * 59 + this.PomodoroBreakStartSoundEnabled.GetHashCode();
                if (this.PomodoroBreakTagId != null)
                    hashCode = hashCode * 59 + this.PomodoroBreakTagId.GetHashCode();
                if (this.PomodoroCountdownTimer != null)
                    hashCode = hashCode * 59 + this.PomodoroCountdownTimer.GetHashCode();
                if (this.PomodoroEnabled != null)
                    hashCode = hashCode * 59 + this.PomodoroEnabled.GetHashCode();
                if (this.PomodoroFocusIntervalInMinutes != null)
                    hashCode = hashCode * 59 + this.PomodoroFocusIntervalInMinutes.GetHashCode();
                if (this.PomodoroFocusSound != null)
                    hashCode = hashCode * 59 + this.PomodoroFocusSound.GetHashCode();
                if (this.PomodoroGlobalSoundEnabled != null)
                    hashCode = hashCode * 59 + this.PomodoroGlobalSoundEnabled.GetHashCode();
                if (this.PomodoroIntervalEndSound != null)
                    hashCode = hashCode * 59 + this.PomodoroIntervalEndSound.GetHashCode();
                if (this.PomodoroIntervalEndVolume != null)
                    hashCode = hashCode * 59 + this.PomodoroIntervalEndVolume.GetHashCode();
                if (this.PomodoroLongerBreakDurationInMinutes != null)
                    hashCode = hashCode * 59 + this.PomodoroLongerBreakDurationInMinutes.GetHashCode();
                if (this.PomodoroPreventScreenLock != null)
                    hashCode = hashCode * 59 + this.PomodoroPreventScreenLock.GetHashCode();
                if (this.PomodoroRoundsBeforeLongerBreak != null)
                    hashCode = hashCode * 59 + this.PomodoroRoundsBeforeLongerBreak.GetHashCode();
                if (this.PomodoroSessionStartSoundEnabled != null)
                    hashCode = hashCode * 59 + this.PomodoroSessionStartSoundEnabled.GetHashCode();
                if (this.PomodoroShowNotifications != null)
                    hashCode = hashCode * 59 + this.PomodoroShowNotifications.GetHashCode();
                if (this.PomodoroStopTimerAtIntervalEnd != null)
                    hashCode = hashCode * 59 + this.PomodoroStopTimerAtIntervalEnd.GetHashCode();
                if (this.PomodoroTrackBreaksAsTimeEntries != null)
                    hashCode = hashCode * 59 + this.PomodoroTrackBreaksAsTimeEntries.GetHashCode();
                if (this.ProjectDashboardActivityMode != null)
                    hashCode = hashCode * 59 + this.ProjectDashboardActivityMode.GetHashCode();
                if (this.ProjectShortcutEnabled != null)
                    hashCode = hashCode * 59 + this.ProjectShortcutEnabled.GetHashCode();
                if (this.RecordTimeline != null)
                    hashCode = hashCode * 59 + this.RecordTimeline.GetHashCode();
                if (this.RememberLastProject != null)
                    hashCode = hashCode * 59 + this.RememberLastProject.GetHashCode();
                if (this.ReminderDays != null)
                    hashCode = hashCode * 59 + this.ReminderDays.GetHashCode();
                if (this.ReminderEnabled != null)
                    hashCode = hashCode * 59 + this.ReminderEnabled.GetHashCode();
                if (this.ReminderIntervalInMinutes != null)
                    hashCode = hashCode * 59 + this.ReminderIntervalInMinutes.GetHashCode();
                if (this.ReminderPeriod != null)
                    hashCode = hashCode * 59 + this.ReminderPeriod.GetHashCode();
                if (this.ReminderSnoozingInMinutes != null)
                    hashCode = hashCode * 59 + this.ReminderSnoozingInMinutes.GetHashCode();
                if (this.ReportRounding != null)
                    hashCode = hashCode * 59 + this.ReportRounding.GetHashCode();
                if (this.ReportRoundingDirection != null)
                    hashCode = hashCode * 59 + this.ReportRoundingDirection.GetHashCode();
                if (this.ReportRoundingStepInMinutes != null)
                    hashCode = hashCode * 59 + this.ReportRoundingStepInMinutes.GetHashCode();
                if (this.ReportsHideWeekends != null)
                    hashCode = hashCode * 59 + this.ReportsHideWeekends.GetHashCode();
                if (this.RunningEntryWarning != null)
                    hashCode = hashCode * 59 + this.RunningEntryWarning.GetHashCode();
                if (this.RunningTimerNotificationEnabled != null)
                    hashCode = hashCode * 59 + this.RunningTimerNotificationEnabled.GetHashCode();
                if (this.SeenFollowModal != null)
                    hashCode = hashCode * 59 + this.SeenFollowModal.GetHashCode();
                if (this.SeenFooterPopup != null)
                    hashCode = hashCode * 59 + this.SeenFooterPopup.GetHashCode();
                if (this.SeenProjectDashboardOverlay != null)
                    hashCode = hashCode * 59 + this.SeenProjectDashboardOverlay.GetHashCode();
                if (this.SeenTogglButtonModal != null)
                    hashCode = hashCode * 59 + this.SeenTogglButtonModal.GetHashCode();
                if (this.SendProductEmails != null)
                    hashCode = hashCode * 59 + this.SendProductEmails.GetHashCode();
                if (this.SendTimerNotifications != null)
                    hashCode = hashCode * 59 + this.SendTimerNotifications.GetHashCode();
                if (this.SendWeeklyReport != null)
                    hashCode = hashCode * 59 + this.SendWeeklyReport.GetHashCode();
                if (this.ShowTimeInTitle != null)
                    hashCode = hashCode * 59 + this.ShowTimeInTitle.GetHashCode();
                if (this.ShowAllEntries != null)
                    hashCode = hashCode * 59 + this.ShowAllEntries.GetHashCode();
                if (this.ShowChangelog != null)
                    hashCode = hashCode * 59 + this.ShowChangelog.GetHashCode();
                if (this.ShowDescriptionInMenuBar != null)
                    hashCode = hashCode * 59 + this.ShowDescriptionInMenuBar.GetHashCode();
                if (this.ShowDockIcon != null)
                    hashCode = hashCode * 59 + this.ShowDockIcon.GetHashCode();
                if (this.ShowEventsInCalendar != null)
                    hashCode = hashCode * 59 + this.ShowEventsInCalendar.GetHashCode();
                if (this.ShowProjectInMenuBar != null)
                    hashCode = hashCode * 59 + this.ShowProjectInMenuBar.GetHashCode();
                if (this.ShowQrScanner != null)
                    hashCode = hashCode * 59 + this.ShowQrScanner.GetHashCode();
                if (this.ShowSecondsInMenuBar != null)
                    hashCode = hashCode * 59 + this.ShowSecondsInMenuBar.GetHashCode();
                if (this.ShowTimelineInDayView != null)
                    hashCode = hashCode * 59 + this.ShowTimelineInDayView.GetHashCode();
                if (this.ShowTimerInMenuBar != null)
                    hashCode = hashCode * 59 + this.ShowTimerInMenuBar.GetHashCode();
                if (this.ShowTodayTotalInMenuBar != null)
                    hashCode = hashCode * 59 + this.ShowTodayTotalInMenuBar.GetHashCode();
                if (this.ShowTotalBillableHours != null)
                    hashCode = hashCode * 59 + this.ShowTotalBillableHours.GetHashCode();
                if (this.ShowWeekendOnTimerPage != null)
                    hashCode = hashCode * 59 + this.ShowWeekendOnTimerPage.GetHashCode();
                if (this.ShowWorkoutsInCalendar != null)
                    hashCode = hashCode * 59 + this.ShowWorkoutsInCalendar.GetHashCode();
                if (this.SleepBehaviour != null)
                    hashCode = hashCode * 59 + this.SleepBehaviour.GetHashCode();
                if (this.SmartAlertsOption != null)
                    hashCode = hashCode * 59 + this.SmartAlertsOption.GetHashCode();
                if (this.SnowballReportRounding != null)
                    hashCode = hashCode * 59 + this.SnowballReportRounding.GetHashCode();
                if (this.StackTimesOnManualModeAfter != null)
                    hashCode = hashCode * 59 + this.StackTimesOnManualModeAfter.GetHashCode();
                if (this.StartAutomatically != null)
                    hashCode = hashCode * 59 + this.StartAutomatically.GetHashCode();
                if (this.StartShortcutMode != null)
                    hashCode = hashCode * 59 + this.StartShortcutMode.GetHashCode();
                if (this.StopAtSpecificTime != null)
                    hashCode = hashCode * 59 + this.StopAtSpecificTime.GetHashCode();
                if (this.StopAutomatically != null)
                    hashCode = hashCode * 59 + this.StopAutomatically.GetHashCode();
                if (this.StopEntryOnShutdown != null)
                    hashCode = hashCode * 59 + this.StopEntryOnShutdown.GetHashCode();
                if (this.StopSpecifiedTime != null)
                    hashCode = hashCode * 59 + this.StopSpecifiedTime.GetHashCode();
                if (this.StoppedTimerNotificationEnabled != null)
                    hashCode = hashCode * 59 + this.StoppedTimerNotificationEnabled.GetHashCode();
                if (this.SuggestionsEnabled != null)
                    hashCode = hashCode * 59 + this.SuggestionsEnabled.GetHashCode();
                if (this.SummaryReportAmounts != null)
                    hashCode = hashCode * 59 + this.SummaryReportAmounts.GetHashCode();
                if (this.SummaryReportDistinctRates != null)
                    hashCode = hashCode * 59 + this.SummaryReportDistinctRates.GetHashCode();
                if (this.SummaryReportGrouping != null)
                    hashCode = hashCode * 59 + this.SummaryReportGrouping.GetHashCode();
                if (this.SummaryReportSortAsc != null)
                    hashCode = hashCode * 59 + this.SummaryReportSortAsc.GetHashCode();
                if (this.SummaryReportSortField != null)
                    hashCode = hashCode * 59 + this.SummaryReportSortField.GetHashCode();
                if (this.SummaryReportSubGrouping != null)
                    hashCode = hashCode * 59 + this.SummaryReportSubGrouping.GetHashCode();
                if (this.SummaryTotalMode != null)
                    hashCode = hashCode * 59 + this.SummaryTotalMode.GetHashCode();
                if (this.TagsShortcutEnabled != null)
                    hashCode = hashCode * 59 + this.TagsShortcutEnabled.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                if (this.TimeEntryDisplayMode != null)
                    hashCode = hashCode * 59 + this.TimeEntryDisplayMode.GetHashCode();
                if (this.TimeEntryGhostSuggestionsEnabled != null)
                    hashCode = hashCode * 59 + this.TimeEntryGhostSuggestionsEnabled.GetHashCode();
                if (this.TimeEntryInvitationsNotificationEnabled != null)
                    hashCode = hashCode * 59 + this.TimeEntryInvitationsNotificationEnabled.GetHashCode();
                if (this.TimeEntryStartStopInputMode != null)
                    hashCode = hashCode * 59 + this.TimeEntryStartStopInputMode.GetHashCode();
                if (this.TimeofdayFormat != null)
                    hashCode = hashCode * 59 + this.TimeofdayFormat.GetHashCode();
                if (this.TimerView != null)
                    hashCode = hashCode * 59 + this.TimerView.GetHashCode();
                if (this.TimerViewMobile != null)
                    hashCode = hashCode * 59 + this.TimerViewMobile.GetHashCode();
                if (this.ToSAcceptNeeded != null)
                    hashCode = hashCode * 59 + this.ToSAcceptNeeded.GetHashCode();
                if (this.UseMiniTimer != null)
                    hashCode = hashCode * 59 + this.UseMiniTimer.GetHashCode();
                if (this.VisibleFooter != null)
                    hashCode = hashCode * 59 + this.VisibleFooter.GetHashCode();
                if (this.WebTimeEntryStarted != null)
                    hashCode = hashCode * 59 + this.WebTimeEntryStarted.GetHashCode();
                if (this.WebTimeEntryStopped != null)
                    hashCode = hashCode * 59 + this.WebTimeEntryStopped.GetHashCode();
                if (this.WeeklyReportGrouping != null)
                    hashCode = hashCode * 59 + this.WeeklyReportGrouping.GetHashCode();
                if (this.WeeklyReportValueToShow != null)
                    hashCode = hashCode * 59 + this.WeeklyReportValueToShow.GetHashCode();
                if (this.WindowsAutoTrackingRules != null)
                    hashCode = hashCode * 59 + this.WindowsAutoTrackingRules.GetHashCode();
                if (this.WindowsShowHideTogglKeyboardShortcut != null)
                    hashCode = hashCode * 59 + this.WindowsShowHideTogglKeyboardShortcut.GetHashCode();
                if (this.WindowsStopContinueKeyboardShortcut != null)
                    hashCode = hashCode * 59 + this.WindowsStopContinueKeyboardShortcut.GetHashCode();
                if (this.WindowsStopStartKeyboardShortcut != null)
                    hashCode = hashCode * 59 + this.WindowsStopStartKeyboardShortcut.GetHashCode();
                if (this.WindowsTheme != null)
                    hashCode = hashCode * 59 + this.WindowsTheme.GetHashCode();
                if (this.WorkoutDefaultProjectId != null)
                    hashCode = hashCode * 59 + this.WorkoutDefaultProjectId.GetHashCode();
                if (this.WorkoutDefaultTagId != null)
                    hashCode = hashCode * 59 + this.WorkoutDefaultTagId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
