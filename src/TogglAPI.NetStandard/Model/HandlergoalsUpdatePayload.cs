/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// HandlergoalsUpdatePayload
    /// </summary>
    [DataContract]
    public partial class HandlergoalsUpdatePayload :  IEquatable<HandlergoalsUpdatePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HandlergoalsUpdatePayload" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="comparison">comparison.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="icon">icon.</param>
        /// <param name="lastNotifiedAt">lastNotifiedAt.</param>
        /// <param name="name">name.</param>
        /// <param name="targetSeconds">targetSeconds.</param>
        public HandlergoalsUpdatePayload(bool? active = default(bool?), string comparison = default(string), string endDate = default(string), int? icon = default(int?), string lastNotifiedAt = default(string), string name = default(string), int? targetSeconds = default(int?))
        {
            this.Active = active;
            this.Comparison = comparison;
            this.EndDate = endDate;
            this.Icon = icon;
            this.LastNotifiedAt = lastNotifiedAt;
            this.Name = name;
            this.TargetSeconds = targetSeconds;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Comparison
        /// </summary>
        [DataMember(Name="comparison", EmitDefaultValue=false)]
        public string Comparison { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public int? Icon { get; set; }

        /// <summary>
        /// Gets or Sets LastNotifiedAt
        /// </summary>
        [DataMember(Name="last_notified_at", EmitDefaultValue=false)]
        public string LastNotifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TargetSeconds
        /// </summary>
        [DataMember(Name="target_seconds", EmitDefaultValue=false)]
        public int? TargetSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HandlergoalsUpdatePayload {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Comparison: ").Append(Comparison).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  LastNotifiedAt: ").Append(LastNotifiedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TargetSeconds: ").Append(TargetSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HandlergoalsUpdatePayload);
        }

        /// <summary>
        /// Returns true if HandlergoalsUpdatePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of HandlergoalsUpdatePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HandlergoalsUpdatePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Comparison == input.Comparison ||
                    (this.Comparison != null &&
                    this.Comparison.Equals(input.Comparison))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.LastNotifiedAt == input.LastNotifiedAt ||
                    (this.LastNotifiedAt != null &&
                    this.LastNotifiedAt.Equals(input.LastNotifiedAt))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TargetSeconds == input.TargetSeconds ||
                    (this.TargetSeconds != null &&
                    this.TargetSeconds.Equals(input.TargetSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Comparison != null)
                    hashCode = hashCode * 59 + this.Comparison.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.LastNotifiedAt != null)
                    hashCode = hashCode * 59 + this.LastNotifiedAt.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TargetSeconds != null)
                    hashCode = hashCode * 59 + this.TargetSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
