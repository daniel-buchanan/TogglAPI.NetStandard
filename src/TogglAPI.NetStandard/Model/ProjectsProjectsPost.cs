/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ProjectsProjectsPost
    /// </summary>
    [DataContract]
    public partial class ProjectsProjectsPost :  IEquatable<ProjectsProjectsPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsProjectsPost" /> class.
        /// </summary>
        /// <param name="clientIds">Client IDs, optional..</param>
        /// <param name="currency">Currency, optional, example \&quot;EUR\&quot;..</param>
        /// <param name="ids">Project IDs, optional..</param>
        /// <param name="isActive">Whether the wanted projects are archived, optional, default false..</param>
        /// <param name="isBillable">Whether the wanted projects are billable, optional, premium feature, default false..</param>
        /// <param name="isPrivate">Whether the wanted projects are private, optional, default false..</param>
        /// <param name="name">Project name, optional..</param>
        /// <param name="pageSize">PageSize is the number of records returned per page. If unset, the default value of 201 will be used..</param>
        /// <param name="start">Start is used for pagination, optional, default 0. The api will return the next projects page with id &gt;&#x3D; Start..</param>
        public ProjectsProjectsPost(List<long?> clientIds = default(List<long?>), string currency = default(string), List<long?> ids = default(List<long?>), bool? isActive = default(bool?), bool? isBillable = default(bool?), bool? isPrivate = default(bool?), string name = default(string), long? pageSize = default(long?), long? start = default(long?))
        {
            this.ClientIds = clientIds;
            this.Currency = currency;
            this.Ids = ids;
            this.IsActive = isActive;
            this.IsBillable = isBillable;
            this.IsPrivate = isPrivate;
            this.Name = name;
            this.PageSize = pageSize;
            this.Start = start;
        }
        
        /// <summary>
        /// Client IDs, optional.
        /// </summary>
        /// <value>Client IDs, optional.</value>
        [DataMember(Name="client_ids", EmitDefaultValue=false)]
        public List<long?> ClientIds { get; set; }

        /// <summary>
        /// Currency, optional, example \&quot;EUR\&quot;.
        /// </summary>
        /// <value>Currency, optional, example \&quot;EUR\&quot;.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Project IDs, optional.
        /// </summary>
        /// <value>Project IDs, optional.</value>
        [DataMember(Name="ids", EmitDefaultValue=false)]
        public List<long?> Ids { get; set; }

        /// <summary>
        /// Whether the wanted projects are archived, optional, default false.
        /// </summary>
        /// <value>Whether the wanted projects are archived, optional, default false.</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Whether the wanted projects are billable, optional, premium feature, default false.
        /// </summary>
        /// <value>Whether the wanted projects are billable, optional, premium feature, default false.</value>
        [DataMember(Name="is_billable", EmitDefaultValue=false)]
        public bool? IsBillable { get; set; }

        /// <summary>
        /// Whether the wanted projects are private, optional, default false.
        /// </summary>
        /// <value>Whether the wanted projects are private, optional, default false.</value>
        [DataMember(Name="is_private", EmitDefaultValue=false)]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Project name, optional.
        /// </summary>
        /// <value>Project name, optional.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// PageSize is the number of records returned per page. If unset, the default value of 201 will be used.
        /// </summary>
        /// <value>PageSize is the number of records returned per page. If unset, the default value of 201 will be used.</value>
        [DataMember(Name="page_size", EmitDefaultValue=false)]
        public long? PageSize { get; set; }

        /// <summary>
        /// Start is used for pagination, optional, default 0. The api will return the next projects page with id &gt;&#x3D; Start.
        /// </summary>
        /// <value>Start is used for pagination, optional, default 0. The api will return the next projects page with id &gt;&#x3D; Start.</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public long? Start { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectsProjectsPost {\n");
            sb.Append("  ClientIds: ").Append(ClientIds).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsBillable: ").Append(IsBillable).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectsProjectsPost);
        }

        /// <summary>
        /// Returns true if ProjectsProjectsPost instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectsProjectsPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectsProjectsPost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientIds == input.ClientIds ||
                    this.ClientIds != null &&
                    this.ClientIds.SequenceEqual(input.ClientIds)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsBillable == input.IsBillable ||
                    (this.IsBillable != null &&
                    this.IsBillable.Equals(input.IsBillable))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientIds != null)
                    hashCode = hashCode * 59 + this.ClientIds.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsBillable != null)
                    hashCode = hashCode * 59 + this.IsBillable.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
