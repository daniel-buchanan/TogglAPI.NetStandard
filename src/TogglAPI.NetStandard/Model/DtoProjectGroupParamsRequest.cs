/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// DtoProjectGroupParamsRequest
    /// </summary>
    [DataContract]
    public partial class DtoProjectGroupParamsRequest :  IEquatable<DtoProjectGroupParamsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoProjectGroupParamsRequest" /> class.
        /// </summary>
        /// <param name="groupIds">Group IDs, optional. At least Projects IDs or Group IDs should be informed..</param>
        /// <param name="projectIds">Project IDs, optional. At least Projects IDs or Group IDs should be informed..</param>
        /// <param name="startId">startId.</param>
        public DtoProjectGroupParamsRequest(List<int?> groupIds = default(List<int?>), List<int?> projectIds = default(List<int?>), int? startId = default(int?))
        {
            this.GroupIds = groupIds;
            this.ProjectIds = projectIds;
            this.StartId = startId;
        }
        
        /// <summary>
        /// Group IDs, optional. At least Projects IDs or Group IDs should be informed.
        /// </summary>
        /// <value>Group IDs, optional. At least Projects IDs or Group IDs should be informed.</value>
        [DataMember(Name="group_ids", EmitDefaultValue=false)]
        public List<int?> GroupIds { get; set; }

        /// <summary>
        /// Project IDs, optional. At least Projects IDs or Group IDs should be informed.
        /// </summary>
        /// <value>Project IDs, optional. At least Projects IDs or Group IDs should be informed.</value>
        [DataMember(Name="project_ids", EmitDefaultValue=false)]
        public List<int?> ProjectIds { get; set; }

        /// <summary>
        /// Gets or Sets StartId
        /// </summary>
        [DataMember(Name="start_id", EmitDefaultValue=false)]
        public int? StartId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DtoProjectGroupParamsRequest {\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  StartId: ").Append(StartId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DtoProjectGroupParamsRequest);
        }

        /// <summary>
        /// Returns true if DtoProjectGroupParamsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DtoProjectGroupParamsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DtoProjectGroupParamsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupIds == input.GroupIds ||
                    this.GroupIds != null &&
                    this.GroupIds.SequenceEqual(input.GroupIds)
                ) && 
                (
                    this.ProjectIds == input.ProjectIds ||
                    this.ProjectIds != null &&
                    this.ProjectIds.SequenceEqual(input.ProjectIds)
                ) && 
                (
                    this.StartId == input.StartId ||
                    (this.StartId != null &&
                    this.StartId.Equals(input.StartId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupIds != null)
                    hashCode = hashCode * 59 + this.GroupIds.GetHashCode();
                if (this.ProjectIds != null)
                    hashCode = hashCode * 59 + this.ProjectIds.GetHashCode();
                if (this.StartId != null)
                    hashCode = hashCode * 59 + this.StartId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
