/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// UsersProjectUsersSummaryRow
    /// </summary>
    [DataContract]
    public partial class UsersProjectUsersSummaryRow :  IEquatable<UsersProjectUsersSummaryRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersProjectUsersSummaryRow" /> class.
        /// </summary>
        /// <param name="billableSeconds">billableSeconds.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="trackedSeconds">trackedSeconds.</param>
        /// <param name="userId">userId.</param>
        public UsersProjectUsersSummaryRow(int? billableSeconds = default(int?), int? projectId = default(int?), int? trackedSeconds = default(int?), int? userId = default(int?))
        {
            this.BillableSeconds = billableSeconds;
            this.ProjectId = projectId;
            this.TrackedSeconds = trackedSeconds;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets BillableSeconds
        /// </summary>
        [DataMember(Name="billable_seconds", EmitDefaultValue=false)]
        public int? BillableSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets TrackedSeconds
        /// </summary>
        [DataMember(Name="tracked_seconds", EmitDefaultValue=false)]
        public int? TrackedSeconds { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersProjectUsersSummaryRow {\n");
            sb.Append("  BillableSeconds: ").Append(BillableSeconds).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TrackedSeconds: ").Append(TrackedSeconds).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersProjectUsersSummaryRow);
        }

        /// <summary>
        /// Returns true if UsersProjectUsersSummaryRow instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersProjectUsersSummaryRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersProjectUsersSummaryRow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillableSeconds == input.BillableSeconds ||
                    (this.BillableSeconds != null &&
                    this.BillableSeconds.Equals(input.BillableSeconds))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.TrackedSeconds == input.TrackedSeconds ||
                    (this.TrackedSeconds != null &&
                    this.TrackedSeconds.Equals(input.TrackedSeconds))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillableSeconds != null)
                    hashCode = hashCode * 59 + this.BillableSeconds.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.TrackedSeconds != null)
                    hashCode = hashCode * 59 + this.TrackedSeconds.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
