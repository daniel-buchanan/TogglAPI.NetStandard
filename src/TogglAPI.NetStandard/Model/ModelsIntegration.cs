/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsIntegration
    /// </summary>
    [DataContract]
    public partial class ModelsIntegration :  IEquatable<ModelsIntegration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsIntegration" /> class.
        /// </summary>
        /// <param name="calendarIntegrationId">calendarIntegrationId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="email">email.</param>
        /// <param name="errorStatus">errorStatus.</param>
        /// <param name="provider">provider.</param>
        public ModelsIntegration(long? calendarIntegrationId = default(long?), string createdAt = default(string), string email = default(string), string errorStatus = default(string), string provider = default(string))
        {
            this.CalendarIntegrationId = calendarIntegrationId;
            this.CreatedAt = createdAt;
            this.Email = email;
            this.ErrorStatus = errorStatus;
            this.Provider = provider;
        }
        
        /// <summary>
        /// Gets or Sets CalendarIntegrationId
        /// </summary>
        [DataMember(Name="calendar_integration_id", EmitDefaultValue=false)]
        public long? CalendarIntegrationId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets ErrorStatus
        /// </summary>
        [DataMember(Name="error_status", EmitDefaultValue=false)]
        public string ErrorStatus { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsIntegration {\n");
            sb.Append("  CalendarIntegrationId: ").Append(CalendarIntegrationId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ErrorStatus: ").Append(ErrorStatus).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsIntegration);
        }

        /// <summary>
        /// Returns true if ModelsIntegration instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsIntegration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsIntegration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CalendarIntegrationId == input.CalendarIntegrationId ||
                    (this.CalendarIntegrationId != null &&
                    this.CalendarIntegrationId.Equals(input.CalendarIntegrationId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ErrorStatus == input.ErrorStatus ||
                    (this.ErrorStatus != null &&
                    this.ErrorStatus.Equals(input.ErrorStatus))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CalendarIntegrationId != null)
                    hashCode = hashCode * 59 + this.CalendarIntegrationId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ErrorStatus != null)
                    hashCode = hashCode * 59 + this.ErrorStatus.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
