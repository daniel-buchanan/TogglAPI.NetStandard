/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// TimesheetsetupsCreatePayload
    /// </summary>
    [DataContract]
    public partial class TimesheetsetupsCreatePayload :  IEquatable<TimesheetsetupsCreatePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimesheetsetupsCreatePayload" /> class.
        /// </summary>
        /// <param name="approverId">approverId.</param>
        /// <param name="memberIds">memberIds.</param>
        /// <param name="periodicity">periodicity.</param>
        /// <param name="reminderDay">reminderDay.</param>
        /// <param name="reminderTime">reminderTime.</param>
        /// <param name="startDate">startDate.</param>
        public TimesheetsetupsCreatePayload(int? approverId = default(int?), List<int?> memberIds = default(List<int?>), string periodicity = default(string), string reminderDay = default(string), string reminderTime = default(string), string startDate = default(string))
        {
            this.ApproverId = approverId;
            this.MemberIds = memberIds;
            this.Periodicity = periodicity;
            this.ReminderDay = reminderDay;
            this.ReminderTime = reminderTime;
            this.StartDate = startDate;
        }
        
        /// <summary>
        /// Gets or Sets ApproverId
        /// </summary>
        [DataMember(Name="approver_id", EmitDefaultValue=false)]
        public int? ApproverId { get; set; }

        /// <summary>
        /// Gets or Sets MemberIds
        /// </summary>
        [DataMember(Name="member_ids", EmitDefaultValue=false)]
        public List<int?> MemberIds { get; set; }

        /// <summary>
        /// Gets or Sets Periodicity
        /// </summary>
        [DataMember(Name="periodicity", EmitDefaultValue=false)]
        public string Periodicity { get; set; }

        /// <summary>
        /// Gets or Sets ReminderDay
        /// </summary>
        [DataMember(Name="reminder_day", EmitDefaultValue=false)]
        public string ReminderDay { get; set; }

        /// <summary>
        /// Gets or Sets ReminderTime
        /// </summary>
        [DataMember(Name="reminder_time", EmitDefaultValue=false)]
        public string ReminderTime { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimesheetsetupsCreatePayload {\n");
            sb.Append("  ApproverId: ").Append(ApproverId).Append("\n");
            sb.Append("  MemberIds: ").Append(MemberIds).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  ReminderDay: ").Append(ReminderDay).Append("\n");
            sb.Append("  ReminderTime: ").Append(ReminderTime).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimesheetsetupsCreatePayload);
        }

        /// <summary>
        /// Returns true if TimesheetsetupsCreatePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of TimesheetsetupsCreatePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimesheetsetupsCreatePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApproverId == input.ApproverId ||
                    (this.ApproverId != null &&
                    this.ApproverId.Equals(input.ApproverId))
                ) && 
                (
                    this.MemberIds == input.MemberIds ||
                    this.MemberIds != null &&
                    this.MemberIds.SequenceEqual(input.MemberIds)
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    (this.Periodicity != null &&
                    this.Periodicity.Equals(input.Periodicity))
                ) && 
                (
                    this.ReminderDay == input.ReminderDay ||
                    (this.ReminderDay != null &&
                    this.ReminderDay.Equals(input.ReminderDay))
                ) && 
                (
                    this.ReminderTime == input.ReminderTime ||
                    (this.ReminderTime != null &&
                    this.ReminderTime.Equals(input.ReminderTime))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApproverId != null)
                    hashCode = hashCode * 59 + this.ApproverId.GetHashCode();
                if (this.MemberIds != null)
                    hashCode = hashCode * 59 + this.MemberIds.GetHashCode();
                if (this.Periodicity != null)
                    hashCode = hashCode * 59 + this.Periodicity.GetHashCode();
                if (this.ReminderDay != null)
                    hashCode = hashCode * 59 + this.ReminderDay.GetHashCode();
                if (this.ReminderTime != null)
                    hashCode = hashCode * 59 + this.ReminderTime.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
