/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// TaskPatchOutput
    /// </summary>
    [DataContract]
    public partial class TaskPatchOutput :  IEquatable<TaskPatchOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskPatchOutput" /> class.
        /// </summary>
        /// <param name="failure">failure.</param>
        /// <param name="success">success.</param>
        public TaskPatchOutput(List<TaskPatchFailure> failure = default(List<TaskPatchFailure>), List<int?> success = default(List<int?>))
        {
            this.Failure = failure;
            this.Success = success;
        }
        
        /// <summary>
        /// Gets or Sets Failure
        /// </summary>
        [DataMember(Name="failure", EmitDefaultValue=false)]
        public List<TaskPatchFailure> Failure { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public List<int?> Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskPatchOutput {\n");
            sb.Append("  Failure: ").Append(Failure).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskPatchOutput);
        }

        /// <summary>
        /// Returns true if TaskPatchOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskPatchOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskPatchOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Failure == input.Failure ||
                    this.Failure != null &&
                    this.Failure.SequenceEqual(input.Failure)
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success != null &&
                    this.Success.SequenceEqual(input.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Failure != null)
                    hashCode = hashCode * 59 + this.Failure.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
