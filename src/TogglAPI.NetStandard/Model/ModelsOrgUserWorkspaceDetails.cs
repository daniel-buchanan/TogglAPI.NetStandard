/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsOrgUserWorkspaceDetails
    /// </summary>
    [DataContract]
    public partial class ModelsOrgUserWorkspaceDetails :  IEquatable<ModelsOrgUserWorkspaceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsOrgUserWorkspaceDetails" /> class.
        /// </summary>
        /// <param name="admin">admin.</param>
        /// <param name="cost">cost.</param>
        /// <param name="defaultCurrency">defaultCurrency.</param>
        /// <param name="groups">groups.</param>
        /// <param name="inactive">inactive.</param>
        /// <param name="rate">rate.</param>
        /// <param name="role">role.</param>
        /// <param name="workingHours">workingHours.</param>
        /// <param name="workspaceId">workspaceId.</param>
        /// <param name="workspaceName">workspaceName.</param>
        /// <param name="workspaceUserId">workspaceUserId.</param>
        public ModelsOrgUserWorkspaceDetails(bool? admin = default(bool?), decimal? cost = default(decimal?), string defaultCurrency = default(string), List<ModelsGroupDict> groups = default(List<ModelsGroupDict>), bool? inactive = default(bool?), decimal? rate = default(decimal?), string role = default(string), decimal? workingHours = default(decimal?), int? workspaceId = default(int?), string workspaceName = default(string), int? workspaceUserId = default(int?))
        {
            this.Admin = admin;
            this.Cost = cost;
            this.DefaultCurrency = defaultCurrency;
            this.Groups = groups;
            this.Inactive = inactive;
            this.Rate = rate;
            this.Role = role;
            this.WorkingHours = workingHours;
            this.WorkspaceId = workspaceId;
            this.WorkspaceName = workspaceName;
            this.WorkspaceUserId = workspaceUserId;
        }
        
        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public bool? Admin { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public decimal? Cost { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCurrency
        /// </summary>
        [DataMember(Name="default_currency", EmitDefaultValue=false)]
        public string DefaultCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<ModelsGroupDict> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets WorkingHours
        /// </summary>
        [DataMember(Name="working_hours", EmitDefaultValue=false)]
        public decimal? WorkingHours { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public int? WorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceName
        /// </summary>
        [DataMember(Name="workspace_name", EmitDefaultValue=false)]
        public string WorkspaceName { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceUserId
        /// </summary>
        [DataMember(Name="workspace_user_id", EmitDefaultValue=false)]
        public int? WorkspaceUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsOrgUserWorkspaceDetails {\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  DefaultCurrency: ").Append(DefaultCurrency).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  WorkingHours: ").Append(WorkingHours).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  WorkspaceName: ").Append(WorkspaceName).Append("\n");
            sb.Append("  WorkspaceUserId: ").Append(WorkspaceUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsOrgUserWorkspaceDetails);
        }

        /// <summary>
        /// Returns true if ModelsOrgUserWorkspaceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsOrgUserWorkspaceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsOrgUserWorkspaceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.DefaultCurrency == input.DefaultCurrency ||
                    (this.DefaultCurrency != null &&
                    this.DefaultCurrency.Equals(input.DefaultCurrency))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.WorkingHours == input.WorkingHours ||
                    (this.WorkingHours != null &&
                    this.WorkingHours.Equals(input.WorkingHours))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                ) && 
                (
                    this.WorkspaceName == input.WorkspaceName ||
                    (this.WorkspaceName != null &&
                    this.WorkspaceName.Equals(input.WorkspaceName))
                ) && 
                (
                    this.WorkspaceUserId == input.WorkspaceUserId ||
                    (this.WorkspaceUserId != null &&
                    this.WorkspaceUserId.Equals(input.WorkspaceUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.DefaultCurrency != null)
                    hashCode = hashCode * 59 + this.DefaultCurrency.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.WorkingHours != null)
                    hashCode = hashCode * 59 + this.WorkingHours.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                if (this.WorkspaceName != null)
                    hashCode = hashCode * 59 + this.WorkspaceName.GetHashCode();
                if (this.WorkspaceUserId != null)
                    hashCode = hashCode * 59 + this.WorkspaceUserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
