/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsUserInvoice
    /// </summary>
    [DataContract]
    public partial class ModelsUserInvoice :  IEquatable<ModelsUserInvoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsUserInvoice" /> class.
        /// </summary>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="currency">currency.</param>
        /// <param name="date">date.</param>
        /// <param name="deletedAt">deletedAt.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="items">items.</param>
        /// <param name="message">message.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        /// <param name="purchaseNumber">purchaseNumber.</param>
        /// <param name="taxes">taxes.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userId">userId.</param>
        /// <param name="userInvoiceId">userInvoiceId.</param>
        /// <param name="workspaceAddress">workspaceAddress.</param>
        /// <param name="workspaceId">workspaceId.</param>
        /// <param name="workspaceLogo">workspaceLogo.</param>
        public ModelsUserInvoice(string billingAddress = default(string), string createdAt = default(string), string currency = default(string), string date = default(string), string deletedAt = default(string), string documentId = default(string), string dueDate = default(string), List<ModelsUserInvoiceItem> items = default(List<ModelsUserInvoiceItem>), string message = default(string), string paymentTerms = default(string), string purchaseNumber = default(string), List<ModelsUserInvoiceTax> taxes = default(List<ModelsUserInvoiceTax>), string updatedAt = default(string), long? userId = default(long?), long? userInvoiceId = default(long?), string workspaceAddress = default(string), long? workspaceId = default(long?), string workspaceLogo = default(string))
        {
            this.BillingAddress = billingAddress;
            this.CreatedAt = createdAt;
            this.Currency = currency;
            this.Date = date;
            this.DeletedAt = deletedAt;
            this.DocumentId = documentId;
            this.DueDate = dueDate;
            this.Items = items;
            this.Message = message;
            this.PaymentTerms = paymentTerms;
            this.PurchaseNumber = purchaseNumber;
            this.Taxes = taxes;
            this.UpdatedAt = updatedAt;
            this.UserId = userId;
            this.UserInvoiceId = userInvoiceId;
            this.WorkspaceAddress = workspaceAddress;
            this.WorkspaceId = workspaceId;
            this.WorkspaceLogo = workspaceLogo;
        }
        
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billing_address", EmitDefaultValue=false)]
        public string BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public string DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="document_id", EmitDefaultValue=false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        public string DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ModelsUserInvoiceItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name="payment_terms", EmitDefaultValue=false)]
        public string PaymentTerms { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseNumber
        /// </summary>
        [DataMember(Name="purchase_number", EmitDefaultValue=false)]
        public string PurchaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<ModelsUserInvoiceTax> Taxes { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserInvoiceId
        /// </summary>
        [DataMember(Name="user_invoice_id", EmitDefaultValue=false)]
        public long? UserInvoiceId { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceAddress
        /// </summary>
        [DataMember(Name="workspace_address", EmitDefaultValue=false)]
        public string WorkspaceAddress { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public long? WorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceLogo
        /// </summary>
        [DataMember(Name="workspace_logo", EmitDefaultValue=false)]
        public string WorkspaceLogo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsUserInvoice {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  PurchaseNumber: ").Append(PurchaseNumber).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserInvoiceId: ").Append(UserInvoiceId).Append("\n");
            sb.Append("  WorkspaceAddress: ").Append(WorkspaceAddress).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  WorkspaceLogo: ").Append(WorkspaceLogo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsUserInvoice);
        }

        /// <summary>
        /// Returns true if ModelsUserInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsUserInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsUserInvoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.PaymentTerms == input.PaymentTerms ||
                    (this.PaymentTerms != null &&
                    this.PaymentTerms.Equals(input.PaymentTerms))
                ) && 
                (
                    this.PurchaseNumber == input.PurchaseNumber ||
                    (this.PurchaseNumber != null &&
                    this.PurchaseNumber.Equals(input.PurchaseNumber))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.SequenceEqual(input.Taxes)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserInvoiceId == input.UserInvoiceId ||
                    (this.UserInvoiceId != null &&
                    this.UserInvoiceId.Equals(input.UserInvoiceId))
                ) && 
                (
                    this.WorkspaceAddress == input.WorkspaceAddress ||
                    (this.WorkspaceAddress != null &&
                    this.WorkspaceAddress.Equals(input.WorkspaceAddress))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                ) && 
                (
                    this.WorkspaceLogo == input.WorkspaceLogo ||
                    (this.WorkspaceLogo != null &&
                    this.WorkspaceLogo.Equals(input.WorkspaceLogo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.PaymentTerms != null)
                    hashCode = hashCode * 59 + this.PaymentTerms.GetHashCode();
                if (this.PurchaseNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseNumber.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserInvoiceId != null)
                    hashCode = hashCode * 59 + this.UserInvoiceId.GetHashCode();
                if (this.WorkspaceAddress != null)
                    hashCode = hashCode * 59 + this.WorkspaceAddress.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                if (this.WorkspaceLogo != null)
                    hashCode = hashCode * 59 + this.WorkspaceLogo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
