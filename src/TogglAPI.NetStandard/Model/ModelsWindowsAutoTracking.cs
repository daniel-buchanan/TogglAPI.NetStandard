/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsWindowsAutoTracking
    /// </summary>
    [DataContract]
    public partial class ModelsWindowsAutoTracking :  IEquatable<ModelsWindowsAutoTracking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsWindowsAutoTracking" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="id">id.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="skipWhenTimerIsRunning">skipWhenTimerIsRunning.</param>
        /// <param name="startWithoutConfirmation">startWithoutConfirmation.</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="type">type.</param>
        public ModelsWindowsAutoTracking(string description = default(string), bool? enabled = default(bool?), string id = default(string), ModelsWindowsAutoTrackingParameter parameters = default(ModelsWindowsAutoTrackingParameter), int? projectId = default(int?), bool? skipWhenTimerIsRunning = default(bool?), bool? startWithoutConfirmation = default(bool?), int? taskId = default(int?), int? type = default(int?))
        {
            this.Description = description;
            this.Enabled = enabled;
            this.Id = id;
            this.Parameters = parameters;
            this.ProjectId = projectId;
            this.SkipWhenTimerIsRunning = skipWhenTimerIsRunning;
            this.StartWithoutConfirmation = startWithoutConfirmation;
            this.TaskId = taskId;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public ModelsWindowsAutoTrackingParameter Parameters { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets SkipWhenTimerIsRunning
        /// </summary>
        [DataMember(Name="skip_when_timer_is_running", EmitDefaultValue=false)]
        public bool? SkipWhenTimerIsRunning { get; set; }

        /// <summary>
        /// Gets or Sets StartWithoutConfirmation
        /// </summary>
        [DataMember(Name="start_without_confirmation", EmitDefaultValue=false)]
        public bool? StartWithoutConfirmation { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="task_id", EmitDefaultValue=false)]
        public int? TaskId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsWindowsAutoTracking {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  SkipWhenTimerIsRunning: ").Append(SkipWhenTimerIsRunning).Append("\n");
            sb.Append("  StartWithoutConfirmation: ").Append(StartWithoutConfirmation).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsWindowsAutoTracking);
        }

        /// <summary>
        /// Returns true if ModelsWindowsAutoTracking instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsWindowsAutoTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsWindowsAutoTracking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.SkipWhenTimerIsRunning == input.SkipWhenTimerIsRunning ||
                    (this.SkipWhenTimerIsRunning != null &&
                    this.SkipWhenTimerIsRunning.Equals(input.SkipWhenTimerIsRunning))
                ) && 
                (
                    this.StartWithoutConfirmation == input.StartWithoutConfirmation ||
                    (this.StartWithoutConfirmation != null &&
                    this.StartWithoutConfirmation.Equals(input.StartWithoutConfirmation))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.SkipWhenTimerIsRunning != null)
                    hashCode = hashCode * 59 + this.SkipWhenTimerIsRunning.GetHashCode();
                if (this.StartWithoutConfirmation != null)
                    hashCode = hashCode * 59 + this.StartWithoutConfirmation.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
