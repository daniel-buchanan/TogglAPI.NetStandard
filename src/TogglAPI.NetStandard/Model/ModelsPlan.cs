/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsPlan
    /// </summary>
    [DataContract]
    public partial class ModelsPlan :  IEquatable<ModelsPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsPlan" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="maxUserCount">maxUserCount.</param>
        /// <param name="name">name.</param>
        /// <param name="pricingPlans">pricingPlans.</param>
        /// <param name="productHandle">productHandle.</param>
        public ModelsPlan(long? id = default(long?), long? maxUserCount = default(long?), string name = default(string), List<ModelsPricingPlan> pricingPlans = default(List<ModelsPricingPlan>), string productHandle = default(string))
        {
            this.Id = id;
            this.MaxUserCount = maxUserCount;
            this.Name = name;
            this.PricingPlans = pricingPlans;
            this.ProductHandle = productHandle;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets MaxUserCount
        /// </summary>
        [DataMember(Name="max_user_count", EmitDefaultValue=false)]
        public long? MaxUserCount { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PricingPlans
        /// </summary>
        [DataMember(Name="pricing_plans", EmitDefaultValue=false)]
        public List<ModelsPricingPlan> PricingPlans { get; set; }

        /// <summary>
        /// Gets or Sets ProductHandle
        /// </summary>
        [DataMember(Name="product_handle", EmitDefaultValue=false)]
        public string ProductHandle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaxUserCount: ").Append(MaxUserCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PricingPlans: ").Append(PricingPlans).Append("\n");
            sb.Append("  ProductHandle: ").Append(ProductHandle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsPlan);
        }

        /// <summary>
        /// Returns true if ModelsPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MaxUserCount == input.MaxUserCount ||
                    (this.MaxUserCount != null &&
                    this.MaxUserCount.Equals(input.MaxUserCount))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PricingPlans == input.PricingPlans ||
                    this.PricingPlans != null &&
                    this.PricingPlans.SequenceEqual(input.PricingPlans)
                ) && 
                (
                    this.ProductHandle == input.ProductHandle ||
                    (this.ProductHandle != null &&
                    this.ProductHandle.Equals(input.ProductHandle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MaxUserCount != null)
                    hashCode = hashCode * 59 + this.MaxUserCount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PricingPlans != null)
                    hashCode = hashCode * 59 + this.PricingPlans.GetHashCode();
                if (this.ProductHandle != null)
                    hashCode = hashCode * 59 + this.ProductHandle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
