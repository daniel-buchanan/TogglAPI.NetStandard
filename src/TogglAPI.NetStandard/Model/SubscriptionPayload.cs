/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// SubscriptionPayload
    /// </summary>
    [DataContract]
    public partial class SubscriptionPayload :  IEquatable<SubscriptionPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPayload" /> class.
        /// </summary>
        /// <param name="contactDetails">contactDetails.</param>
        /// <param name="incTermsAccepted">True if user accepted ToS for the Toggl Inc company. Ignored if company is not customer of Toggl INC..</param>
        /// <param name="masterSignup">True if user want to sign up to the Master program..</param>
        /// <param name="pricingPlanId">Numeric ID of the pricing plan. (required).</param>
        public SubscriptionPayload(SubscriptionContactDetailRequest contactDetails = default(SubscriptionContactDetailRequest), bool? incTermsAccepted = default(bool?), bool? masterSignup = default(bool?), int? pricingPlanId = default(int?))
        {
            // to ensure "pricingPlanId" is required (not null)
            if (pricingPlanId == null)
            {
                throw new InvalidDataException("pricingPlanId is a required property for SubscriptionPayload and cannot be null");
            }
            else
            {
                this.PricingPlanId = pricingPlanId;
            }
            this.ContactDetails = contactDetails;
            this.IncTermsAccepted = incTermsAccepted;
            this.MasterSignup = masterSignup;
        }
        
        /// <summary>
        /// Gets or Sets ContactDetails
        /// </summary>
        [DataMember(Name="contact_details", EmitDefaultValue=false)]
        public SubscriptionContactDetailRequest ContactDetails { get; set; }

        /// <summary>
        /// True if user accepted ToS for the Toggl Inc company. Ignored if company is not customer of Toggl INC.
        /// </summary>
        /// <value>True if user accepted ToS for the Toggl Inc company. Ignored if company is not customer of Toggl INC.</value>
        [DataMember(Name="inc_terms_accepted", EmitDefaultValue=false)]
        public bool? IncTermsAccepted { get; set; }

        /// <summary>
        /// True if user want to sign up to the Master program.
        /// </summary>
        /// <value>True if user want to sign up to the Master program.</value>
        [DataMember(Name="master_signup", EmitDefaultValue=false)]
        public bool? MasterSignup { get; set; }

        /// <summary>
        /// Numeric ID of the pricing plan.
        /// </summary>
        /// <value>Numeric ID of the pricing plan.</value>
        [DataMember(Name="pricing_plan_id", EmitDefaultValue=false)]
        public int? PricingPlanId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPayload {\n");
            sb.Append("  ContactDetails: ").Append(ContactDetails).Append("\n");
            sb.Append("  IncTermsAccepted: ").Append(IncTermsAccepted).Append("\n");
            sb.Append("  MasterSignup: ").Append(MasterSignup).Append("\n");
            sb.Append("  PricingPlanId: ").Append(PricingPlanId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPayload);
        }

        /// <summary>
        /// Returns true if SubscriptionPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactDetails == input.ContactDetails ||
                    (this.ContactDetails != null &&
                    this.ContactDetails.Equals(input.ContactDetails))
                ) && 
                (
                    this.IncTermsAccepted == input.IncTermsAccepted ||
                    (this.IncTermsAccepted != null &&
                    this.IncTermsAccepted.Equals(input.IncTermsAccepted))
                ) && 
                (
                    this.MasterSignup == input.MasterSignup ||
                    (this.MasterSignup != null &&
                    this.MasterSignup.Equals(input.MasterSignup))
                ) && 
                (
                    this.PricingPlanId == input.PricingPlanId ||
                    (this.PricingPlanId != null &&
                    this.PricingPlanId.Equals(input.PricingPlanId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactDetails != null)
                    hashCode = hashCode * 59 + this.ContactDetails.GetHashCode();
                if (this.IncTermsAccepted != null)
                    hashCode = hashCode * 59 + this.IncTermsAccepted.GetHashCode();
                if (this.MasterSignup != null)
                    hashCode = hashCode * 59 + this.MasterSignup.GetHashCode();
                if (this.PricingPlanId != null)
                    hashCode = hashCode * 59 + this.PricingPlanId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
