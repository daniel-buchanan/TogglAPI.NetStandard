/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsContactDetail
    /// </summary>
    [DataContract]
    public partial class ModelsContactDetail :  IEquatable<ModelsContactDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsContactDetail" /> class.
        /// </summary>
        /// <param name="companyAddress">companyAddress.</param>
        /// <param name="companyCity">companyCity.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="contactDetailId">contactDetailId.</param>
        /// <param name="contactEmail">contactEmail.</param>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="countrySubdivisionId">countrySubdivisionId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="isEuResident">isEuResident.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userId">userId.</param>
        /// <param name="vatNumber">vatNumber.</param>
        /// <param name="vatNumberValid">DEPRECATED.</param>
        /// <param name="vatNumberValidatedAt">DEPRECATED.</param>
        /// <param name="zipCode">zipCode.</param>
        public ModelsContactDetail(string companyAddress = default(string), string companyCity = default(string), string companyName = default(string), int? contactDetailId = default(int?), string contactEmail = default(string), string contactPerson = default(string), int? countryId = default(int?), int? countrySubdivisionId = default(int?), string createdAt = default(string), int? customerId = default(int?), bool? isEuResident = default(bool?), string updatedAt = default(string), int? userId = default(int?), string vatNumber = default(string), bool? vatNumberValid = default(bool?), string vatNumberValidatedAt = default(string), string zipCode = default(string))
        {
            this.CompanyAddress = companyAddress;
            this.CompanyCity = companyCity;
            this.CompanyName = companyName;
            this.ContactDetailId = contactDetailId;
            this.ContactEmail = contactEmail;
            this.ContactPerson = contactPerson;
            this.CountryId = countryId;
            this.CountrySubdivisionId = countrySubdivisionId;
            this.CreatedAt = createdAt;
            this.CustomerId = customerId;
            this.IsEuResident = isEuResident;
            this.UpdatedAt = updatedAt;
            this.UserId = userId;
            this.VatNumber = vatNumber;
            this.VatNumberValid = vatNumberValid;
            this.VatNumberValidatedAt = vatNumberValidatedAt;
            this.ZipCode = zipCode;
        }
        
        /// <summary>
        /// Gets or Sets CompanyAddress
        /// </summary>
        [DataMember(Name="company_address", EmitDefaultValue=false)]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCity
        /// </summary>
        [DataMember(Name="company_city", EmitDefaultValue=false)]
        public string CompanyCity { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets ContactDetailId
        /// </summary>
        [DataMember(Name="contact_detail_id", EmitDefaultValue=false)]
        public int? ContactDetailId { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [DataMember(Name="contact_email", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name="contact_person", EmitDefaultValue=false)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name="country_id", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Gets or Sets CountrySubdivisionId
        /// </summary>
        [DataMember(Name="country_subdivision_id", EmitDefaultValue=false)]
        public int? CountrySubdivisionId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customer_id", EmitDefaultValue=false)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets IsEuResident
        /// </summary>
        [DataMember(Name="is_eu_resident", EmitDefaultValue=false)]
        public bool? IsEuResident { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets VatNumber
        /// </summary>
        [DataMember(Name="vat_number", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// DEPRECATED
        /// </summary>
        /// <value>DEPRECATED</value>
        [DataMember(Name="vat_number_valid", EmitDefaultValue=false)]
        public bool? VatNumberValid { get; set; }

        /// <summary>
        /// DEPRECATED
        /// </summary>
        /// <value>DEPRECATED</value>
        [DataMember(Name="vat_number_validated_at", EmitDefaultValue=false)]
        public string VatNumberValidatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="zip_code", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsContactDetail {\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  CompanyCity: ").Append(CompanyCity).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ContactDetailId: ").Append(ContactDetailId).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CountrySubdivisionId: ").Append(CountrySubdivisionId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  IsEuResident: ").Append(IsEuResident).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  VatNumberValid: ").Append(VatNumberValid).Append("\n");
            sb.Append("  VatNumberValidatedAt: ").Append(VatNumberValidatedAt).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsContactDetail);
        }

        /// <summary>
        /// Returns true if ModelsContactDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsContactDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsContactDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                ) && 
                (
                    this.CompanyCity == input.CompanyCity ||
                    (this.CompanyCity != null &&
                    this.CompanyCity.Equals(input.CompanyCity))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.ContactDetailId == input.ContactDetailId ||
                    (this.ContactDetailId != null &&
                    this.ContactDetailId.Equals(input.ContactDetailId))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CountrySubdivisionId == input.CountrySubdivisionId ||
                    (this.CountrySubdivisionId != null &&
                    this.CountrySubdivisionId.Equals(input.CountrySubdivisionId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.IsEuResident == input.IsEuResident ||
                    (this.IsEuResident != null &&
                    this.IsEuResident.Equals(input.IsEuResident))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.VatNumberValid == input.VatNumberValid ||
                    (this.VatNumberValid != null &&
                    this.VatNumberValid.Equals(input.VatNumberValid))
                ) && 
                (
                    this.VatNumberValidatedAt == input.VatNumberValidatedAt ||
                    (this.VatNumberValidatedAt != null &&
                    this.VatNumberValidatedAt.Equals(input.VatNumberValidatedAt))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyAddress != null)
                    hashCode = hashCode * 59 + this.CompanyAddress.GetHashCode();
                if (this.CompanyCity != null)
                    hashCode = hashCode * 59 + this.CompanyCity.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.ContactDetailId != null)
                    hashCode = hashCode * 59 + this.ContactDetailId.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.CountrySubdivisionId != null)
                    hashCode = hashCode * 59 + this.CountrySubdivisionId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.IsEuResident != null)
                    hashCode = hashCode * 59 + this.IsEuResident.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.VatNumberValid != null)
                    hashCode = hashCode * 59 + this.VatNumberValid.GetHashCode();
                if (this.VatNumberValidatedAt != null)
                    hashCode = hashCode * 59 + this.VatNumberValidatedAt.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
