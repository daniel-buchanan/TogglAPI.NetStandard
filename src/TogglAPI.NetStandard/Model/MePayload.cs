/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// MePayload
    /// </summary>
    [DataContract]
    public partial class MePayload :  IEquatable<MePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MePayload" /> class.
        /// </summary>
        /// <param name="beginningOfWeek">User&#39;s first day of the week. Sunday: 0, Monday:1, etc..</param>
        /// <param name="countryId">User&#39;s country ID.</param>
        /// <param name="currentPassword">User&#39;s current password (used to change the current password).</param>
        /// <param name="defaultWorkspaceId">User&#39;s default workspace ID.</param>
        /// <param name="email">User&#39;s email address.</param>
        /// <param name="fullname">User&#39;s full name.</param>
        /// <param name="password">User&#39;s new password (current one must also be provided).</param>
        /// <param name="timezone">User&#39;s timezone.</param>
        public MePayload(long? beginningOfWeek = default(long?), long? countryId = default(long?), string currentPassword = default(string), long? defaultWorkspaceId = default(long?), string email = default(string), string fullname = default(string), string password = default(string), string timezone = default(string))
        {
            this.BeginningOfWeek = beginningOfWeek;
            this.CountryId = countryId;
            this.CurrentPassword = currentPassword;
            this.DefaultWorkspaceId = defaultWorkspaceId;
            this.Email = email;
            this.Fullname = fullname;
            this.Password = password;
            this.Timezone = timezone;
        }
        
        /// <summary>
        /// User&#39;s first day of the week. Sunday: 0, Monday:1, etc.
        /// </summary>
        /// <value>User&#39;s first day of the week. Sunday: 0, Monday:1, etc.</value>
        [DataMember(Name="beginning_of_week", EmitDefaultValue=false)]
        public long? BeginningOfWeek { get; set; }

        /// <summary>
        /// User&#39;s country ID
        /// </summary>
        /// <value>User&#39;s country ID</value>
        [DataMember(Name="country_id", EmitDefaultValue=false)]
        public long? CountryId { get; set; }

        /// <summary>
        /// User&#39;s current password (used to change the current password)
        /// </summary>
        /// <value>User&#39;s current password (used to change the current password)</value>
        [DataMember(Name="current_password", EmitDefaultValue=false)]
        public string CurrentPassword { get; set; }

        /// <summary>
        /// User&#39;s default workspace ID
        /// </summary>
        /// <value>User&#39;s default workspace ID</value>
        [DataMember(Name="default_workspace_id", EmitDefaultValue=false)]
        public long? DefaultWorkspaceId { get; set; }

        /// <summary>
        /// User&#39;s email address
        /// </summary>
        /// <value>User&#39;s email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// User&#39;s full name
        /// </summary>
        /// <value>User&#39;s full name</value>
        [DataMember(Name="fullname", EmitDefaultValue=false)]
        public string Fullname { get; set; }

        /// <summary>
        /// User&#39;s new password (current one must also be provided)
        /// </summary>
        /// <value>User&#39;s new password (current one must also be provided)</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// User&#39;s timezone
        /// </summary>
        /// <value>User&#39;s timezone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MePayload {\n");
            sb.Append("  BeginningOfWeek: ").Append(BeginningOfWeek).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CurrentPassword: ").Append(CurrentPassword).Append("\n");
            sb.Append("  DefaultWorkspaceId: ").Append(DefaultWorkspaceId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MePayload);
        }

        /// <summary>
        /// Returns true if MePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of MePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BeginningOfWeek == input.BeginningOfWeek ||
                    (this.BeginningOfWeek != null &&
                    this.BeginningOfWeek.Equals(input.BeginningOfWeek))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CurrentPassword == input.CurrentPassword ||
                    (this.CurrentPassword != null &&
                    this.CurrentPassword.Equals(input.CurrentPassword))
                ) && 
                (
                    this.DefaultWorkspaceId == input.DefaultWorkspaceId ||
                    (this.DefaultWorkspaceId != null &&
                    this.DefaultWorkspaceId.Equals(input.DefaultWorkspaceId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Fullname == input.Fullname ||
                    (this.Fullname != null &&
                    this.Fullname.Equals(input.Fullname))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BeginningOfWeek != null)
                    hashCode = hashCode * 59 + this.BeginningOfWeek.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.CurrentPassword != null)
                    hashCode = hashCode * 59 + this.CurrentPassword.GetHashCode();
                if (this.DefaultWorkspaceId != null)
                    hashCode = hashCode * 59 + this.DefaultWorkspaceId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Fullname != null)
                    hashCode = hashCode * 59 + this.Fullname.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
