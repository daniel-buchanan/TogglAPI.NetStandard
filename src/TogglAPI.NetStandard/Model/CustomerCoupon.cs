/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// CustomerCoupon
    /// </summary>
    [DataContract]
    public partial class CustomerCoupon :  IEquatable<CustomerCoupon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerCoupon" /> class.
        /// </summary>
        /// <param name="amountOff">amountOff.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="duration">duration.</param>
        /// <param name="durationInMonths">durationInMonths.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="percentOff">percentOff.</param>
        /// <param name="valid">valid.</param>
        public CustomerCoupon(long? amountOff = default(long?), bool? deleted = default(bool?), string duration = default(string), long? durationInMonths = default(long?), string id = default(string), string name = default(string), decimal? percentOff = default(decimal?), bool? valid = default(bool?))
        {
            this.AmountOff = amountOff;
            this.Deleted = deleted;
            this.Duration = duration;
            this.DurationInMonths = durationInMonths;
            this.Id = id;
            this.Name = name;
            this.PercentOff = percentOff;
            this.Valid = valid;
        }
        
        /// <summary>
        /// Gets or Sets AmountOff
        /// </summary>
        [DataMember(Name="amount_off", EmitDefaultValue=false)]
        public long? AmountOff { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets DurationInMonths
        /// </summary>
        [DataMember(Name="duration_in_months", EmitDefaultValue=false)]
        public long? DurationInMonths { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PercentOff
        /// </summary>
        [DataMember(Name="percent_off", EmitDefaultValue=false)]
        public decimal? PercentOff { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerCoupon {\n");
            sb.Append("  AmountOff: ").Append(AmountOff).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  DurationInMonths: ").Append(DurationInMonths).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PercentOff: ").Append(PercentOff).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerCoupon);
        }

        /// <summary>
        /// Returns true if CustomerCoupon instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerCoupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerCoupon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountOff == input.AmountOff ||
                    (this.AmountOff != null &&
                    this.AmountOff.Equals(input.AmountOff))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.DurationInMonths == input.DurationInMonths ||
                    (this.DurationInMonths != null &&
                    this.DurationInMonths.Equals(input.DurationInMonths))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PercentOff == input.PercentOff ||
                    (this.PercentOff != null &&
                    this.PercentOff.Equals(input.PercentOff))
                ) && 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountOff != null)
                    hashCode = hashCode * 59 + this.AmountOff.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.DurationInMonths != null)
                    hashCode = hashCode * 59 + this.DurationInMonths.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PercentOff != null)
                    hashCode = hashCode * 59 + this.PercentOff.GetHashCode();
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
