/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsEvent
    /// </summary>
    [DataContract]
    public partial class ModelsEvent :  IEquatable<ModelsEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsEvent" /> class.
        /// </summary>
        /// <param name="allDay">allDay.</param>
        /// <param name="background">background.</param>
        /// <param name="calendarEventId">calendarEventId.</param>
        /// <param name="calendarId">calendarId.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="foreground">foreground.</param>
        /// <param name="htmlLink">htmlLink.</param>
        /// <param name="icalUid">This is an unique ID used to avoid duplicate events when getting information from multiple sources. E. G. the mobile may get calendar events without BE integration, so they should be able to tell if an event is repeated..</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="title">title.</param>
        /// <param name="updated">updated.</param>
        public ModelsEvent(bool? allDay = default(bool?), string background = default(string), long? calendarEventId = default(long?), long? calendarId = default(long?), string endTime = default(string), string externalId = default(string), string foreground = default(string), string htmlLink = default(string), string icalUid = default(string), string startTime = default(string), string title = default(string), string updated = default(string))
        {
            this.AllDay = allDay;
            this.Background = background;
            this.CalendarEventId = calendarEventId;
            this.CalendarId = calendarId;
            this.EndTime = endTime;
            this.ExternalId = externalId;
            this.Foreground = foreground;
            this.HtmlLink = htmlLink;
            this.IcalUid = icalUid;
            this.StartTime = startTime;
            this.Title = title;
            this.Updated = updated;
        }
        
        /// <summary>
        /// Gets or Sets AllDay
        /// </summary>
        [DataMember(Name="all_day", EmitDefaultValue=false)]
        public bool? AllDay { get; set; }

        /// <summary>
        /// Gets or Sets Background
        /// </summary>
        [DataMember(Name="background", EmitDefaultValue=false)]
        public string Background { get; set; }

        /// <summary>
        /// Gets or Sets CalendarEventId
        /// </summary>
        [DataMember(Name="calendar_event_id", EmitDefaultValue=false)]
        public long? CalendarEventId { get; set; }

        /// <summary>
        /// Gets or Sets CalendarId
        /// </summary>
        [DataMember(Name="calendar_id", EmitDefaultValue=false)]
        public long? CalendarId { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Foreground
        /// </summary>
        [DataMember(Name="foreground", EmitDefaultValue=false)]
        public string Foreground { get; set; }

        /// <summary>
        /// Gets or Sets HtmlLink
        /// </summary>
        [DataMember(Name="html_link", EmitDefaultValue=false)]
        public string HtmlLink { get; set; }

        /// <summary>
        /// This is an unique ID used to avoid duplicate events when getting information from multiple sources. E. G. the mobile may get calendar events without BE integration, so they should be able to tell if an event is repeated.
        /// </summary>
        /// <value>This is an unique ID used to avoid duplicate events when getting information from multiple sources. E. G. the mobile may get calendar events without BE integration, so they should be able to tell if an event is repeated.</value>
        [DataMember(Name="ical_uid", EmitDefaultValue=false)]
        public string IcalUid { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public string Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsEvent {\n");
            sb.Append("  AllDay: ").Append(AllDay).Append("\n");
            sb.Append("  Background: ").Append(Background).Append("\n");
            sb.Append("  CalendarEventId: ").Append(CalendarEventId).Append("\n");
            sb.Append("  CalendarId: ").Append(CalendarId).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Foreground: ").Append(Foreground).Append("\n");
            sb.Append("  HtmlLink: ").Append(HtmlLink).Append("\n");
            sb.Append("  IcalUid: ").Append(IcalUid).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsEvent);
        }

        /// <summary>
        /// Returns true if ModelsEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllDay == input.AllDay ||
                    (this.AllDay != null &&
                    this.AllDay.Equals(input.AllDay))
                ) && 
                (
                    this.Background == input.Background ||
                    (this.Background != null &&
                    this.Background.Equals(input.Background))
                ) && 
                (
                    this.CalendarEventId == input.CalendarEventId ||
                    (this.CalendarEventId != null &&
                    this.CalendarEventId.Equals(input.CalendarEventId))
                ) && 
                (
                    this.CalendarId == input.CalendarId ||
                    (this.CalendarId != null &&
                    this.CalendarId.Equals(input.CalendarId))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Foreground == input.Foreground ||
                    (this.Foreground != null &&
                    this.Foreground.Equals(input.Foreground))
                ) && 
                (
                    this.HtmlLink == input.HtmlLink ||
                    (this.HtmlLink != null &&
                    this.HtmlLink.Equals(input.HtmlLink))
                ) && 
                (
                    this.IcalUid == input.IcalUid ||
                    (this.IcalUid != null &&
                    this.IcalUid.Equals(input.IcalUid))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllDay != null)
                    hashCode = hashCode * 59 + this.AllDay.GetHashCode();
                if (this.Background != null)
                    hashCode = hashCode * 59 + this.Background.GetHashCode();
                if (this.CalendarEventId != null)
                    hashCode = hashCode * 59 + this.CalendarEventId.GetHashCode();
                if (this.CalendarId != null)
                    hashCode = hashCode * 59 + this.CalendarId.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Foreground != null)
                    hashCode = hashCode * 59 + this.Foreground.GetHashCode();
                if (this.HtmlLink != null)
                    hashCode = hashCode * 59 + this.HtmlLink.GetHashCode();
                if (this.IcalUid != null)
                    hashCode = hashCode * 59 + this.IcalUid.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
