/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsGoal
    /// </summary>
    [DataContract]
    public partial class ModelsGoal :  IEquatable<ModelsGoal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsGoal" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="billable">billable.</param>
        /// <param name="comparison">comparison.</param>
        /// <param name="creatorUserID">creatorUserID.</param>
        /// <param name="creatorUserName">creatorUserName.</param>
        /// <param name="currentRecurrenceEndDate">currentRecurrenceEndDate.</param>
        /// <param name="currentRecurrenceStartDate">currentRecurrenceStartDate.</param>
        /// <param name="currentRecurrenceTrackedSeconds">currentRecurrenceTrackedSeconds.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="icon">icon.</param>
        /// <param name="id">id.</param>
        /// <param name="lastCompletedRecurrenceEndDate">lastCompletedRecurrenceEndDate.</param>
        /// <param name="lastNotifiedAt">lastNotifiedAt.</param>
        /// <param name="name">name.</param>
        /// <param name="projectIDs">projectIDs.</param>
        /// <param name="recurrence">recurrence.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="status">status.</param>
        /// <param name="streak">streak.</param>
        /// <param name="tagIDs">tagIDs.</param>
        /// <param name="targetSeconds">targetSeconds.</param>
        /// <param name="taskIDs">taskIDs.</param>
        /// <param name="teamGoal">teamGoal.</param>
        /// <param name="userID">userID.</param>
        /// <param name="userName">userName.</param>
        /// <param name="workspaceID">workspaceID.</param>
        public ModelsGoal(bool? active = default(bool?), bool? billable = default(bool?), string comparison = default(string), int? creatorUserID = default(int?), string creatorUserName = default(string), string currentRecurrenceEndDate = default(string), string currentRecurrenceStartDate = default(string), int? currentRecurrenceTrackedSeconds = default(int?), string endDate = default(string), int? icon = default(int?), int? id = default(int?), string lastCompletedRecurrenceEndDate = default(string), string lastNotifiedAt = default(string), string name = default(string), UtilsInt64Slice projectIDs = default(UtilsInt64Slice), string recurrence = default(string), string startDate = default(string), string status = default(string), int? streak = default(int?), UtilsInt64Slice tagIDs = default(UtilsInt64Slice), int? targetSeconds = default(int?), UtilsInt64Slice taskIDs = default(UtilsInt64Slice), bool? teamGoal = default(bool?), int? userID = default(int?), string userName = default(string), int? workspaceID = default(int?))
        {
            this.Active = active;
            this.Billable = billable;
            this.Comparison = comparison;
            this.CreatorUserID = creatorUserID;
            this.CreatorUserName = creatorUserName;
            this.CurrentRecurrenceEndDate = currentRecurrenceEndDate;
            this.CurrentRecurrenceStartDate = currentRecurrenceStartDate;
            this.CurrentRecurrenceTrackedSeconds = currentRecurrenceTrackedSeconds;
            this.EndDate = endDate;
            this.Icon = icon;
            this.Id = id;
            this.LastCompletedRecurrenceEndDate = lastCompletedRecurrenceEndDate;
            this.LastNotifiedAt = lastNotifiedAt;
            this.Name = name;
            this.ProjectIDs = projectIDs;
            this.Recurrence = recurrence;
            this.StartDate = startDate;
            this.Status = status;
            this.Streak = streak;
            this.TagIDs = tagIDs;
            this.TargetSeconds = targetSeconds;
            this.TaskIDs = taskIDs;
            this.TeamGoal = teamGoal;
            this.UserID = userID;
            this.UserName = userName;
            this.WorkspaceID = workspaceID;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets Comparison
        /// </summary>
        [DataMember(Name="comparison", EmitDefaultValue=false)]
        public string Comparison { get; set; }

        /// <summary>
        /// Gets or Sets CreatorUserID
        /// </summary>
        [DataMember(Name="creatorUserID", EmitDefaultValue=false)]
        public int? CreatorUserID { get; set; }

        /// <summary>
        /// Gets or Sets CreatorUserName
        /// </summary>
        [DataMember(Name="creatorUserName", EmitDefaultValue=false)]
        public string CreatorUserName { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRecurrenceEndDate
        /// </summary>
        [DataMember(Name="currentRecurrenceEndDate", EmitDefaultValue=false)]
        public string CurrentRecurrenceEndDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRecurrenceStartDate
        /// </summary>
        [DataMember(Name="currentRecurrenceStartDate", EmitDefaultValue=false)]
        public string CurrentRecurrenceStartDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRecurrenceTrackedSeconds
        /// </summary>
        [DataMember(Name="currentRecurrenceTrackedSeconds", EmitDefaultValue=false)]
        public int? CurrentRecurrenceTrackedSeconds { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public int? Icon { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets LastCompletedRecurrenceEndDate
        /// </summary>
        [DataMember(Name="lastCompletedRecurrenceEndDate", EmitDefaultValue=false)]
        public string LastCompletedRecurrenceEndDate { get; set; }

        /// <summary>
        /// Gets or Sets LastNotifiedAt
        /// </summary>
        [DataMember(Name="lastNotifiedAt", EmitDefaultValue=false)]
        public string LastNotifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProjectIDs
        /// </summary>
        [DataMember(Name="projectIDs", EmitDefaultValue=false)]
        public UtilsInt64Slice ProjectIDs { get; set; }

        /// <summary>
        /// Gets or Sets Recurrence
        /// </summary>
        [DataMember(Name="recurrence", EmitDefaultValue=false)]
        public string Recurrence { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Streak
        /// </summary>
        [DataMember(Name="streak", EmitDefaultValue=false)]
        public int? Streak { get; set; }

        /// <summary>
        /// Gets or Sets TagIDs
        /// </summary>
        [DataMember(Name="tagIDs", EmitDefaultValue=false)]
        public UtilsInt64Slice TagIDs { get; set; }

        /// <summary>
        /// Gets or Sets TargetSeconds
        /// </summary>
        [DataMember(Name="targetSeconds", EmitDefaultValue=false)]
        public int? TargetSeconds { get; set; }

        /// <summary>
        /// Gets or Sets TaskIDs
        /// </summary>
        [DataMember(Name="taskIDs", EmitDefaultValue=false)]
        public UtilsInt64Slice TaskIDs { get; set; }

        /// <summary>
        /// Gets or Sets TeamGoal
        /// </summary>
        [DataMember(Name="teamGoal", EmitDefaultValue=false)]
        public bool? TeamGoal { get; set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name="userID", EmitDefaultValue=false)]
        public int? UserID { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceID
        /// </summary>
        [DataMember(Name="workspaceID", EmitDefaultValue=false)]
        public int? WorkspaceID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsGoal {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Comparison: ").Append(Comparison).Append("\n");
            sb.Append("  CreatorUserID: ").Append(CreatorUserID).Append("\n");
            sb.Append("  CreatorUserName: ").Append(CreatorUserName).Append("\n");
            sb.Append("  CurrentRecurrenceEndDate: ").Append(CurrentRecurrenceEndDate).Append("\n");
            sb.Append("  CurrentRecurrenceStartDate: ").Append(CurrentRecurrenceStartDate).Append("\n");
            sb.Append("  CurrentRecurrenceTrackedSeconds: ").Append(CurrentRecurrenceTrackedSeconds).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastCompletedRecurrenceEndDate: ").Append(LastCompletedRecurrenceEndDate).Append("\n");
            sb.Append("  LastNotifiedAt: ").Append(LastNotifiedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectIDs: ").Append(ProjectIDs).Append("\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Streak: ").Append(Streak).Append("\n");
            sb.Append("  TagIDs: ").Append(TagIDs).Append("\n");
            sb.Append("  TargetSeconds: ").Append(TargetSeconds).Append("\n");
            sb.Append("  TaskIDs: ").Append(TaskIDs).Append("\n");
            sb.Append("  TeamGoal: ").Append(TeamGoal).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  WorkspaceID: ").Append(WorkspaceID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsGoal);
        }

        /// <summary>
        /// Returns true if ModelsGoal instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsGoal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsGoal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Comparison == input.Comparison ||
                    (this.Comparison != null &&
                    this.Comparison.Equals(input.Comparison))
                ) && 
                (
                    this.CreatorUserID == input.CreatorUserID ||
                    (this.CreatorUserID != null &&
                    this.CreatorUserID.Equals(input.CreatorUserID))
                ) && 
                (
                    this.CreatorUserName == input.CreatorUserName ||
                    (this.CreatorUserName != null &&
                    this.CreatorUserName.Equals(input.CreatorUserName))
                ) && 
                (
                    this.CurrentRecurrenceEndDate == input.CurrentRecurrenceEndDate ||
                    (this.CurrentRecurrenceEndDate != null &&
                    this.CurrentRecurrenceEndDate.Equals(input.CurrentRecurrenceEndDate))
                ) && 
                (
                    this.CurrentRecurrenceStartDate == input.CurrentRecurrenceStartDate ||
                    (this.CurrentRecurrenceStartDate != null &&
                    this.CurrentRecurrenceStartDate.Equals(input.CurrentRecurrenceStartDate))
                ) && 
                (
                    this.CurrentRecurrenceTrackedSeconds == input.CurrentRecurrenceTrackedSeconds ||
                    (this.CurrentRecurrenceTrackedSeconds != null &&
                    this.CurrentRecurrenceTrackedSeconds.Equals(input.CurrentRecurrenceTrackedSeconds))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastCompletedRecurrenceEndDate == input.LastCompletedRecurrenceEndDate ||
                    (this.LastCompletedRecurrenceEndDate != null &&
                    this.LastCompletedRecurrenceEndDate.Equals(input.LastCompletedRecurrenceEndDate))
                ) && 
                (
                    this.LastNotifiedAt == input.LastNotifiedAt ||
                    (this.LastNotifiedAt != null &&
                    this.LastNotifiedAt.Equals(input.LastNotifiedAt))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProjectIDs == input.ProjectIDs ||
                    (this.ProjectIDs != null &&
                    this.ProjectIDs.Equals(input.ProjectIDs))
                ) && 
                (
                    this.Recurrence == input.Recurrence ||
                    (this.Recurrence != null &&
                    this.Recurrence.Equals(input.Recurrence))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Streak == input.Streak ||
                    (this.Streak != null &&
                    this.Streak.Equals(input.Streak))
                ) && 
                (
                    this.TagIDs == input.TagIDs ||
                    (this.TagIDs != null &&
                    this.TagIDs.Equals(input.TagIDs))
                ) && 
                (
                    this.TargetSeconds == input.TargetSeconds ||
                    (this.TargetSeconds != null &&
                    this.TargetSeconds.Equals(input.TargetSeconds))
                ) && 
                (
                    this.TaskIDs == input.TaskIDs ||
                    (this.TaskIDs != null &&
                    this.TaskIDs.Equals(input.TaskIDs))
                ) && 
                (
                    this.TeamGoal == input.TeamGoal ||
                    (this.TeamGoal != null &&
                    this.TeamGoal.Equals(input.TeamGoal))
                ) && 
                (
                    this.UserID == input.UserID ||
                    (this.UserID != null &&
                    this.UserID.Equals(input.UserID))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.WorkspaceID == input.WorkspaceID ||
                    (this.WorkspaceID != null &&
                    this.WorkspaceID.Equals(input.WorkspaceID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Comparison != null)
                    hashCode = hashCode * 59 + this.Comparison.GetHashCode();
                if (this.CreatorUserID != null)
                    hashCode = hashCode * 59 + this.CreatorUserID.GetHashCode();
                if (this.CreatorUserName != null)
                    hashCode = hashCode * 59 + this.CreatorUserName.GetHashCode();
                if (this.CurrentRecurrenceEndDate != null)
                    hashCode = hashCode * 59 + this.CurrentRecurrenceEndDate.GetHashCode();
                if (this.CurrentRecurrenceStartDate != null)
                    hashCode = hashCode * 59 + this.CurrentRecurrenceStartDate.GetHashCode();
                if (this.CurrentRecurrenceTrackedSeconds != null)
                    hashCode = hashCode * 59 + this.CurrentRecurrenceTrackedSeconds.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastCompletedRecurrenceEndDate != null)
                    hashCode = hashCode * 59 + this.LastCompletedRecurrenceEndDate.GetHashCode();
                if (this.LastNotifiedAt != null)
                    hashCode = hashCode * 59 + this.LastNotifiedAt.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProjectIDs != null)
                    hashCode = hashCode * 59 + this.ProjectIDs.GetHashCode();
                if (this.Recurrence != null)
                    hashCode = hashCode * 59 + this.Recurrence.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Streak != null)
                    hashCode = hashCode * 59 + this.Streak.GetHashCode();
                if (this.TagIDs != null)
                    hashCode = hashCode * 59 + this.TagIDs.GetHashCode();
                if (this.TargetSeconds != null)
                    hashCode = hashCode * 59 + this.TargetSeconds.GetHashCode();
                if (this.TaskIDs != null)
                    hashCode = hashCode * 59 + this.TaskIDs.GetHashCode();
                if (this.TeamGoal != null)
                    hashCode = hashCode * 59 + this.TeamGoal.GetHashCode();
                if (this.UserID != null)
                    hashCode = hashCode * 59 + this.UserID.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.WorkspaceID != null)
                    hashCode = hashCode * 59 + this.WorkspaceID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
