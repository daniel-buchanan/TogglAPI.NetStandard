/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// TimeentriesGetTimEntryInvitationsResponse
    /// </summary>
    [DataContract]
    public partial class TimeentriesGetTimEntryInvitationsResponse :  IEquatable<TimeentriesGetTimEntryInvitationsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeentriesGetTimEntryInvitationsResponse" /> class.
        /// </summary>
        /// <param name="sharedByUserId">sharedByUserId.</param>
        /// <param name="sharedByUserName">sharedByUserName.</param>
        /// <param name="timeEntry">timeEntry.</param>
        /// <param name="timeEntryInvitationId">timeEntryInvitationId.</param>
        /// <param name="workspaceId">workspaceId.</param>
        public TimeentriesGetTimEntryInvitationsResponse(int? sharedByUserId = default(int?), string sharedByUserName = default(string), ModelsTimeEntry timeEntry = default(ModelsTimeEntry), int? timeEntryInvitationId = default(int?), int? workspaceId = default(int?))
        {
            this.SharedByUserId = sharedByUserId;
            this.SharedByUserName = sharedByUserName;
            this.TimeEntry = timeEntry;
            this.TimeEntryInvitationId = timeEntryInvitationId;
            this.WorkspaceId = workspaceId;
        }
        
        /// <summary>
        /// Gets or Sets SharedByUserId
        /// </summary>
        [DataMember(Name="shared_by_user_id", EmitDefaultValue=false)]
        public int? SharedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets SharedByUserName
        /// </summary>
        [DataMember(Name="shared_by_user_name", EmitDefaultValue=false)]
        public string SharedByUserName { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntry
        /// </summary>
        [DataMember(Name="time_entry", EmitDefaultValue=false)]
        public ModelsTimeEntry TimeEntry { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryInvitationId
        /// </summary>
        [DataMember(Name="time_entry_invitation_id", EmitDefaultValue=false)]
        public int? TimeEntryInvitationId { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public int? WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeentriesGetTimEntryInvitationsResponse {\n");
            sb.Append("  SharedByUserId: ").Append(SharedByUserId).Append("\n");
            sb.Append("  SharedByUserName: ").Append(SharedByUserName).Append("\n");
            sb.Append("  TimeEntry: ").Append(TimeEntry).Append("\n");
            sb.Append("  TimeEntryInvitationId: ").Append(TimeEntryInvitationId).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeentriesGetTimEntryInvitationsResponse);
        }

        /// <summary>
        /// Returns true if TimeentriesGetTimEntryInvitationsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeentriesGetTimEntryInvitationsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeentriesGetTimEntryInvitationsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SharedByUserId == input.SharedByUserId ||
                    (this.SharedByUserId != null &&
                    this.SharedByUserId.Equals(input.SharedByUserId))
                ) && 
                (
                    this.SharedByUserName == input.SharedByUserName ||
                    (this.SharedByUserName != null &&
                    this.SharedByUserName.Equals(input.SharedByUserName))
                ) && 
                (
                    this.TimeEntry == input.TimeEntry ||
                    (this.TimeEntry != null &&
                    this.TimeEntry.Equals(input.TimeEntry))
                ) && 
                (
                    this.TimeEntryInvitationId == input.TimeEntryInvitationId ||
                    (this.TimeEntryInvitationId != null &&
                    this.TimeEntryInvitationId.Equals(input.TimeEntryInvitationId))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SharedByUserId != null)
                    hashCode = hashCode * 59 + this.SharedByUserId.GetHashCode();
                if (this.SharedByUserName != null)
                    hashCode = hashCode * 59 + this.SharedByUserName.GetHashCode();
                if (this.TimeEntry != null)
                    hashCode = hashCode * 59 + this.TimeEntry.GetHashCode();
                if (this.TimeEntryInvitationId != null)
                    hashCode = hashCode * 59 + this.TimeEntryInvitationId.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
