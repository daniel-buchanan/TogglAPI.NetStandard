/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsTrialInfo
    /// </summary>
    [DataContract]
    public partial class ModelsTrialInfo :  IEquatable<ModelsTrialInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsTrialInfo" /> class.
        /// </summary>
        /// <param name="canHaveTrial">CanHaveInitialTrial is true if neither the organization nor the owner has never had a trial before.</param>
        /// <param name="lastPricingPlanId">What was the previous plan before the trial.</param>
        /// <param name="nextPaymentDate">When the trial payment is due.</param>
        /// <param name="trial">Whether the organization&#39;s subscription is currently on trial.</param>
        /// <param name="trialAvailable">When a trial is available for this organization.</param>
        /// <param name="trialEndDate">When the trial ends.</param>
        public ModelsTrialInfo(bool? canHaveTrial = default(bool?), int? lastPricingPlanId = default(int?), string nextPaymentDate = default(string), bool? trial = default(bool?), bool? trialAvailable = default(bool?), string trialEndDate = default(string))
        {
            this.CanHaveTrial = canHaveTrial;
            this.LastPricingPlanId = lastPricingPlanId;
            this.NextPaymentDate = nextPaymentDate;
            this.Trial = trial;
            this.TrialAvailable = trialAvailable;
            this.TrialEndDate = trialEndDate;
        }
        
        /// <summary>
        /// CanHaveInitialTrial is true if neither the organization nor the owner has never had a trial before
        /// </summary>
        /// <value>CanHaveInitialTrial is true if neither the organization nor the owner has never had a trial before</value>
        [DataMember(Name="can_have_trial", EmitDefaultValue=false)]
        public bool? CanHaveTrial { get; set; }

        /// <summary>
        /// What was the previous plan before the trial
        /// </summary>
        /// <value>What was the previous plan before the trial</value>
        [DataMember(Name="last_pricing_plan_id", EmitDefaultValue=false)]
        public int? LastPricingPlanId { get; set; }

        /// <summary>
        /// When the trial payment is due
        /// </summary>
        /// <value>When the trial payment is due</value>
        [DataMember(Name="next_payment_date", EmitDefaultValue=false)]
        public string NextPaymentDate { get; set; }

        /// <summary>
        /// Whether the organization&#39;s subscription is currently on trial
        /// </summary>
        /// <value>Whether the organization&#39;s subscription is currently on trial</value>
        [DataMember(Name="trial", EmitDefaultValue=false)]
        public bool? Trial { get; set; }

        /// <summary>
        /// When a trial is available for this organization
        /// </summary>
        /// <value>When a trial is available for this organization</value>
        [DataMember(Name="trial_available", EmitDefaultValue=false)]
        public bool? TrialAvailable { get; set; }

        /// <summary>
        /// When the trial ends
        /// </summary>
        /// <value>When the trial ends</value>
        [DataMember(Name="trial_end_date", EmitDefaultValue=false)]
        public string TrialEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsTrialInfo {\n");
            sb.Append("  CanHaveTrial: ").Append(CanHaveTrial).Append("\n");
            sb.Append("  LastPricingPlanId: ").Append(LastPricingPlanId).Append("\n");
            sb.Append("  NextPaymentDate: ").Append(NextPaymentDate).Append("\n");
            sb.Append("  Trial: ").Append(Trial).Append("\n");
            sb.Append("  TrialAvailable: ").Append(TrialAvailable).Append("\n");
            sb.Append("  TrialEndDate: ").Append(TrialEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsTrialInfo);
        }

        /// <summary>
        /// Returns true if ModelsTrialInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsTrialInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsTrialInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanHaveTrial == input.CanHaveTrial ||
                    (this.CanHaveTrial != null &&
                    this.CanHaveTrial.Equals(input.CanHaveTrial))
                ) && 
                (
                    this.LastPricingPlanId == input.LastPricingPlanId ||
                    (this.LastPricingPlanId != null &&
                    this.LastPricingPlanId.Equals(input.LastPricingPlanId))
                ) && 
                (
                    this.NextPaymentDate == input.NextPaymentDate ||
                    (this.NextPaymentDate != null &&
                    this.NextPaymentDate.Equals(input.NextPaymentDate))
                ) && 
                (
                    this.Trial == input.Trial ||
                    (this.Trial != null &&
                    this.Trial.Equals(input.Trial))
                ) && 
                (
                    this.TrialAvailable == input.TrialAvailable ||
                    (this.TrialAvailable != null &&
                    this.TrialAvailable.Equals(input.TrialAvailable))
                ) && 
                (
                    this.TrialEndDate == input.TrialEndDate ||
                    (this.TrialEndDate != null &&
                    this.TrialEndDate.Equals(input.TrialEndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanHaveTrial != null)
                    hashCode = hashCode * 59 + this.CanHaveTrial.GetHashCode();
                if (this.LastPricingPlanId != null)
                    hashCode = hashCode * 59 + this.LastPricingPlanId.GetHashCode();
                if (this.NextPaymentDate != null)
                    hashCode = hashCode * 59 + this.NextPaymentDate.GetHashCode();
                if (this.Trial != null)
                    hashCode = hashCode * 59 + this.Trial.GetHashCode();
                if (this.TrialAvailable != null)
                    hashCode = hashCode * 59 + this.TrialAvailable.GetHashCode();
                if (this.TrialEndDate != null)
                    hashCode = hashCode * 59 + this.TrialEndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
