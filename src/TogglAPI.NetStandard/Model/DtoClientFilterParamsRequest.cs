/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// DtoClientFilterParamsRequest
    /// </summary>
    [DataContract]
    public partial class DtoClientFilterParamsRequest :  IEquatable<DtoClientFilterParamsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoClientFilterParamsRequest" /> class.
        /// </summary>
        /// <param name="ids">Client IDs for filtering..</param>
        /// <param name="name">Client name for filtering..</param>
        /// <param name="start">Start is the client ID cursor for pagination..</param>
        public DtoClientFilterParamsRequest(List<int?> ids = default(List<int?>), string name = default(string), int? start = default(int?))
        {
            this.Ids = ids;
            this.Name = name;
            this.Start = start;
        }
        
        /// <summary>
        /// Client IDs for filtering.
        /// </summary>
        /// <value>Client IDs for filtering.</value>
        [DataMember(Name="ids", EmitDefaultValue=false)]
        public List<int?> Ids { get; set; }

        /// <summary>
        /// Client name for filtering.
        /// </summary>
        /// <value>Client name for filtering.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Start is the client ID cursor for pagination.
        /// </summary>
        /// <value>Start is the client ID cursor for pagination.</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DtoClientFilterParamsRequest {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DtoClientFilterParamsRequest);
        }

        /// <summary>
        /// Returns true if DtoClientFilterParamsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DtoClientFilterParamsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DtoClientFilterParamsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
