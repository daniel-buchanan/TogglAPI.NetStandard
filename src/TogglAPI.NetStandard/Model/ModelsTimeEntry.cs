/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsTimeEntry
    /// </summary>
    [DataContract]
    public partial class ModelsTimeEntry :  IEquatable<ModelsTimeEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsTimeEntry" /> class.
        /// </summary>
        /// <param name="at">When was last updated.</param>
        /// <param name="billable">Whether the time entry is marked as billable.</param>
        /// <param name="clientName">Related entities meta fields - if requested.</param>
        /// <param name="description">Time Entry description, null if not provided at creation/update.</param>
        /// <param name="duration">Time entry duration. For running entries should be negative, preferable -1.</param>
        /// <param name="duronly">Used to create a TE with a duration but without a stop time, this field is deprecated for GET endpoints where the value will always be true..</param>
        /// <param name="id">Time Entry ID.</param>
        /// <param name="permissions">Permission list.</param>
        /// <param name="pid">Project ID, legacy field.</param>
        /// <param name="projectActive">projectActive.</param>
        /// <param name="projectColor">projectColor.</param>
        /// <param name="projectId">Project ID. Can be null if project was not provided or project was later deleted.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="serverDeletedAt">When was deleted, null if not deleted.</param>
        /// <param name="sharedWith">Indicates who the time entry has been shared with.</param>
        /// <param name="start">Start time in UTC.</param>
        /// <param name="stop">Stop time in UTC, can be null if it&#39;s still running or created with \&quot;duration\&quot; and \&quot;duronly\&quot; fields.</param>
        /// <param name="tagIds">Tag IDs, null if tags were not provided or were later deleted.</param>
        /// <param name="tags">Tag names, null if tags were not provided or were later deleted.</param>
        /// <param name="taskId">Task ID. Can be null if task was not provided or project was later deleted.</param>
        /// <param name="taskName">taskName.</param>
        /// <param name="tid">Task ID, legacy field.</param>
        /// <param name="uid">Time Entry creator ID, legacy field.</param>
        /// <param name="userAvatarUrl">userAvatarUrl.</param>
        /// <param name="userId">Time Entry creator ID.</param>
        /// <param name="userName">userName.</param>
        /// <param name="wid">Workspace ID, legacy field.</param>
        /// <param name="workspaceId">Workspace ID.</param>
        public ModelsTimeEntry(string at = default(string), bool? billable = default(bool?), string clientName = default(string), string description = default(string), long? duration = default(long?), bool? duronly = default(bool?), long? id = default(long?), List<string> permissions = default(List<string>), long? pid = default(long?), bool? projectActive = default(bool?), string projectColor = default(string), long? projectId = default(long?), string projectName = default(string), string serverDeletedAt = default(string), List<ModelsTimeEntrySharedWith> sharedWith = default(List<ModelsTimeEntrySharedWith>), string start = default(string), string stop = default(string), List<long?> tagIds = default(List<long?>), List<string> tags = default(List<string>), long? taskId = default(long?), string taskName = default(string), long? tid = default(long?), long? uid = default(long?), string userAvatarUrl = default(string), long? userId = default(long?), string userName = default(string), long? wid = default(long?), long? workspaceId = default(long?))
        {
            this.At = at;
            this.Billable = billable;
            this.ClientName = clientName;
            this.Description = description;
            this.Duration = duration;
            this.Duronly = duronly;
            this.Id = id;
            this.Permissions = permissions;
            this.Pid = pid;
            this.ProjectActive = projectActive;
            this.ProjectColor = projectColor;
            this.ProjectId = projectId;
            this.ProjectName = projectName;
            this.ServerDeletedAt = serverDeletedAt;
            this.SharedWith = sharedWith;
            this.Start = start;
            this.Stop = stop;
            this.TagIds = tagIds;
            this.Tags = tags;
            this.TaskId = taskId;
            this.TaskName = taskName;
            this.Tid = tid;
            this.Uid = uid;
            this.UserAvatarUrl = userAvatarUrl;
            this.UserId = userId;
            this.UserName = userName;
            this.Wid = wid;
            this.WorkspaceId = workspaceId;
        }
        
        /// <summary>
        /// When was last updated
        /// </summary>
        /// <value>When was last updated</value>
        [DataMember(Name="at", EmitDefaultValue=false)]
        public string At { get; set; }

        /// <summary>
        /// Whether the time entry is marked as billable
        /// </summary>
        /// <value>Whether the time entry is marked as billable</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Related entities meta fields - if requested
        /// </summary>
        /// <value>Related entities meta fields - if requested</value>
        [DataMember(Name="client_name", EmitDefaultValue=false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Time Entry description, null if not provided at creation/update
        /// </summary>
        /// <value>Time Entry description, null if not provided at creation/update</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Time entry duration. For running entries should be negative, preferable -1
        /// </summary>
        /// <value>Time entry duration. For running entries should be negative, preferable -1</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }

        /// <summary>
        /// Used to create a TE with a duration but without a stop time, this field is deprecated for GET endpoints where the value will always be true.
        /// </summary>
        /// <value>Used to create a TE with a duration but without a stop time, this field is deprecated for GET endpoints where the value will always be true.</value>
        [DataMember(Name="duronly", EmitDefaultValue=false)]
        public bool? Duronly { get; set; }

        /// <summary>
        /// Time Entry ID
        /// </summary>
        /// <value>Time Entry ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Permission list
        /// </summary>
        /// <value>Permission list</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Project ID, legacy field
        /// </summary>
        /// <value>Project ID, legacy field</value>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public long? Pid { get; set; }

        /// <summary>
        /// Gets or Sets ProjectActive
        /// </summary>
        [DataMember(Name="project_active", EmitDefaultValue=false)]
        public bool? ProjectActive { get; set; }

        /// <summary>
        /// Gets or Sets ProjectColor
        /// </summary>
        [DataMember(Name="project_color", EmitDefaultValue=false)]
        public string ProjectColor { get; set; }

        /// <summary>
        /// Project ID. Can be null if project was not provided or project was later deleted
        /// </summary>
        /// <value>Project ID. Can be null if project was not provided or project was later deleted</value>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="project_name", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// When was deleted, null if not deleted
        /// </summary>
        /// <value>When was deleted, null if not deleted</value>
        [DataMember(Name="server_deleted_at", EmitDefaultValue=false)]
        public string ServerDeletedAt { get; set; }

        /// <summary>
        /// Indicates who the time entry has been shared with
        /// </summary>
        /// <value>Indicates who the time entry has been shared with</value>
        [DataMember(Name="shared_with", EmitDefaultValue=false)]
        public List<ModelsTimeEntrySharedWith> SharedWith { get; set; }

        /// <summary>
        /// Start time in UTC
        /// </summary>
        /// <value>Start time in UTC</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Stop time in UTC, can be null if it&#39;s still running or created with \&quot;duration\&quot; and \&quot;duronly\&quot; fields
        /// </summary>
        /// <value>Stop time in UTC, can be null if it&#39;s still running or created with \&quot;duration\&quot; and \&quot;duronly\&quot; fields</value>
        [DataMember(Name="stop", EmitDefaultValue=false)]
        public string Stop { get; set; }

        /// <summary>
        /// Tag IDs, null if tags were not provided or were later deleted
        /// </summary>
        /// <value>Tag IDs, null if tags were not provided or were later deleted</value>
        [DataMember(Name="tag_ids", EmitDefaultValue=false)]
        public List<long?> TagIds { get; set; }

        /// <summary>
        /// Tag names, null if tags were not provided or were later deleted
        /// </summary>
        /// <value>Tag names, null if tags were not provided or were later deleted</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Task ID. Can be null if task was not provided or project was later deleted
        /// </summary>
        /// <value>Task ID. Can be null if task was not provided or project was later deleted</value>
        [DataMember(Name="task_id", EmitDefaultValue=false)]
        public long? TaskId { get; set; }

        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>
        [DataMember(Name="task_name", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Task ID, legacy field
        /// </summary>
        /// <value>Task ID, legacy field</value>
        [DataMember(Name="tid", EmitDefaultValue=false)]
        public long? Tid { get; set; }

        /// <summary>
        /// Time Entry creator ID, legacy field
        /// </summary>
        /// <value>Time Entry creator ID, legacy field</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public long? Uid { get; set; }

        /// <summary>
        /// Gets or Sets UserAvatarUrl
        /// </summary>
        [DataMember(Name="user_avatar_url", EmitDefaultValue=false)]
        public string UserAvatarUrl { get; set; }

        /// <summary>
        /// Time Entry creator ID
        /// </summary>
        /// <value>Time Entry creator ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Workspace ID, legacy field
        /// </summary>
        /// <value>Workspace ID, legacy field</value>
        [DataMember(Name="wid", EmitDefaultValue=false)]
        public long? Wid { get; set; }

        /// <summary>
        /// Workspace ID
        /// </summary>
        /// <value>Workspace ID</value>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public long? WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsTimeEntry {\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Duronly: ").Append(Duronly).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  ProjectActive: ").Append(ProjectActive).Append("\n");
            sb.Append("  ProjectColor: ").Append(ProjectColor).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ServerDeletedAt: ").Append(ServerDeletedAt).Append("\n");
            sb.Append("  SharedWith: ").Append(SharedWith).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  Tid: ").Append(Tid).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  UserAvatarUrl: ").Append(UserAvatarUrl).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Wid: ").Append(Wid).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsTimeEntry);
        }

        /// <summary>
        /// Returns true if ModelsTimeEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsTimeEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsTimeEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Duronly == input.Duronly ||
                    (this.Duronly != null &&
                    this.Duronly.Equals(input.Duronly))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.ProjectActive == input.ProjectActive ||
                    (this.ProjectActive != null &&
                    this.ProjectActive.Equals(input.ProjectActive))
                ) && 
                (
                    this.ProjectColor == input.ProjectColor ||
                    (this.ProjectColor != null &&
                    this.ProjectColor.Equals(input.ProjectColor))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.ServerDeletedAt == input.ServerDeletedAt ||
                    (this.ServerDeletedAt != null &&
                    this.ServerDeletedAt.Equals(input.ServerDeletedAt))
                ) && 
                (
                    this.SharedWith == input.SharedWith ||
                    this.SharedWith != null &&
                    this.SharedWith.SequenceEqual(input.SharedWith)
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Stop == input.Stop ||
                    (this.Stop != null &&
                    this.Stop.Equals(input.Stop))
                ) && 
                (
                    this.TagIds == input.TagIds ||
                    this.TagIds != null &&
                    this.TagIds.SequenceEqual(input.TagIds)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.Tid == input.Tid ||
                    (this.Tid != null &&
                    this.Tid.Equals(input.Tid))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.UserAvatarUrl == input.UserAvatarUrl ||
                    (this.UserAvatarUrl != null &&
                    this.UserAvatarUrl.Equals(input.UserAvatarUrl))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Wid == input.Wid ||
                    (this.Wid != null &&
                    this.Wid.Equals(input.Wid))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.At != null)
                    hashCode = hashCode * 59 + this.At.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.ClientName != null)
                    hashCode = hashCode * 59 + this.ClientName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Duronly != null)
                    hashCode = hashCode * 59 + this.Duronly.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Pid != null)
                    hashCode = hashCode * 59 + this.Pid.GetHashCode();
                if (this.ProjectActive != null)
                    hashCode = hashCode * 59 + this.ProjectActive.GetHashCode();
                if (this.ProjectColor != null)
                    hashCode = hashCode * 59 + this.ProjectColor.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.ServerDeletedAt != null)
                    hashCode = hashCode * 59 + this.ServerDeletedAt.GetHashCode();
                if (this.SharedWith != null)
                    hashCode = hashCode * 59 + this.SharedWith.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Stop != null)
                    hashCode = hashCode * 59 + this.Stop.GetHashCode();
                if (this.TagIds != null)
                    hashCode = hashCode * 59 + this.TagIds.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.Tid != null)
                    hashCode = hashCode * 59 + this.Tid.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.UserAvatarUrl != null)
                    hashCode = hashCode * 59 + this.UserAvatarUrl.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Wid != null)
                    hashCode = hashCode * 59 + this.Wid.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
