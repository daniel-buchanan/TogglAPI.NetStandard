/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// DetailedGroupedTimeEntry
    /// </summary>
    [DataContract]
    public partial class DetailedGroupedTimeEntry :  IEquatable<DetailedGroupedTimeEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedGroupedTimeEntry" /> class.
        /// </summary>
        /// <param name="billable">billable.</param>
        /// <param name="billableAmountInCents">billableAmountInCents.</param>
        /// <param name="clientName">clientName.</param>
        /// <param name="currency">currency.</param>
        /// <param name="description">description.</param>
        /// <param name="email">email.</param>
        /// <param name="hourlyRateInCents">hourlyRateInCents.</param>
        /// <param name="projectColor">projectColor.</param>
        /// <param name="projectHex">projectHex.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="rowNumber">rowNumber.</param>
        /// <param name="tagIds">tagIds.</param>
        /// <param name="tagNames">tagNames.</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="taskName">taskName.</param>
        /// <param name="timeEntries">timeEntries.</param>
        /// <param name="userId">userId.</param>
        /// <param name="username">username.</param>
        public DetailedGroupedTimeEntry(bool? billable = default(bool?), long? billableAmountInCents = default(long?), string clientName = default(string), string currency = default(string), string description = default(string), string email = default(string), long? hourlyRateInCents = default(long?), string projectColor = default(string), string projectHex = default(string), long? projectId = default(long?), string projectName = default(string), long? rowNumber = default(long?), List<long?> tagIds = default(List<long?>), List<string> tagNames = default(List<string>), long? taskId = default(long?), string taskName = default(string), List<DetailedSingleTimeEntry> timeEntries = default(List<DetailedSingleTimeEntry>), long? userId = default(long?), string username = default(string))
        {
            this.Billable = billable;
            this.BillableAmountInCents = billableAmountInCents;
            this.ClientName = clientName;
            this.Currency = currency;
            this.Description = description;
            this.Email = email;
            this.HourlyRateInCents = hourlyRateInCents;
            this.ProjectColor = projectColor;
            this.ProjectHex = projectHex;
            this.ProjectId = projectId;
            this.ProjectName = projectName;
            this.RowNumber = rowNumber;
            this.TagIds = tagIds;
            this.TagNames = tagNames;
            this.TaskId = taskId;
            this.TaskName = taskName;
            this.TimeEntries = timeEntries;
            this.UserId = userId;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets BillableAmountInCents
        /// </summary>
        [DataMember(Name="billable_amount_in_cents", EmitDefaultValue=false)]
        public long? BillableAmountInCents { get; set; }

        /// <summary>
        /// Gets or Sets ClientName
        /// </summary>
        [DataMember(Name="client_name", EmitDefaultValue=false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets HourlyRateInCents
        /// </summary>
        [DataMember(Name="hourly_rate_in_cents", EmitDefaultValue=false)]
        public long? HourlyRateInCents { get; set; }

        /// <summary>
        /// Gets or Sets ProjectColor
        /// </summary>
        [DataMember(Name="project_color", EmitDefaultValue=false)]
        public string ProjectColor { get; set; }

        /// <summary>
        /// Gets or Sets ProjectHex
        /// </summary>
        [DataMember(Name="project_hex", EmitDefaultValue=false)]
        public string ProjectHex { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="project_name", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets RowNumber
        /// </summary>
        [DataMember(Name="row_number", EmitDefaultValue=false)]
        public long? RowNumber { get; set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [DataMember(Name="tag_ids", EmitDefaultValue=false)]
        public List<long?> TagIds { get; set; }

        /// <summary>
        /// Gets or Sets TagNames
        /// </summary>
        [DataMember(Name="tag_names", EmitDefaultValue=false)]
        public List<string> TagNames { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="task_id", EmitDefaultValue=false)]
        public long? TaskId { get; set; }

        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>
        [DataMember(Name="task_name", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntries
        /// </summary>
        [DataMember(Name="time_entries", EmitDefaultValue=false)]
        public List<DetailedSingleTimeEntry> TimeEntries { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedGroupedTimeEntry {\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  BillableAmountInCents: ").Append(BillableAmountInCents).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  HourlyRateInCents: ").Append(HourlyRateInCents).Append("\n");
            sb.Append("  ProjectColor: ").Append(ProjectColor).Append("\n");
            sb.Append("  ProjectHex: ").Append(ProjectHex).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  RowNumber: ").Append(RowNumber).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  TagNames: ").Append(TagNames).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TimeEntries: ").Append(TimeEntries).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedGroupedTimeEntry);
        }

        /// <summary>
        /// Returns true if DetailedGroupedTimeEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedGroupedTimeEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedGroupedTimeEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.BillableAmountInCents == input.BillableAmountInCents ||
                    (this.BillableAmountInCents != null &&
                    this.BillableAmountInCents.Equals(input.BillableAmountInCents))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.HourlyRateInCents == input.HourlyRateInCents ||
                    (this.HourlyRateInCents != null &&
                    this.HourlyRateInCents.Equals(input.HourlyRateInCents))
                ) && 
                (
                    this.ProjectColor == input.ProjectColor ||
                    (this.ProjectColor != null &&
                    this.ProjectColor.Equals(input.ProjectColor))
                ) && 
                (
                    this.ProjectHex == input.ProjectHex ||
                    (this.ProjectHex != null &&
                    this.ProjectHex.Equals(input.ProjectHex))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.RowNumber == input.RowNumber ||
                    (this.RowNumber != null &&
                    this.RowNumber.Equals(input.RowNumber))
                ) && 
                (
                    this.TagIds == input.TagIds ||
                    this.TagIds != null &&
                    this.TagIds.SequenceEqual(input.TagIds)
                ) && 
                (
                    this.TagNames == input.TagNames ||
                    this.TagNames != null &&
                    this.TagNames.SequenceEqual(input.TagNames)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.TimeEntries == input.TimeEntries ||
                    this.TimeEntries != null &&
                    this.TimeEntries.SequenceEqual(input.TimeEntries)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.BillableAmountInCents != null)
                    hashCode = hashCode * 59 + this.BillableAmountInCents.GetHashCode();
                if (this.ClientName != null)
                    hashCode = hashCode * 59 + this.ClientName.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.HourlyRateInCents != null)
                    hashCode = hashCode * 59 + this.HourlyRateInCents.GetHashCode();
                if (this.ProjectColor != null)
                    hashCode = hashCode * 59 + this.ProjectColor.GetHashCode();
                if (this.ProjectHex != null)
                    hashCode = hashCode * 59 + this.ProjectHex.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.RowNumber != null)
                    hashCode = hashCode * 59 + this.RowNumber.GetHashCode();
                if (this.TagIds != null)
                    hashCode = hashCode * 59 + this.TagIds.GetHashCode();
                if (this.TagNames != null)
                    hashCode = hashCode * 59 + this.TagNames.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.TimeEntries != null)
                    hashCode = hashCode * 59 + this.TimeEntries.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
