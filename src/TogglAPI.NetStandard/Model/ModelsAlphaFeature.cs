/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsAlphaFeature
    /// </summary>
    [DataContract]
    public partial class ModelsAlphaFeature :  IEquatable<ModelsAlphaFeature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsAlphaFeature" /> class.
        /// </summary>
        /// <param name="alphaFeatureId">Feature ID.</param>
        /// <param name="code">Feature code.</param>
        /// <param name="deletedAt">Time of deletion, omitted if empty.</param>
        /// <param name="description">Feature description, omitted if empty.</param>
        /// <param name="enabled">Whether the feature is enabled.</param>
        public ModelsAlphaFeature(long? alphaFeatureId = default(long?), string code = default(string), string deletedAt = default(string), string description = default(string), bool? enabled = default(bool?))
        {
            this.AlphaFeatureId = alphaFeatureId;
            this.Code = code;
            this.DeletedAt = deletedAt;
            this.Description = description;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// Feature ID
        /// </summary>
        /// <value>Feature ID</value>
        [DataMember(Name="alpha_feature_id", EmitDefaultValue=false)]
        public long? AlphaFeatureId { get; set; }

        /// <summary>
        /// Feature code
        /// </summary>
        /// <value>Feature code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Time of deletion, omitted if empty
        /// </summary>
        /// <value>Time of deletion, omitted if empty</value>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public string DeletedAt { get; set; }

        /// <summary>
        /// Feature description, omitted if empty
        /// </summary>
        /// <value>Feature description, omitted if empty</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the feature is enabled
        /// </summary>
        /// <value>Whether the feature is enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsAlphaFeature {\n");
            sb.Append("  AlphaFeatureId: ").Append(AlphaFeatureId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsAlphaFeature);
        }

        /// <summary>
        /// Returns true if ModelsAlphaFeature instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsAlphaFeature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsAlphaFeature input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlphaFeatureId == input.AlphaFeatureId ||
                    (this.AlphaFeatureId != null &&
                    this.AlphaFeatureId.Equals(input.AlphaFeatureId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlphaFeatureId != null)
                    hashCode = hashCode * 59 + this.AlphaFeatureId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
