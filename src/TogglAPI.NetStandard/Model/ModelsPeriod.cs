/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsPeriod
    /// </summary>
    [DataContract]
    public partial class ModelsPeriod :  IEquatable<ModelsPeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsPeriod" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="finishedOn">finishedOn.</param>
        /// <param name="startedOn">startedOn.</param>
        /// <param name="subscriptionId">subscriptionId.</param>
        /// <param name="subscriptionPeriodId">subscriptionPeriodId.</param>
        /// <param name="trial">trial.</param>
        /// <param name="userCount">userCount.</param>
        public ModelsPeriod(string createdAt = default(string), string finishedOn = default(string), string startedOn = default(string), long? subscriptionId = default(long?), long? subscriptionPeriodId = default(long?), bool? trial = default(bool?), long? userCount = default(long?))
        {
            this.CreatedAt = createdAt;
            this.FinishedOn = finishedOn;
            this.StartedOn = startedOn;
            this.SubscriptionId = subscriptionId;
            this.SubscriptionPeriodId = subscriptionPeriodId;
            this.Trial = trial;
            this.UserCount = userCount;
        }
        
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets FinishedOn
        /// </summary>
        [DataMember(Name="finished_on", EmitDefaultValue=false)]
        public string FinishedOn { get; set; }

        /// <summary>
        /// Gets or Sets StartedOn
        /// </summary>
        [DataMember(Name="started_on", EmitDefaultValue=false)]
        public string StartedOn { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscription_id", EmitDefaultValue=false)]
        public long? SubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionPeriodId
        /// </summary>
        [DataMember(Name="subscription_period_id", EmitDefaultValue=false)]
        public long? SubscriptionPeriodId { get; set; }

        /// <summary>
        /// Gets or Sets Trial
        /// </summary>
        [DataMember(Name="trial", EmitDefaultValue=false)]
        public bool? Trial { get; set; }

        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name="user_count", EmitDefaultValue=false)]
        public long? UserCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsPeriod {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FinishedOn: ").Append(FinishedOn).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionPeriodId: ").Append(SubscriptionPeriodId).Append("\n");
            sb.Append("  Trial: ").Append(Trial).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsPeriod);
        }

        /// <summary>
        /// Returns true if ModelsPeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsPeriod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.FinishedOn == input.FinishedOn ||
                    (this.FinishedOn != null &&
                    this.FinishedOn.Equals(input.FinishedOn))
                ) && 
                (
                    this.StartedOn == input.StartedOn ||
                    (this.StartedOn != null &&
                    this.StartedOn.Equals(input.StartedOn))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.SubscriptionPeriodId == input.SubscriptionPeriodId ||
                    (this.SubscriptionPeriodId != null &&
                    this.SubscriptionPeriodId.Equals(input.SubscriptionPeriodId))
                ) && 
                (
                    this.Trial == input.Trial ||
                    (this.Trial != null &&
                    this.Trial.Equals(input.Trial))
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.FinishedOn != null)
                    hashCode = hashCode * 59 + this.FinishedOn.GetHashCode();
                if (this.StartedOn != null)
                    hashCode = hashCode * 59 + this.StartedOn.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                if (this.SubscriptionPeriodId != null)
                    hashCode = hashCode * 59 + this.SubscriptionPeriodId.GetHashCode();
                if (this.Trial != null)
                    hashCode = hashCode * 59 + this.Trial.GetHashCode();
                if (this.UserCount != null)
                    hashCode = hashCode * 59 + this.UserCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
