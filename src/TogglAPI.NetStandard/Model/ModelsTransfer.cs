/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsTransfer
    /// </summary>
    [DataContract]
    public partial class ModelsTransfer :  IEquatable<ModelsTransfer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsTransfer" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="currentOwnerAccepted">currentOwnerAccepted.</param>
        /// <param name="currentOwnerAnsweredAt">currentOwnerAnsweredAt.</param>
        /// <param name="currentOwnerId">currentOwnerId.</param>
        /// <param name="finishedAt">finishedAt.</param>
        /// <param name="newOwnerAccepted">newOwnerAccepted.</param>
        /// <param name="newOwnerAnsweredAt">newOwnerAnsweredAt.</param>
        /// <param name="newOwnerId">newOwnerId.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="outcomeName">outcomeName.</param>
        /// <param name="ownerTransferId">ownerTransferId.</param>
        /// <param name="requesterId">requesterId.</param>
        public ModelsTransfer(string createdAt = default(string), bool? currentOwnerAccepted = default(bool?), string currentOwnerAnsweredAt = default(string), int? currentOwnerId = default(int?), string finishedAt = default(string), bool? newOwnerAccepted = default(bool?), string newOwnerAnsweredAt = default(string), int? newOwnerId = default(int?), int? organizationId = default(int?), string outcomeName = default(string), int? ownerTransferId = default(int?), int? requesterId = default(int?))
        {
            this.CreatedAt = createdAt;
            this.CurrentOwnerAccepted = currentOwnerAccepted;
            this.CurrentOwnerAnsweredAt = currentOwnerAnsweredAt;
            this.CurrentOwnerId = currentOwnerId;
            this.FinishedAt = finishedAt;
            this.NewOwnerAccepted = newOwnerAccepted;
            this.NewOwnerAnsweredAt = newOwnerAnsweredAt;
            this.NewOwnerId = newOwnerId;
            this.OrganizationId = organizationId;
            this.OutcomeName = outcomeName;
            this.OwnerTransferId = ownerTransferId;
            this.RequesterId = requesterId;
        }
        
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentOwnerAccepted
        /// </summary>
        [DataMember(Name="current_owner_accepted", EmitDefaultValue=false)]
        public bool? CurrentOwnerAccepted { get; set; }

        /// <summary>
        /// Gets or Sets CurrentOwnerAnsweredAt
        /// </summary>
        [DataMember(Name="current_owner_answered_at", EmitDefaultValue=false)]
        public string CurrentOwnerAnsweredAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentOwnerId
        /// </summary>
        [DataMember(Name="current_owner_id", EmitDefaultValue=false)]
        public int? CurrentOwnerId { get; set; }

        /// <summary>
        /// Gets or Sets FinishedAt
        /// </summary>
        [DataMember(Name="finished_at", EmitDefaultValue=false)]
        public string FinishedAt { get; set; }

        /// <summary>
        /// Gets or Sets NewOwnerAccepted
        /// </summary>
        [DataMember(Name="new_owner_accepted", EmitDefaultValue=false)]
        public bool? NewOwnerAccepted { get; set; }

        /// <summary>
        /// Gets or Sets NewOwnerAnsweredAt
        /// </summary>
        [DataMember(Name="new_owner_answered_at", EmitDefaultValue=false)]
        public string NewOwnerAnsweredAt { get; set; }

        /// <summary>
        /// Gets or Sets NewOwnerId
        /// </summary>
        [DataMember(Name="new_owner_id", EmitDefaultValue=false)]
        public int? NewOwnerId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public int? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets OutcomeName
        /// </summary>
        [DataMember(Name="outcome_name", EmitDefaultValue=false)]
        public string OutcomeName { get; set; }

        /// <summary>
        /// Gets or Sets OwnerTransferId
        /// </summary>
        [DataMember(Name="owner_transfer_id", EmitDefaultValue=false)]
        public int? OwnerTransferId { get; set; }

        /// <summary>
        /// Gets or Sets RequesterId
        /// </summary>
        [DataMember(Name="requester_id", EmitDefaultValue=false)]
        public int? RequesterId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsTransfer {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrentOwnerAccepted: ").Append(CurrentOwnerAccepted).Append("\n");
            sb.Append("  CurrentOwnerAnsweredAt: ").Append(CurrentOwnerAnsweredAt).Append("\n");
            sb.Append("  CurrentOwnerId: ").Append(CurrentOwnerId).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  NewOwnerAccepted: ").Append(NewOwnerAccepted).Append("\n");
            sb.Append("  NewOwnerAnsweredAt: ").Append(NewOwnerAnsweredAt).Append("\n");
            sb.Append("  NewOwnerId: ").Append(NewOwnerId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OutcomeName: ").Append(OutcomeName).Append("\n");
            sb.Append("  OwnerTransferId: ").Append(OwnerTransferId).Append("\n");
            sb.Append("  RequesterId: ").Append(RequesterId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsTransfer);
        }

        /// <summary>
        /// Returns true if ModelsTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CurrentOwnerAccepted == input.CurrentOwnerAccepted ||
                    (this.CurrentOwnerAccepted != null &&
                    this.CurrentOwnerAccepted.Equals(input.CurrentOwnerAccepted))
                ) && 
                (
                    this.CurrentOwnerAnsweredAt == input.CurrentOwnerAnsweredAt ||
                    (this.CurrentOwnerAnsweredAt != null &&
                    this.CurrentOwnerAnsweredAt.Equals(input.CurrentOwnerAnsweredAt))
                ) && 
                (
                    this.CurrentOwnerId == input.CurrentOwnerId ||
                    (this.CurrentOwnerId != null &&
                    this.CurrentOwnerId.Equals(input.CurrentOwnerId))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.NewOwnerAccepted == input.NewOwnerAccepted ||
                    (this.NewOwnerAccepted != null &&
                    this.NewOwnerAccepted.Equals(input.NewOwnerAccepted))
                ) && 
                (
                    this.NewOwnerAnsweredAt == input.NewOwnerAnsweredAt ||
                    (this.NewOwnerAnsweredAt != null &&
                    this.NewOwnerAnsweredAt.Equals(input.NewOwnerAnsweredAt))
                ) && 
                (
                    this.NewOwnerId == input.NewOwnerId ||
                    (this.NewOwnerId != null &&
                    this.NewOwnerId.Equals(input.NewOwnerId))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OutcomeName == input.OutcomeName ||
                    (this.OutcomeName != null &&
                    this.OutcomeName.Equals(input.OutcomeName))
                ) && 
                (
                    this.OwnerTransferId == input.OwnerTransferId ||
                    (this.OwnerTransferId != null &&
                    this.OwnerTransferId.Equals(input.OwnerTransferId))
                ) && 
                (
                    this.RequesterId == input.RequesterId ||
                    (this.RequesterId != null &&
                    this.RequesterId.Equals(input.RequesterId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CurrentOwnerAccepted != null)
                    hashCode = hashCode * 59 + this.CurrentOwnerAccepted.GetHashCode();
                if (this.CurrentOwnerAnsweredAt != null)
                    hashCode = hashCode * 59 + this.CurrentOwnerAnsweredAt.GetHashCode();
                if (this.CurrentOwnerId != null)
                    hashCode = hashCode * 59 + this.CurrentOwnerId.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                if (this.NewOwnerAccepted != null)
                    hashCode = hashCode * 59 + this.NewOwnerAccepted.GetHashCode();
                if (this.NewOwnerAnsweredAt != null)
                    hashCode = hashCode * 59 + this.NewOwnerAnsweredAt.GetHashCode();
                if (this.NewOwnerId != null)
                    hashCode = hashCode * 59 + this.NewOwnerId.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.OutcomeName != null)
                    hashCode = hashCode * 59 + this.OutcomeName.GetHashCode();
                if (this.OwnerTransferId != null)
                    hashCode = hashCode * 59 + this.OwnerTransferId.GetHashCode();
                if (this.RequesterId != null)
                    hashCode = hashCode * 59 + this.RequesterId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
