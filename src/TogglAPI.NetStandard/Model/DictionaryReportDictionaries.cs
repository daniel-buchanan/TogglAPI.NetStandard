/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// DictionaryReportDictionaries
    /// </summary>
    [DataContract]
    public partial class DictionaryReportDictionaries :  IEquatable<DictionaryReportDictionaries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DictionaryReportDictionaries" /> class.
        /// </summary>
        /// <param name="clients">clients.</param>
        /// <param name="filters">Remove it after FlexQ release..</param>
        /// <param name="projects">projects.</param>
        /// <param name="tags">tags.</param>
        /// <param name="tasks">tasks.</param>
        /// <param name="userGroups">userGroups.</param>
        /// <param name="users">users.</param>
        public DictionaryReportDictionaries(DictionaryGeneralDictionary clients = default(DictionaryGeneralDictionary), DictionaryReportDictionariesData filters = default(DictionaryReportDictionariesData), DictionaryProjectDictionary projects = default(DictionaryProjectDictionary), DictionaryGeneralDictionary tags = default(DictionaryGeneralDictionary), DictionaryTaskDictionary tasks = default(DictionaryTaskDictionary), DictionaryGeneralDictionary userGroups = default(DictionaryGeneralDictionary), DictionaryUserDictionary users = default(DictionaryUserDictionary))
        {
            this.Clients = clients;
            this.Filters = filters;
            this.Projects = projects;
            this.Tags = tags;
            this.Tasks = tasks;
            this.UserGroups = userGroups;
            this.Users = users;
        }
        
        /// <summary>
        /// Gets or Sets Clients
        /// </summary>
        [DataMember(Name="clients", EmitDefaultValue=false)]
        public DictionaryGeneralDictionary Clients { get; set; }

        /// <summary>
        /// Remove it after FlexQ release.
        /// </summary>
        /// <value>Remove it after FlexQ release.</value>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public DictionaryReportDictionariesData Filters { get; set; }

        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public DictionaryProjectDictionary Projects { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public DictionaryGeneralDictionary Tags { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public DictionaryTaskDictionary Tasks { get; set; }

        /// <summary>
        /// Gets or Sets UserGroups
        /// </summary>
        [DataMember(Name="user_groups", EmitDefaultValue=false)]
        public DictionaryGeneralDictionary UserGroups { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public DictionaryUserDictionary Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DictionaryReportDictionaries {\n");
            sb.Append("  Clients: ").Append(Clients).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  UserGroups: ").Append(UserGroups).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DictionaryReportDictionaries);
        }

        /// <summary>
        /// Returns true if DictionaryReportDictionaries instances are equal
        /// </summary>
        /// <param name="input">Instance of DictionaryReportDictionaries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DictionaryReportDictionaries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Clients == input.Clients ||
                    (this.Clients != null &&
                    this.Clients.Equals(input.Clients))
                ) && 
                (
                    this.Filters == input.Filters ||
                    (this.Filters != null &&
                    this.Filters.Equals(input.Filters))
                ) && 
                (
                    this.Projects == input.Projects ||
                    (this.Projects != null &&
                    this.Projects.Equals(input.Projects))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    (this.Tasks != null &&
                    this.Tasks.Equals(input.Tasks))
                ) && 
                (
                    this.UserGroups == input.UserGroups ||
                    (this.UserGroups != null &&
                    this.UserGroups.Equals(input.UserGroups))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clients != null)
                    hashCode = hashCode * 59 + this.Clients.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.Projects != null)
                    hashCode = hashCode * 59 + this.Projects.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Tasks != null)
                    hashCode = hashCode * 59 + this.Tasks.GetHashCode();
                if (this.UserGroups != null)
                    hashCode = hashCode * 59 + this.UserGroups.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
