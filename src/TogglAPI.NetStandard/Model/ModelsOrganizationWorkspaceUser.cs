/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsOrganizationWorkspaceUser
    /// </summary>
    [DataContract]
    public partial class ModelsOrganizationWorkspaceUser :  IEquatable<ModelsOrganizationWorkspaceUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsOrganizationWorkspaceUser" /> class.
        /// </summary>
        /// <param name="active">Flag indicating if user accepted the invitation.</param>
        /// <param name="admin">Flag indicating if user is admin.</param>
        /// <param name="at">Timestamp of the last update.</param>
        /// <param name="avatarFileName">URL of avatar.</param>
        /// <param name="email">Email of the user.</param>
        /// <param name="groupIds">List of groups the user belongs to.</param>
        /// <param name="id">Identifier of the user inside workspace.</param>
        /// <param name="inactive">Flag indicating if user was deactivated by admin of the workspace.</param>
        /// <param name="invitationCode">internal.</param>
        /// <param name="inviteUrl">internal.</param>
        /// <param name="isDirect">Flag indicating if user is a direct member of the workspace (is not assigned to the workspace using the group).</param>
        /// <param name="labourCost">Labour cost assigned to the user.</param>
        /// <param name="name">Name of the user.</param>
        /// <param name="organizationAdmin">Flag indicating if user is admin inside organization.</param>
        /// <param name="rate">Rate assigned to the user.</param>
        /// <param name="rateLastUpdated">Timestamp of the last rate update.</param>
        /// <param name="role">Role of the user.</param>
        /// <param name="timezone">Timezone of the user.</param>
        /// <param name="userId">Global user identifier.</param>
        /// <param name="workingHoursInMinutes">Working hours value in minutes.</param>
        /// <param name="workspaceAdmin">Flag indicating if user is admin inside workspace.</param>
        /// <param name="workspaceId">Workspace identifier.</param>
        public ModelsOrganizationWorkspaceUser(bool? active = default(bool?), bool? admin = default(bool?), string at = default(string), string avatarFileName = default(string), string email = default(string), UtilsInt64Slice groupIds = default(UtilsInt64Slice), long? id = default(long?), bool? inactive = default(bool?), string invitationCode = default(string), string inviteUrl = default(string), bool? isDirect = default(bool?), long? labourCost = default(long?), string name = default(string), bool? organizationAdmin = default(bool?), decimal? rate = default(decimal?), string rateLastUpdated = default(string), string role = default(string), string timezone = default(string), long? userId = default(long?), long? workingHoursInMinutes = default(long?), bool? workspaceAdmin = default(bool?), long? workspaceId = default(long?))
        {
            this.Active = active;
            this.Admin = admin;
            this.At = at;
            this.AvatarFileName = avatarFileName;
            this.Email = email;
            this.GroupIds = groupIds;
            this.Id = id;
            this.Inactive = inactive;
            this.InvitationCode = invitationCode;
            this.InviteUrl = inviteUrl;
            this.IsDirect = isDirect;
            this.LabourCost = labourCost;
            this.Name = name;
            this.OrganizationAdmin = organizationAdmin;
            this.Rate = rate;
            this.RateLastUpdated = rateLastUpdated;
            this.Role = role;
            this.Timezone = timezone;
            this.UserId = userId;
            this.WorkingHoursInMinutes = workingHoursInMinutes;
            this.WorkspaceAdmin = workspaceAdmin;
            this.WorkspaceId = workspaceId;
        }
        
        /// <summary>
        /// Flag indicating if user accepted the invitation
        /// </summary>
        /// <value>Flag indicating if user accepted the invitation</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Flag indicating if user is admin
        /// </summary>
        /// <value>Flag indicating if user is admin</value>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public bool? Admin { get; set; }

        /// <summary>
        /// Timestamp of the last update
        /// </summary>
        /// <value>Timestamp of the last update</value>
        [DataMember(Name="at", EmitDefaultValue=false)]
        public string At { get; set; }

        /// <summary>
        /// URL of avatar
        /// </summary>
        /// <value>URL of avatar</value>
        [DataMember(Name="avatar_file_name", EmitDefaultValue=false)]
        public string AvatarFileName { get; set; }

        /// <summary>
        /// Email of the user
        /// </summary>
        /// <value>Email of the user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// List of groups the user belongs to
        /// </summary>
        /// <value>List of groups the user belongs to</value>
        [DataMember(Name="group_ids", EmitDefaultValue=false)]
        public UtilsInt64Slice GroupIds { get; set; }

        /// <summary>
        /// Identifier of the user inside workspace
        /// </summary>
        /// <value>Identifier of the user inside workspace</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Flag indicating if user was deactivated by admin of the workspace
        /// </summary>
        /// <value>Flag indicating if user was deactivated by admin of the workspace</value>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// internal
        /// </summary>
        /// <value>internal</value>
        [DataMember(Name="invitation_code", EmitDefaultValue=false)]
        public string InvitationCode { get; set; }

        /// <summary>
        /// internal
        /// </summary>
        /// <value>internal</value>
        [DataMember(Name="invite_url", EmitDefaultValue=false)]
        public string InviteUrl { get; set; }

        /// <summary>
        /// Flag indicating if user is a direct member of the workspace (is not assigned to the workspace using the group)
        /// </summary>
        /// <value>Flag indicating if user is a direct member of the workspace (is not assigned to the workspace using the group)</value>
        [DataMember(Name="is_direct", EmitDefaultValue=false)]
        public bool? IsDirect { get; set; }

        /// <summary>
        /// Labour cost assigned to the user
        /// </summary>
        /// <value>Labour cost assigned to the user</value>
        [DataMember(Name="labour_cost", EmitDefaultValue=false)]
        public long? LabourCost { get; set; }

        /// <summary>
        /// Name of the user
        /// </summary>
        /// <value>Name of the user</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Flag indicating if user is admin inside organization
        /// </summary>
        /// <value>Flag indicating if user is admin inside organization</value>
        [DataMember(Name="organization_admin", EmitDefaultValue=false)]
        public bool? OrganizationAdmin { get; set; }

        /// <summary>
        /// Rate assigned to the user
        /// </summary>
        /// <value>Rate assigned to the user</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Timestamp of the last rate update
        /// </summary>
        /// <value>Timestamp of the last rate update</value>
        [DataMember(Name="rate_last_updated", EmitDefaultValue=false)]
        public string RateLastUpdated { get; set; }

        /// <summary>
        /// Role of the user
        /// </summary>
        /// <value>Role of the user</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Timezone of the user
        /// </summary>
        /// <value>Timezone of the user</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Global user identifier
        /// </summary>
        /// <value>Global user identifier</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Working hours value in minutes
        /// </summary>
        /// <value>Working hours value in minutes</value>
        [DataMember(Name="working_hours_in_minutes", EmitDefaultValue=false)]
        public long? WorkingHoursInMinutes { get; set; }

        /// <summary>
        /// Flag indicating if user is admin inside workspace
        /// </summary>
        /// <value>Flag indicating if user is admin inside workspace</value>
        [DataMember(Name="workspace_admin", EmitDefaultValue=false)]
        public bool? WorkspaceAdmin { get; set; }

        /// <summary>
        /// Workspace identifier
        /// </summary>
        /// <value>Workspace identifier</value>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public long? WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsOrganizationWorkspaceUser {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  AvatarFileName: ").Append(AvatarFileName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  InvitationCode: ").Append(InvitationCode).Append("\n");
            sb.Append("  InviteUrl: ").Append(InviteUrl).Append("\n");
            sb.Append("  IsDirect: ").Append(IsDirect).Append("\n");
            sb.Append("  LabourCost: ").Append(LabourCost).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationAdmin: ").Append(OrganizationAdmin).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateLastUpdated: ").Append(RateLastUpdated).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WorkingHoursInMinutes: ").Append(WorkingHoursInMinutes).Append("\n");
            sb.Append("  WorkspaceAdmin: ").Append(WorkspaceAdmin).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsOrganizationWorkspaceUser);
        }

        /// <summary>
        /// Returns true if ModelsOrganizationWorkspaceUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsOrganizationWorkspaceUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsOrganizationWorkspaceUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.AvatarFileName == input.AvatarFileName ||
                    (this.AvatarFileName != null &&
                    this.AvatarFileName.Equals(input.AvatarFileName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.GroupIds == input.GroupIds ||
                    (this.GroupIds != null &&
                    this.GroupIds.Equals(input.GroupIds))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                ) && 
                (
                    this.InvitationCode == input.InvitationCode ||
                    (this.InvitationCode != null &&
                    this.InvitationCode.Equals(input.InvitationCode))
                ) && 
                (
                    this.InviteUrl == input.InviteUrl ||
                    (this.InviteUrl != null &&
                    this.InviteUrl.Equals(input.InviteUrl))
                ) && 
                (
                    this.IsDirect == input.IsDirect ||
                    (this.IsDirect != null &&
                    this.IsDirect.Equals(input.IsDirect))
                ) && 
                (
                    this.LabourCost == input.LabourCost ||
                    (this.LabourCost != null &&
                    this.LabourCost.Equals(input.LabourCost))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrganizationAdmin == input.OrganizationAdmin ||
                    (this.OrganizationAdmin != null &&
                    this.OrganizationAdmin.Equals(input.OrganizationAdmin))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RateLastUpdated == input.RateLastUpdated ||
                    (this.RateLastUpdated != null &&
                    this.RateLastUpdated.Equals(input.RateLastUpdated))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.WorkingHoursInMinutes == input.WorkingHoursInMinutes ||
                    (this.WorkingHoursInMinutes != null &&
                    this.WorkingHoursInMinutes.Equals(input.WorkingHoursInMinutes))
                ) && 
                (
                    this.WorkspaceAdmin == input.WorkspaceAdmin ||
                    (this.WorkspaceAdmin != null &&
                    this.WorkspaceAdmin.Equals(input.WorkspaceAdmin))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.At != null)
                    hashCode = hashCode * 59 + this.At.GetHashCode();
                if (this.AvatarFileName != null)
                    hashCode = hashCode * 59 + this.AvatarFileName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.GroupIds != null)
                    hashCode = hashCode * 59 + this.GroupIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                if (this.InvitationCode != null)
                    hashCode = hashCode * 59 + this.InvitationCode.GetHashCode();
                if (this.InviteUrl != null)
                    hashCode = hashCode * 59 + this.InviteUrl.GetHashCode();
                if (this.IsDirect != null)
                    hashCode = hashCode * 59 + this.IsDirect.GetHashCode();
                if (this.LabourCost != null)
                    hashCode = hashCode * 59 + this.LabourCost.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrganizationAdmin != null)
                    hashCode = hashCode * 59 + this.OrganizationAdmin.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RateLastUpdated != null)
                    hashCode = hashCode * 59 + this.RateLastUpdated.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.WorkingHoursInMinutes != null)
                    hashCode = hashCode * 59 + this.WorkingHoursInMinutes.GetHashCode();
                if (this.WorkspaceAdmin != null)
                    hashCode = hashCode * 59 + this.WorkspaceAdmin.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
