/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsWorkspacePreferences
    /// </summary>
    [DataContract]
    public partial class ModelsWorkspacePreferences :  IEquatable<ModelsWorkspacePreferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsWorkspacePreferences" /> class.
        /// </summary>
        /// <param name="annualMasterCampaign2018">Legacy field.</param>
        /// <param name="hideStartEndTimes">This workspace works with duration only time entries.</param>
        /// <param name="incTosAcceptedAt">Time of acceptance of the terms of service.</param>
        /// <param name="incTosAcceptedBy">User ID who accepted the terms of service.</param>
        /// <param name="initialPricingPlan">Pricing plan ID.</param>
        /// <param name="january2018Campaign">Legacy field.</param>
        /// <param name="masterSignup">Legacy field.</param>
        /// <param name="reportLockedAt">Date on which \&quot;Lock Time Entries\&quot; feature was enabled.</param>
        /// <param name="singleSignOn">Whether SSO is enabled for this workspace.</param>
        /// <param name="ssoRequestedAt">Date on which SSO was requested.</param>
        public ModelsWorkspacePreferences(string annualMasterCampaign2018 = default(string), bool? hideStartEndTimes = default(bool?), string incTosAcceptedAt = default(string), long? incTosAcceptedBy = default(long?), long? initialPricingPlan = default(long?), bool? january2018Campaign = default(bool?), bool? masterSignup = default(bool?), string reportLockedAt = default(string), bool? singleSignOn = default(bool?), string ssoRequestedAt = default(string))
        {
            this.AnnualMasterCampaign2018 = annualMasterCampaign2018;
            this.HideStartEndTimes = hideStartEndTimes;
            this.IncTosAcceptedAt = incTosAcceptedAt;
            this.IncTosAcceptedBy = incTosAcceptedBy;
            this.InitialPricingPlan = initialPricingPlan;
            this.January2018Campaign = january2018Campaign;
            this.MasterSignup = masterSignup;
            this.ReportLockedAt = reportLockedAt;
            this.SingleSignOn = singleSignOn;
            this.SsoRequestedAt = ssoRequestedAt;
        }
        
        /// <summary>
        /// Legacy field
        /// </summary>
        /// <value>Legacy field</value>
        [DataMember(Name="annual-master-campaign-2018", EmitDefaultValue=false)]
        public string AnnualMasterCampaign2018 { get; set; }

        /// <summary>
        /// This workspace works with duration only time entries
        /// </summary>
        /// <value>This workspace works with duration only time entries</value>
        [DataMember(Name="hide_start_end_times", EmitDefaultValue=false)]
        public bool? HideStartEndTimes { get; set; }

        /// <summary>
        /// Time of acceptance of the terms of service
        /// </summary>
        /// <value>Time of acceptance of the terms of service</value>
        [DataMember(Name="inc_tos_accepted_at", EmitDefaultValue=false)]
        public string IncTosAcceptedAt { get; set; }

        /// <summary>
        /// User ID who accepted the terms of service
        /// </summary>
        /// <value>User ID who accepted the terms of service</value>
        [DataMember(Name="inc_tos_accepted_by", EmitDefaultValue=false)]
        public long? IncTosAcceptedBy { get; set; }

        /// <summary>
        /// Pricing plan ID
        /// </summary>
        /// <value>Pricing plan ID</value>
        [DataMember(Name="initial_pricing_plan", EmitDefaultValue=false)]
        public long? InitialPricingPlan { get; set; }

        /// <summary>
        /// Legacy field
        /// </summary>
        /// <value>Legacy field</value>
        [DataMember(Name="january-2018-campaign", EmitDefaultValue=false)]
        public bool? January2018Campaign { get; set; }

        /// <summary>
        /// Legacy field
        /// </summary>
        /// <value>Legacy field</value>
        [DataMember(Name="master_signup", EmitDefaultValue=false)]
        public bool? MasterSignup { get; set; }

        /// <summary>
        /// Date on which \&quot;Lock Time Entries\&quot; feature was enabled
        /// </summary>
        /// <value>Date on which \&quot;Lock Time Entries\&quot; feature was enabled</value>
        [DataMember(Name="report_locked_at", EmitDefaultValue=false)]
        public string ReportLockedAt { get; set; }

        /// <summary>
        /// Whether SSO is enabled for this workspace
        /// </summary>
        /// <value>Whether SSO is enabled for this workspace</value>
        [DataMember(Name="single_sign_on", EmitDefaultValue=false)]
        public bool? SingleSignOn { get; set; }

        /// <summary>
        /// Date on which SSO was requested
        /// </summary>
        /// <value>Date on which SSO was requested</value>
        [DataMember(Name="sso_requested_at", EmitDefaultValue=false)]
        public string SsoRequestedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsWorkspacePreferences {\n");
            sb.Append("  AnnualMasterCampaign2018: ").Append(AnnualMasterCampaign2018).Append("\n");
            sb.Append("  HideStartEndTimes: ").Append(HideStartEndTimes).Append("\n");
            sb.Append("  IncTosAcceptedAt: ").Append(IncTosAcceptedAt).Append("\n");
            sb.Append("  IncTosAcceptedBy: ").Append(IncTosAcceptedBy).Append("\n");
            sb.Append("  InitialPricingPlan: ").Append(InitialPricingPlan).Append("\n");
            sb.Append("  January2018Campaign: ").Append(January2018Campaign).Append("\n");
            sb.Append("  MasterSignup: ").Append(MasterSignup).Append("\n");
            sb.Append("  ReportLockedAt: ").Append(ReportLockedAt).Append("\n");
            sb.Append("  SingleSignOn: ").Append(SingleSignOn).Append("\n");
            sb.Append("  SsoRequestedAt: ").Append(SsoRequestedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsWorkspacePreferences);
        }

        /// <summary>
        /// Returns true if ModelsWorkspacePreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsWorkspacePreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsWorkspacePreferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnnualMasterCampaign2018 == input.AnnualMasterCampaign2018 ||
                    (this.AnnualMasterCampaign2018 != null &&
                    this.AnnualMasterCampaign2018.Equals(input.AnnualMasterCampaign2018))
                ) && 
                (
                    this.HideStartEndTimes == input.HideStartEndTimes ||
                    (this.HideStartEndTimes != null &&
                    this.HideStartEndTimes.Equals(input.HideStartEndTimes))
                ) && 
                (
                    this.IncTosAcceptedAt == input.IncTosAcceptedAt ||
                    (this.IncTosAcceptedAt != null &&
                    this.IncTosAcceptedAt.Equals(input.IncTosAcceptedAt))
                ) && 
                (
                    this.IncTosAcceptedBy == input.IncTosAcceptedBy ||
                    (this.IncTosAcceptedBy != null &&
                    this.IncTosAcceptedBy.Equals(input.IncTosAcceptedBy))
                ) && 
                (
                    this.InitialPricingPlan == input.InitialPricingPlan ||
                    (this.InitialPricingPlan != null &&
                    this.InitialPricingPlan.Equals(input.InitialPricingPlan))
                ) && 
                (
                    this.January2018Campaign == input.January2018Campaign ||
                    (this.January2018Campaign != null &&
                    this.January2018Campaign.Equals(input.January2018Campaign))
                ) && 
                (
                    this.MasterSignup == input.MasterSignup ||
                    (this.MasterSignup != null &&
                    this.MasterSignup.Equals(input.MasterSignup))
                ) && 
                (
                    this.ReportLockedAt == input.ReportLockedAt ||
                    (this.ReportLockedAt != null &&
                    this.ReportLockedAt.Equals(input.ReportLockedAt))
                ) && 
                (
                    this.SingleSignOn == input.SingleSignOn ||
                    (this.SingleSignOn != null &&
                    this.SingleSignOn.Equals(input.SingleSignOn))
                ) && 
                (
                    this.SsoRequestedAt == input.SsoRequestedAt ||
                    (this.SsoRequestedAt != null &&
                    this.SsoRequestedAt.Equals(input.SsoRequestedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnnualMasterCampaign2018 != null)
                    hashCode = hashCode * 59 + this.AnnualMasterCampaign2018.GetHashCode();
                if (this.HideStartEndTimes != null)
                    hashCode = hashCode * 59 + this.HideStartEndTimes.GetHashCode();
                if (this.IncTosAcceptedAt != null)
                    hashCode = hashCode * 59 + this.IncTosAcceptedAt.GetHashCode();
                if (this.IncTosAcceptedBy != null)
                    hashCode = hashCode * 59 + this.IncTosAcceptedBy.GetHashCode();
                if (this.InitialPricingPlan != null)
                    hashCode = hashCode * 59 + this.InitialPricingPlan.GetHashCode();
                if (this.January2018Campaign != null)
                    hashCode = hashCode * 59 + this.January2018Campaign.GetHashCode();
                if (this.MasterSignup != null)
                    hashCode = hashCode * 59 + this.MasterSignup.GetHashCode();
                if (this.ReportLockedAt != null)
                    hashCode = hashCode * 59 + this.ReportLockedAt.GetHashCode();
                if (this.SingleSignOn != null)
                    hashCode = hashCode * 59 + this.SingleSignOn.GetHashCode();
                if (this.SsoRequestedAt != null)
                    hashCode = hashCode * 59 + this.SsoRequestedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
