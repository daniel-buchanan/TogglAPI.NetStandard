/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// PurchaseordersPayload
    /// </summary>
    [DataContract]
    public partial class PurchaseordersPayload :  IEquatable<PurchaseordersPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseordersPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PurchaseordersPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseordersPayload" /> class.
        /// </summary>
        /// <param name="userCount">userCount (required).</param>
        public PurchaseordersPayload(int? userCount = default(int?))
        {
            // to ensure "userCount" is required (not null)
            if (userCount == null)
            {
                throw new InvalidDataException("userCount is a required property for PurchaseordersPayload and cannot be null");
            }
            else
            {
                this.UserCount = userCount;
            }
        }
        
        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name="user_count", EmitDefaultValue=false)]
        public int? UserCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseordersPayload {\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseordersPayload);
        }

        /// <summary>
        /// Returns true if PurchaseordersPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseordersPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseordersPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserCount != null)
                    hashCode = hashCode * 59 + this.UserCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserCount (int?) minimum
            if(this.UserCount < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserCount, must be a value greater than or equal to 1.", new [] { "UserCount" });
            }

            yield break;
        }
    }

}
