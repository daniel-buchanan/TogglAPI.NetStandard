/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// SavedReportOutput
    /// </summary>
    [DataContract]
    public partial class SavedReportOutput :  IEquatable<SavedReportOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SavedReportOutput" /> class.
        /// </summary>
        /// <param name="detailedResults">detailedResults.</param>
        /// <param name="dictionaries">dictionaries.</param>
        /// <param name="features">features.</param>
        /// <param name="fixedDaterange">fixedDaterange.</param>
        /// <param name="hideAmounts">hideAmounts.</param>
        /// <param name="inputParams">inputParams.</param>
        /// <param name="_public">_public.</param>
        /// <param name="reportName">reportName.</param>
        /// <param name="reportType">reportType.</param>
        /// <param name="savedParams">savedParams.</param>
        /// <param name="summaryResults">summaryResults.</param>
        /// <param name="weeklyResults">weeklyResults.</param>
        /// <param name="workspaceLogo">workspaceLogo.</param>
        public SavedReportOutput(SavedDetailedReportData detailedResults = default(SavedDetailedReportData), DictionaryReportDictionaries dictionaries = default(DictionaryReportDictionaries), Dictionary<string, bool?> features = default(Dictionary<string, bool?>), bool? fixedDaterange = default(bool?), bool? hideAmounts = default(bool?), Dictionary<string, object> inputParams = default(Dictionary<string, object>), bool? _public = default(bool?), string reportName = default(string), string reportType = default(string), Dictionary<string, object> savedParams = default(Dictionary<string, object>), SavedSummaryReportData summaryResults = default(SavedSummaryReportData), SavedWeeklyReportData weeklyResults = default(SavedWeeklyReportData), string workspaceLogo = default(string))
        {
            this.DetailedResults = detailedResults;
            this.Dictionaries = dictionaries;
            this.Features = features;
            this.FixedDaterange = fixedDaterange;
            this.HideAmounts = hideAmounts;
            this.InputParams = inputParams;
            this.Public = _public;
            this.ReportName = reportName;
            this.ReportType = reportType;
            this.SavedParams = savedParams;
            this.SummaryResults = summaryResults;
            this.WeeklyResults = weeklyResults;
            this.WorkspaceLogo = workspaceLogo;
        }
        
        /// <summary>
        /// Gets or Sets DetailedResults
        /// </summary>
        [DataMember(Name="detailed_results", EmitDefaultValue=false)]
        public SavedDetailedReportData DetailedResults { get; set; }

        /// <summary>
        /// Gets or Sets Dictionaries
        /// </summary>
        [DataMember(Name="dictionaries", EmitDefaultValue=false)]
        public DictionaryReportDictionaries Dictionaries { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public Dictionary<string, bool?> Features { get; set; }

        /// <summary>
        /// Gets or Sets FixedDaterange
        /// </summary>
        [DataMember(Name="fixed_daterange", EmitDefaultValue=false)]
        public bool? FixedDaterange { get; set; }

        /// <summary>
        /// Gets or Sets HideAmounts
        /// </summary>
        [DataMember(Name="hide_amounts", EmitDefaultValue=false)]
        public bool? HideAmounts { get; set; }

        /// <summary>
        /// Gets or Sets InputParams
        /// </summary>
        [DataMember(Name="input_params", EmitDefaultValue=false)]
        public Dictionary<string, object> InputParams { get; set; }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool? Public { get; set; }

        /// <summary>
        /// Gets or Sets ReportName
        /// </summary>
        [DataMember(Name="report_name", EmitDefaultValue=false)]
        public string ReportName { get; set; }

        /// <summary>
        /// Gets or Sets ReportType
        /// </summary>
        [DataMember(Name="report_type", EmitDefaultValue=false)]
        public string ReportType { get; set; }

        /// <summary>
        /// Gets or Sets SavedParams
        /// </summary>
        [DataMember(Name="saved_params", EmitDefaultValue=false)]
        public Dictionary<string, object> SavedParams { get; set; }

        /// <summary>
        /// Gets or Sets SummaryResults
        /// </summary>
        [DataMember(Name="summary_results", EmitDefaultValue=false)]
        public SavedSummaryReportData SummaryResults { get; set; }

        /// <summary>
        /// Gets or Sets WeeklyResults
        /// </summary>
        [DataMember(Name="weekly_results", EmitDefaultValue=false)]
        public SavedWeeklyReportData WeeklyResults { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceLogo
        /// </summary>
        [DataMember(Name="workspace_logo", EmitDefaultValue=false)]
        public string WorkspaceLogo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SavedReportOutput {\n");
            sb.Append("  DetailedResults: ").Append(DetailedResults).Append("\n");
            sb.Append("  Dictionaries: ").Append(Dictionaries).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  FixedDaterange: ").Append(FixedDaterange).Append("\n");
            sb.Append("  HideAmounts: ").Append(HideAmounts).Append("\n");
            sb.Append("  InputParams: ").Append(InputParams).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  SavedParams: ").Append(SavedParams).Append("\n");
            sb.Append("  SummaryResults: ").Append(SummaryResults).Append("\n");
            sb.Append("  WeeklyResults: ").Append(WeeklyResults).Append("\n");
            sb.Append("  WorkspaceLogo: ").Append(WorkspaceLogo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SavedReportOutput);
        }

        /// <summary>
        /// Returns true if SavedReportOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of SavedReportOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedReportOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DetailedResults == input.DetailedResults ||
                    (this.DetailedResults != null &&
                    this.DetailedResults.Equals(input.DetailedResults))
                ) && 
                (
                    this.Dictionaries == input.Dictionaries ||
                    (this.Dictionaries != null &&
                    this.Dictionaries.Equals(input.Dictionaries))
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.FixedDaterange == input.FixedDaterange ||
                    (this.FixedDaterange != null &&
                    this.FixedDaterange.Equals(input.FixedDaterange))
                ) && 
                (
                    this.HideAmounts == input.HideAmounts ||
                    (this.HideAmounts != null &&
                    this.HideAmounts.Equals(input.HideAmounts))
                ) && 
                (
                    this.InputParams == input.InputParams ||
                    this.InputParams != null &&
                    this.InputParams.SequenceEqual(input.InputParams)
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.ReportName == input.ReportName ||
                    (this.ReportName != null &&
                    this.ReportName.Equals(input.ReportName))
                ) && 
                (
                    this.ReportType == input.ReportType ||
                    (this.ReportType != null &&
                    this.ReportType.Equals(input.ReportType))
                ) && 
                (
                    this.SavedParams == input.SavedParams ||
                    this.SavedParams != null &&
                    this.SavedParams.SequenceEqual(input.SavedParams)
                ) && 
                (
                    this.SummaryResults == input.SummaryResults ||
                    (this.SummaryResults != null &&
                    this.SummaryResults.Equals(input.SummaryResults))
                ) && 
                (
                    this.WeeklyResults == input.WeeklyResults ||
                    (this.WeeklyResults != null &&
                    this.WeeklyResults.Equals(input.WeeklyResults))
                ) && 
                (
                    this.WorkspaceLogo == input.WorkspaceLogo ||
                    (this.WorkspaceLogo != null &&
                    this.WorkspaceLogo.Equals(input.WorkspaceLogo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetailedResults != null)
                    hashCode = hashCode * 59 + this.DetailedResults.GetHashCode();
                if (this.Dictionaries != null)
                    hashCode = hashCode * 59 + this.Dictionaries.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.FixedDaterange != null)
                    hashCode = hashCode * 59 + this.FixedDaterange.GetHashCode();
                if (this.HideAmounts != null)
                    hashCode = hashCode * 59 + this.HideAmounts.GetHashCode();
                if (this.InputParams != null)
                    hashCode = hashCode * 59 + this.InputParams.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.ReportName != null)
                    hashCode = hashCode * 59 + this.ReportName.GetHashCode();
                if (this.ReportType != null)
                    hashCode = hashCode * 59 + this.ReportType.GetHashCode();
                if (this.SavedParams != null)
                    hashCode = hashCode * 59 + this.SavedParams.GetHashCode();
                if (this.SummaryResults != null)
                    hashCode = hashCode * 59 + this.SummaryResults.GetHashCode();
                if (this.WeeklyResults != null)
                    hashCode = hashCode * 59 + this.WeeklyResults.GetHashCode();
                if (this.WorkspaceLogo != null)
                    hashCode = hashCode * 59 + this.WorkspaceLogo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
