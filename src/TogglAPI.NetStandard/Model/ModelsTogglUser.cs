/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsTogglUser
    /// </summary>
    [DataContract]
    public partial class ModelsTogglUser :  IEquatable<ModelsTogglUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsTogglUser" /> class.
        /// </summary>
        /// <param name="apiToken">will be omitted if empty.</param>
        /// <param name="at">at.</param>
        /// <param name="beginningOfWeek">beginningOfWeek.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="defaultWorkspaceId">defaultWorkspaceId.</param>
        /// <param name="email">email.</param>
        /// <param name="fullname">fullname.</param>
        /// <param name="hasPassword">hasPassword.</param>
        /// <param name="id">id.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="openidEmail">openidEmail.</param>
        /// <param name="openidEnabled">openidEnabled.</param>
        /// <param name="options">will be omitted if empty.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public ModelsTogglUser(string apiToken = default(string), DateTime? at = default(DateTime?), int? beginningOfWeek = default(int?), int? countryId = default(int?), DateTime? createdAt = default(DateTime?), int? defaultWorkspaceId = default(int?), string email = default(string), string fullname = default(string), bool? hasPassword = default(bool?), int? id = default(int?), string imageUrl = default(string), string openidEmail = default(string), bool? openidEnabled = default(bool?), ModelsOptions options = default(ModelsOptions), string timezone = default(string), DateTime? updatedAt = default(DateTime?))
        {
            this.ApiToken = apiToken;
            this.At = at;
            this.BeginningOfWeek = beginningOfWeek;
            this.CountryId = countryId;
            this.CreatedAt = createdAt;
            this.DefaultWorkspaceId = defaultWorkspaceId;
            this.Email = email;
            this.Fullname = fullname;
            this.HasPassword = hasPassword;
            this.Id = id;
            this.ImageUrl = imageUrl;
            this.OpenidEmail = openidEmail;
            this.OpenidEnabled = openidEnabled;
            this.Options = options;
            this.Timezone = timezone;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="api_token", EmitDefaultValue=false)]
        public string ApiToken { get; set; }

        /// <summary>
        /// Gets or Sets At
        /// </summary>
        [DataMember(Name="at", EmitDefaultValue=false)]
        public DateTime? At { get; set; }

        /// <summary>
        /// Gets or Sets BeginningOfWeek
        /// </summary>
        [DataMember(Name="beginning_of_week", EmitDefaultValue=false)]
        public int? BeginningOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name="country_id", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DefaultWorkspaceId
        /// </summary>
        [DataMember(Name="default_workspace_id", EmitDefaultValue=false)]
        public int? DefaultWorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Fullname
        /// </summary>
        [DataMember(Name="fullname", EmitDefaultValue=false)]
        public string Fullname { get; set; }

        /// <summary>
        /// Gets or Sets HasPassword
        /// </summary>
        [DataMember(Name="has_password", EmitDefaultValue=false)]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets OpenidEmail
        /// </summary>
        [DataMember(Name="openid_email", EmitDefaultValue=false)]
        public string OpenidEmail { get; set; }

        /// <summary>
        /// Gets or Sets OpenidEnabled
        /// </summary>
        [DataMember(Name="openid_enabled", EmitDefaultValue=false)]
        public bool? OpenidEnabled { get; set; }

        /// <summary>
        /// will be omitted if empty
        /// </summary>
        /// <value>will be omitted if empty</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public ModelsOptions Options { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsTogglUser {\n");
            sb.Append("  ApiToken: ").Append(ApiToken).Append("\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  BeginningOfWeek: ").Append(BeginningOfWeek).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DefaultWorkspaceId: ").Append(DefaultWorkspaceId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  OpenidEmail: ").Append(OpenidEmail).Append("\n");
            sb.Append("  OpenidEnabled: ").Append(OpenidEnabled).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsTogglUser);
        }

        /// <summary>
        /// Returns true if ModelsTogglUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsTogglUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsTogglUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiToken == input.ApiToken ||
                    (this.ApiToken != null &&
                    this.ApiToken.Equals(input.ApiToken))
                ) && 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.BeginningOfWeek == input.BeginningOfWeek ||
                    (this.BeginningOfWeek != null &&
                    this.BeginningOfWeek.Equals(input.BeginningOfWeek))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DefaultWorkspaceId == input.DefaultWorkspaceId ||
                    (this.DefaultWorkspaceId != null &&
                    this.DefaultWorkspaceId.Equals(input.DefaultWorkspaceId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Fullname == input.Fullname ||
                    (this.Fullname != null &&
                    this.Fullname.Equals(input.Fullname))
                ) && 
                (
                    this.HasPassword == input.HasPassword ||
                    (this.HasPassword != null &&
                    this.HasPassword.Equals(input.HasPassword))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.OpenidEmail == input.OpenidEmail ||
                    (this.OpenidEmail != null &&
                    this.OpenidEmail.Equals(input.OpenidEmail))
                ) && 
                (
                    this.OpenidEnabled == input.OpenidEnabled ||
                    (this.OpenidEnabled != null &&
                    this.OpenidEnabled.Equals(input.OpenidEnabled))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiToken != null)
                    hashCode = hashCode * 59 + this.ApiToken.GetHashCode();
                if (this.At != null)
                    hashCode = hashCode * 59 + this.At.GetHashCode();
                if (this.BeginningOfWeek != null)
                    hashCode = hashCode * 59 + this.BeginningOfWeek.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DefaultWorkspaceId != null)
                    hashCode = hashCode * 59 + this.DefaultWorkspaceId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Fullname != null)
                    hashCode = hashCode * 59 + this.Fullname.GetHashCode();
                if (this.HasPassword != null)
                    hashCode = hashCode * 59 + this.HasPassword.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.OpenidEmail != null)
                    hashCode = hashCode * 59 + this.OpenidEmail.GetHashCode();
                if (this.OpenidEnabled != null)
                    hashCode = hashCode * 59 + this.OpenidEnabled.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
