/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// SubscriptionOutData
    /// </summary>
    [DataContract]
    public partial class SubscriptionOutData :  IEquatable<SubscriptionOutData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOutData" /> class.
        /// </summary>
        /// <param name="autoRenew">autoRenew.</param>
        /// <param name="billingPeriodInMonths">billingPeriodInMonths.</param>
        /// <param name="campaignAvailable">campaignAvailable.</param>
        /// <param name="cancelDate">cancelDate.</param>
        /// <param name="cardDetails">cardDetails.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="contactDetails">contactDetails.</param>
        /// <param name="currency">currency.</param>
        /// <param name="currentPeriodEndsAt">currentPeriodEndsAt.</param>
        /// <param name="currentPeriodStartsAt">currentPeriodStartsAt.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="endDate">Deprecated: this field will be replaced by CurrentPeriodEndsAt.</param>
        /// <param name="enterprise">enterprise.</param>
        /// <param name="isSubscriptionBeta">temporary flag which is true iff there is at least one admin in the organization, who has the &#x60;multi_workspace_payments&#x60; beta flag enabled.</param>
        /// <param name="isUnified">isUnified.</param>
        /// <param name="lastInvoice">lastInvoice.</param>
        /// <param name="lastPayment">lastPayment.</param>
        /// <param name="lastPricingPlanId">lastPricingPlanId.</param>
        /// <param name="newSignupTrial">newSignupTrial.</param>
        /// <param name="nextPaymentDate">nextPaymentDate.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="planName">planName.</param>
        /// <param name="pricingPlanId">Legacy fields (kept for compatibility with FE).</param>
        /// <param name="renewalAt">renewalAt.</param>
        /// <param name="renewalDate">renewalDate.</param>
        /// <param name="seatCostInCents">seatCostInCents.</param>
        /// <param name="seats">seats.</param>
        /// <param name="site">site.</param>
        /// <param name="startDate">Deprecated: this field will be replaced by CurrentPeriodStartsAt.</param>
        /// <param name="state">state.</param>
        /// <param name="subscriptionCreatedAt">subscriptionCreatedAt.</param>
        /// <param name="subscriptionPeriod">subscriptionPeriod.</param>
        /// <param name="trialAvailable">trialAvailable.</param>
        /// <param name="trialEndDate">trialEndDate.</param>
        /// <param name="trialStartDate">trialStartDate.</param>
        public SubscriptionOutData(bool? autoRenew = default(bool?), int? billingPeriodInMonths = default(int?), bool? campaignAvailable = default(bool?), string cancelDate = default(string), ModelsCardDetails cardDetails = default(ModelsCardDetails), int? companyId = default(int?), ModelsContactDetail contactDetails = default(ModelsContactDetail), string currency = default(string), string currentPeriodEndsAt = default(string), string currentPeriodStartsAt = default(string), int? customerId = default(int?), string endDate = default(string), bool? enterprise = default(bool?), bool? isSubscriptionBeta = default(bool?), bool? isUnified = default(bool?), SubscriptionInvoiceInfo lastInvoice = default(SubscriptionInvoiceInfo), ModelsPaymentInfo lastPayment = default(ModelsPaymentInfo), int? lastPricingPlanId = default(int?), bool? newSignupTrial = default(bool?), string nextPaymentDate = default(string), string paymentMethod = default(string), string planName = default(string), int? pricingPlanId = default(int?), string renewalAt = default(string), string renewalDate = default(string), int? seatCostInCents = default(int?), int? seats = default(int?), string site = default(string), string startDate = default(string), string state = default(string), string subscriptionCreatedAt = default(string), ModelsPeriod subscriptionPeriod = default(ModelsPeriod), bool? trialAvailable = default(bool?), string trialEndDate = default(string), string trialStartDate = default(string))
        {
            this.AutoRenew = autoRenew;
            this.BillingPeriodInMonths = billingPeriodInMonths;
            this.CampaignAvailable = campaignAvailable;
            this.CancelDate = cancelDate;
            this.CardDetails = cardDetails;
            this.CompanyId = companyId;
            this.ContactDetails = contactDetails;
            this.Currency = currency;
            this.CurrentPeriodEndsAt = currentPeriodEndsAt;
            this.CurrentPeriodStartsAt = currentPeriodStartsAt;
            this.CustomerId = customerId;
            this.EndDate = endDate;
            this.Enterprise = enterprise;
            this.IsSubscriptionBeta = isSubscriptionBeta;
            this.IsUnified = isUnified;
            this.LastInvoice = lastInvoice;
            this.LastPayment = lastPayment;
            this.LastPricingPlanId = lastPricingPlanId;
            this.NewSignupTrial = newSignupTrial;
            this.NextPaymentDate = nextPaymentDate;
            this.PaymentMethod = paymentMethod;
            this.PlanName = planName;
            this.PricingPlanId = pricingPlanId;
            this.RenewalAt = renewalAt;
            this.RenewalDate = renewalDate;
            this.SeatCostInCents = seatCostInCents;
            this.Seats = seats;
            this.Site = site;
            this.StartDate = startDate;
            this.State = state;
            this.SubscriptionCreatedAt = subscriptionCreatedAt;
            this.SubscriptionPeriod = subscriptionPeriod;
            this.TrialAvailable = trialAvailable;
            this.TrialEndDate = trialEndDate;
            this.TrialStartDate = trialStartDate;
        }
        
        /// <summary>
        /// Gets or Sets AutoRenew
        /// </summary>
        [DataMember(Name="auto_renew", EmitDefaultValue=false)]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// Gets or Sets BillingPeriodInMonths
        /// </summary>
        [DataMember(Name="billing_period_in_months", EmitDefaultValue=false)]
        public int? BillingPeriodInMonths { get; set; }

        /// <summary>
        /// Gets or Sets CampaignAvailable
        /// </summary>
        [DataMember(Name="campaign_available", EmitDefaultValue=false)]
        public bool? CampaignAvailable { get; set; }

        /// <summary>
        /// Gets or Sets CancelDate
        /// </summary>
        [DataMember(Name="cancel_date", EmitDefaultValue=false)]
        public string CancelDate { get; set; }

        /// <summary>
        /// Gets or Sets CardDetails
        /// </summary>
        [DataMember(Name="card_details", EmitDefaultValue=false)]
        public ModelsCardDetails CardDetails { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="company_id", EmitDefaultValue=false)]
        public int? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ContactDetails
        /// </summary>
        [DataMember(Name="contact_details", EmitDefaultValue=false)]
        public ModelsContactDetail ContactDetails { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPeriodEndsAt
        /// </summary>
        [DataMember(Name="current_period_ends_at", EmitDefaultValue=false)]
        public string CurrentPeriodEndsAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPeriodStartsAt
        /// </summary>
        [DataMember(Name="current_period_starts_at", EmitDefaultValue=false)]
        public string CurrentPeriodStartsAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customer_id", EmitDefaultValue=false)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Deprecated: this field will be replaced by CurrentPeriodEndsAt
        /// </summary>
        /// <value>Deprecated: this field will be replaced by CurrentPeriodEndsAt</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Enterprise
        /// </summary>
        [DataMember(Name="enterprise", EmitDefaultValue=false)]
        public bool? Enterprise { get; set; }

        /// <summary>
        /// temporary flag which is true iff there is at least one admin in the organization, who has the &#x60;multi_workspace_payments&#x60; beta flag enabled
        /// </summary>
        /// <value>temporary flag which is true iff there is at least one admin in the organization, who has the &#x60;multi_workspace_payments&#x60; beta flag enabled</value>
        [DataMember(Name="is_subscription_beta", EmitDefaultValue=false)]
        public bool? IsSubscriptionBeta { get; set; }

        /// <summary>
        /// Gets or Sets IsUnified
        /// </summary>
        [DataMember(Name="is_unified", EmitDefaultValue=false)]
        public bool? IsUnified { get; set; }

        /// <summary>
        /// Gets or Sets LastInvoice
        /// </summary>
        [DataMember(Name="last_invoice", EmitDefaultValue=false)]
        public SubscriptionInvoiceInfo LastInvoice { get; set; }

        /// <summary>
        /// Gets or Sets LastPayment
        /// </summary>
        [DataMember(Name="last_payment", EmitDefaultValue=false)]
        public ModelsPaymentInfo LastPayment { get; set; }

        /// <summary>
        /// Gets or Sets LastPricingPlanId
        /// </summary>
        [DataMember(Name="last_pricing_plan_id", EmitDefaultValue=false)]
        public int? LastPricingPlanId { get; set; }

        /// <summary>
        /// Gets or Sets NewSignupTrial
        /// </summary>
        [DataMember(Name="new_signup_trial", EmitDefaultValue=false)]
        public bool? NewSignupTrial { get; set; }

        /// <summary>
        /// Gets or Sets NextPaymentDate
        /// </summary>
        [DataMember(Name="next_payment_date", EmitDefaultValue=false)]
        public string NextPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PlanName
        /// </summary>
        [DataMember(Name="plan_name", EmitDefaultValue=false)]
        public string PlanName { get; set; }

        /// <summary>
        /// Legacy fields (kept for compatibility with FE)
        /// </summary>
        /// <value>Legacy fields (kept for compatibility with FE)</value>
        [DataMember(Name="pricing_plan_id", EmitDefaultValue=false)]
        public int? PricingPlanId { get; set; }

        /// <summary>
        /// Gets or Sets RenewalAt
        /// </summary>
        [DataMember(Name="renewal_at", EmitDefaultValue=false)]
        public string RenewalAt { get; set; }

        /// <summary>
        /// Gets or Sets RenewalDate
        /// </summary>
        [DataMember(Name="renewal_date", EmitDefaultValue=false)]
        public string RenewalDate { get; set; }

        /// <summary>
        /// Gets or Sets SeatCostInCents
        /// </summary>
        [DataMember(Name="seat_cost_in_cents", EmitDefaultValue=false)]
        public int? SeatCostInCents { get; set; }

        /// <summary>
        /// Gets or Sets Seats
        /// </summary>
        [DataMember(Name="seats", EmitDefaultValue=false)]
        public int? Seats { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public string Site { get; set; }

        /// <summary>
        /// Deprecated: this field will be replaced by CurrentPeriodStartsAt
        /// </summary>
        /// <value>Deprecated: this field will be replaced by CurrentPeriodStartsAt</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionCreatedAt
        /// </summary>
        [DataMember(Name="subscription_created_at", EmitDefaultValue=false)]
        public string SubscriptionCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionPeriod
        /// </summary>
        [DataMember(Name="subscription_period", EmitDefaultValue=false)]
        public ModelsPeriod SubscriptionPeriod { get; set; }

        /// <summary>
        /// Gets or Sets TrialAvailable
        /// </summary>
        [DataMember(Name="trial_available", EmitDefaultValue=false)]
        public bool? TrialAvailable { get; set; }

        /// <summary>
        /// Gets or Sets TrialEndDate
        /// </summary>
        [DataMember(Name="trial_end_date", EmitDefaultValue=false)]
        public string TrialEndDate { get; set; }

        /// <summary>
        /// Gets or Sets TrialStartDate
        /// </summary>
        [DataMember(Name="trial_start_date", EmitDefaultValue=false)]
        public string TrialStartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionOutData {\n");
            sb.Append("  AutoRenew: ").Append(AutoRenew).Append("\n");
            sb.Append("  BillingPeriodInMonths: ").Append(BillingPeriodInMonths).Append("\n");
            sb.Append("  CampaignAvailable: ").Append(CampaignAvailable).Append("\n");
            sb.Append("  CancelDate: ").Append(CancelDate).Append("\n");
            sb.Append("  CardDetails: ").Append(CardDetails).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  ContactDetails: ").Append(ContactDetails).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrentPeriodEndsAt: ").Append(CurrentPeriodEndsAt).Append("\n");
            sb.Append("  CurrentPeriodStartsAt: ").Append(CurrentPeriodStartsAt).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Enterprise: ").Append(Enterprise).Append("\n");
            sb.Append("  IsSubscriptionBeta: ").Append(IsSubscriptionBeta).Append("\n");
            sb.Append("  IsUnified: ").Append(IsUnified).Append("\n");
            sb.Append("  LastInvoice: ").Append(LastInvoice).Append("\n");
            sb.Append("  LastPayment: ").Append(LastPayment).Append("\n");
            sb.Append("  LastPricingPlanId: ").Append(LastPricingPlanId).Append("\n");
            sb.Append("  NewSignupTrial: ").Append(NewSignupTrial).Append("\n");
            sb.Append("  NextPaymentDate: ").Append(NextPaymentDate).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  PricingPlanId: ").Append(PricingPlanId).Append("\n");
            sb.Append("  RenewalAt: ").Append(RenewalAt).Append("\n");
            sb.Append("  RenewalDate: ").Append(RenewalDate).Append("\n");
            sb.Append("  SeatCostInCents: ").Append(SeatCostInCents).Append("\n");
            sb.Append("  Seats: ").Append(Seats).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubscriptionCreatedAt: ").Append(SubscriptionCreatedAt).Append("\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  TrialAvailable: ").Append(TrialAvailable).Append("\n");
            sb.Append("  TrialEndDate: ").Append(TrialEndDate).Append("\n");
            sb.Append("  TrialStartDate: ").Append(TrialStartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionOutData);
        }

        /// <summary>
        /// Returns true if SubscriptionOutData instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionOutData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionOutData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoRenew == input.AutoRenew ||
                    (this.AutoRenew != null &&
                    this.AutoRenew.Equals(input.AutoRenew))
                ) && 
                (
                    this.BillingPeriodInMonths == input.BillingPeriodInMonths ||
                    (this.BillingPeriodInMonths != null &&
                    this.BillingPeriodInMonths.Equals(input.BillingPeriodInMonths))
                ) && 
                (
                    this.CampaignAvailable == input.CampaignAvailable ||
                    (this.CampaignAvailable != null &&
                    this.CampaignAvailable.Equals(input.CampaignAvailable))
                ) && 
                (
                    this.CancelDate == input.CancelDate ||
                    (this.CancelDate != null &&
                    this.CancelDate.Equals(input.CancelDate))
                ) && 
                (
                    this.CardDetails == input.CardDetails ||
                    (this.CardDetails != null &&
                    this.CardDetails.Equals(input.CardDetails))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.ContactDetails == input.ContactDetails ||
                    (this.ContactDetails != null &&
                    this.ContactDetails.Equals(input.ContactDetails))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CurrentPeriodEndsAt == input.CurrentPeriodEndsAt ||
                    (this.CurrentPeriodEndsAt != null &&
                    this.CurrentPeriodEndsAt.Equals(input.CurrentPeriodEndsAt))
                ) && 
                (
                    this.CurrentPeriodStartsAt == input.CurrentPeriodStartsAt ||
                    (this.CurrentPeriodStartsAt != null &&
                    this.CurrentPeriodStartsAt.Equals(input.CurrentPeriodStartsAt))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Enterprise == input.Enterprise ||
                    (this.Enterprise != null &&
                    this.Enterprise.Equals(input.Enterprise))
                ) && 
                (
                    this.IsSubscriptionBeta == input.IsSubscriptionBeta ||
                    (this.IsSubscriptionBeta != null &&
                    this.IsSubscriptionBeta.Equals(input.IsSubscriptionBeta))
                ) && 
                (
                    this.IsUnified == input.IsUnified ||
                    (this.IsUnified != null &&
                    this.IsUnified.Equals(input.IsUnified))
                ) && 
                (
                    this.LastInvoice == input.LastInvoice ||
                    (this.LastInvoice != null &&
                    this.LastInvoice.Equals(input.LastInvoice))
                ) && 
                (
                    this.LastPayment == input.LastPayment ||
                    (this.LastPayment != null &&
                    this.LastPayment.Equals(input.LastPayment))
                ) && 
                (
                    this.LastPricingPlanId == input.LastPricingPlanId ||
                    (this.LastPricingPlanId != null &&
                    this.LastPricingPlanId.Equals(input.LastPricingPlanId))
                ) && 
                (
                    this.NewSignupTrial == input.NewSignupTrial ||
                    (this.NewSignupTrial != null &&
                    this.NewSignupTrial.Equals(input.NewSignupTrial))
                ) && 
                (
                    this.NextPaymentDate == input.NextPaymentDate ||
                    (this.NextPaymentDate != null &&
                    this.NextPaymentDate.Equals(input.NextPaymentDate))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PlanName == input.PlanName ||
                    (this.PlanName != null &&
                    this.PlanName.Equals(input.PlanName))
                ) && 
                (
                    this.PricingPlanId == input.PricingPlanId ||
                    (this.PricingPlanId != null &&
                    this.PricingPlanId.Equals(input.PricingPlanId))
                ) && 
                (
                    this.RenewalAt == input.RenewalAt ||
                    (this.RenewalAt != null &&
                    this.RenewalAt.Equals(input.RenewalAt))
                ) && 
                (
                    this.RenewalDate == input.RenewalDate ||
                    (this.RenewalDate != null &&
                    this.RenewalDate.Equals(input.RenewalDate))
                ) && 
                (
                    this.SeatCostInCents == input.SeatCostInCents ||
                    (this.SeatCostInCents != null &&
                    this.SeatCostInCents.Equals(input.SeatCostInCents))
                ) && 
                (
                    this.Seats == input.Seats ||
                    (this.Seats != null &&
                    this.Seats.Equals(input.Seats))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.SubscriptionCreatedAt == input.SubscriptionCreatedAt ||
                    (this.SubscriptionCreatedAt != null &&
                    this.SubscriptionCreatedAt.Equals(input.SubscriptionCreatedAt))
                ) && 
                (
                    this.SubscriptionPeriod == input.SubscriptionPeriod ||
                    (this.SubscriptionPeriod != null &&
                    this.SubscriptionPeriod.Equals(input.SubscriptionPeriod))
                ) && 
                (
                    this.TrialAvailable == input.TrialAvailable ||
                    (this.TrialAvailable != null &&
                    this.TrialAvailable.Equals(input.TrialAvailable))
                ) && 
                (
                    this.TrialEndDate == input.TrialEndDate ||
                    (this.TrialEndDate != null &&
                    this.TrialEndDate.Equals(input.TrialEndDate))
                ) && 
                (
                    this.TrialStartDate == input.TrialStartDate ||
                    (this.TrialStartDate != null &&
                    this.TrialStartDate.Equals(input.TrialStartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoRenew != null)
                    hashCode = hashCode * 59 + this.AutoRenew.GetHashCode();
                if (this.BillingPeriodInMonths != null)
                    hashCode = hashCode * 59 + this.BillingPeriodInMonths.GetHashCode();
                if (this.CampaignAvailable != null)
                    hashCode = hashCode * 59 + this.CampaignAvailable.GetHashCode();
                if (this.CancelDate != null)
                    hashCode = hashCode * 59 + this.CancelDate.GetHashCode();
                if (this.CardDetails != null)
                    hashCode = hashCode * 59 + this.CardDetails.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.ContactDetails != null)
                    hashCode = hashCode * 59 + this.ContactDetails.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CurrentPeriodEndsAt != null)
                    hashCode = hashCode * 59 + this.CurrentPeriodEndsAt.GetHashCode();
                if (this.CurrentPeriodStartsAt != null)
                    hashCode = hashCode * 59 + this.CurrentPeriodStartsAt.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Enterprise != null)
                    hashCode = hashCode * 59 + this.Enterprise.GetHashCode();
                if (this.IsSubscriptionBeta != null)
                    hashCode = hashCode * 59 + this.IsSubscriptionBeta.GetHashCode();
                if (this.IsUnified != null)
                    hashCode = hashCode * 59 + this.IsUnified.GetHashCode();
                if (this.LastInvoice != null)
                    hashCode = hashCode * 59 + this.LastInvoice.GetHashCode();
                if (this.LastPayment != null)
                    hashCode = hashCode * 59 + this.LastPayment.GetHashCode();
                if (this.LastPricingPlanId != null)
                    hashCode = hashCode * 59 + this.LastPricingPlanId.GetHashCode();
                if (this.NewSignupTrial != null)
                    hashCode = hashCode * 59 + this.NewSignupTrial.GetHashCode();
                if (this.NextPaymentDate != null)
                    hashCode = hashCode * 59 + this.NextPaymentDate.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PlanName != null)
                    hashCode = hashCode * 59 + this.PlanName.GetHashCode();
                if (this.PricingPlanId != null)
                    hashCode = hashCode * 59 + this.PricingPlanId.GetHashCode();
                if (this.RenewalAt != null)
                    hashCode = hashCode * 59 + this.RenewalAt.GetHashCode();
                if (this.RenewalDate != null)
                    hashCode = hashCode * 59 + this.RenewalDate.GetHashCode();
                if (this.SeatCostInCents != null)
                    hashCode = hashCode * 59 + this.SeatCostInCents.GetHashCode();
                if (this.Seats != null)
                    hashCode = hashCode * 59 + this.Seats.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.SubscriptionCreatedAt != null)
                    hashCode = hashCode * 59 + this.SubscriptionCreatedAt.GetHashCode();
                if (this.SubscriptionPeriod != null)
                    hashCode = hashCode * 59 + this.SubscriptionPeriod.GetHashCode();
                if (this.TrialAvailable != null)
                    hashCode = hashCode * 59 + this.TrialAvailable.GetHashCode();
                if (this.TrialEndDate != null)
                    hashCode = hashCode * 59 + this.TrialEndDate.GetHashCode();
                if (this.TrialStartDate != null)
                    hashCode = hashCode * 59 + this.TrialStartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
