/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// UserPutPayload
    /// </summary>
    [DataContract]
    public partial class UserPutPayload :  IEquatable<UserPutPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPutPayload" /> class.
        /// </summary>
        /// <param name="labourCost">Labour cost for this project user.</param>
        /// <param name="manager">Whether the user will be manager of the project.</param>
        /// <param name="rate">Rate for this project user.</param>
        /// <param name="rateChangeMode">Rate change mode for this project user. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;.</param>
        public UserPutPayload(long? labourCost = default(long?), bool? manager = default(bool?), decimal? rate = default(decimal?), string rateChangeMode = default(string))
        {
            this.LabourCost = labourCost;
            this.Manager = manager;
            this.Rate = rate;
            this.RateChangeMode = rateChangeMode;
        }
        
        /// <summary>
        /// Labour cost for this project user
        /// </summary>
        /// <value>Labour cost for this project user</value>
        [DataMember(Name="labour_cost", EmitDefaultValue=false)]
        public long? LabourCost { get; set; }

        /// <summary>
        /// Whether the user will be manager of the project
        /// </summary>
        /// <value>Whether the user will be manager of the project</value>
        [DataMember(Name="manager", EmitDefaultValue=false)]
        public bool? Manager { get; set; }

        /// <summary>
        /// Rate for this project user
        /// </summary>
        /// <value>Rate for this project user</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Rate change mode for this project user. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;
        /// </summary>
        /// <value>Rate change mode for this project user. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;</value>
        [DataMember(Name="rate_change_mode", EmitDefaultValue=false)]
        public string RateChangeMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPutPayload {\n");
            sb.Append("  LabourCost: ").Append(LabourCost).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateChangeMode: ").Append(RateChangeMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPutPayload);
        }

        /// <summary>
        /// Returns true if UserPutPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPutPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPutPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LabourCost == input.LabourCost ||
                    (this.LabourCost != null &&
                    this.LabourCost.Equals(input.LabourCost))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RateChangeMode == input.RateChangeMode ||
                    (this.RateChangeMode != null &&
                    this.RateChangeMode.Equals(input.RateChangeMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LabourCost != null)
                    hashCode = hashCode * 59 + this.LabourCost.GetHashCode();
                if (this.Manager != null)
                    hashCode = hashCode * 59 + this.Manager.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RateChangeMode != null)
                    hashCode = hashCode * 59 + this.RateChangeMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
