/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// WorkspacePayload
    /// </summary>
    [DataContract]
    public partial class WorkspacePayload :  IEquatable<WorkspacePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacePayload" /> class.
        /// </summary>
        /// <param name="admins">List of admins, optional.</param>
        /// <param name="defaultCurrency">Default currency, premium feature, optional, only for existing WS, will be &#39;USD&#39; initially.</param>
        /// <param name="defaultHourlyRate">The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially.</param>
        /// <param name="initialPricingPlan">The subscription plan for the workspace, deprecated.</param>
        /// <param name="name">Workspace name.</param>
        /// <param name="onlyAdminsMayCreateProjects">Only admins will be able to create projects, optional, only for existing WS, will be false initially.</param>
        /// <param name="onlyAdminsMayCreateTags">Only admins will be able to create tags, optional, only for existing WS, will be false initially.</param>
        /// <param name="onlyAdminsSeeBillableRates">Whether only admins will be able to see billable rates, premium feature, optional, only for existing WS. Will be false initially.</param>
        /// <param name="onlyAdminsSeeTeamDashboard">Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially.</param>
        /// <param name="projectsBillableByDefault">Whether projects will be set as billable by default, premium feature, optional, only for existing WS. Will be true initially.</param>
        /// <param name="projectsPrivateByDefault">Whether projects will be set to private by default, optional. Will be true initially..</param>
        /// <param name="rateChangeMode">The rate change mode, premium feature, optional, only for existing WS. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;.</param>
        /// <param name="reportsCollapse">Whether reports should be collapsed by default, optional, only for existing WS, will be true initially.</param>
        /// <param name="rounding">Default rounding, premium feature, optional, only for existing WS.</param>
        /// <param name="roundingMinutes">Default rounding in minutes, premium feature, optional, only for existing WS.</param>
        public WorkspacePayload(List<int?> admins = default(List<int?>), string defaultCurrency = default(string), decimal? defaultHourlyRate = default(decimal?), int? initialPricingPlan = default(int?), string name = default(string), bool? onlyAdminsMayCreateProjects = default(bool?), bool? onlyAdminsMayCreateTags = default(bool?), bool? onlyAdminsSeeBillableRates = default(bool?), bool? onlyAdminsSeeTeamDashboard = default(bool?), bool? projectsBillableByDefault = default(bool?), bool? projectsPrivateByDefault = default(bool?), string rateChangeMode = default(string), bool? reportsCollapse = default(bool?), int? rounding = default(int?), int? roundingMinutes = default(int?))
        {
            this.Admins = admins;
            this.DefaultCurrency = defaultCurrency;
            this.DefaultHourlyRate = defaultHourlyRate;
            this.InitialPricingPlan = initialPricingPlan;
            this.Name = name;
            this.OnlyAdminsMayCreateProjects = onlyAdminsMayCreateProjects;
            this.OnlyAdminsMayCreateTags = onlyAdminsMayCreateTags;
            this.OnlyAdminsSeeBillableRates = onlyAdminsSeeBillableRates;
            this.OnlyAdminsSeeTeamDashboard = onlyAdminsSeeTeamDashboard;
            this.ProjectsBillableByDefault = projectsBillableByDefault;
            this.ProjectsPrivateByDefault = projectsPrivateByDefault;
            this.RateChangeMode = rateChangeMode;
            this.ReportsCollapse = reportsCollapse;
            this.Rounding = rounding;
            this.RoundingMinutes = roundingMinutes;
        }
        
        /// <summary>
        /// List of admins, optional
        /// </summary>
        /// <value>List of admins, optional</value>
        [DataMember(Name="admins", EmitDefaultValue=false)]
        public List<int?> Admins { get; set; }

        /// <summary>
        /// Default currency, premium feature, optional, only for existing WS, will be &#39;USD&#39; initially
        /// </summary>
        /// <value>Default currency, premium feature, optional, only for existing WS, will be &#39;USD&#39; initially</value>
        [DataMember(Name="default_currency", EmitDefaultValue=false)]
        public string DefaultCurrency { get; set; }

        /// <summary>
        /// The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially
        /// </summary>
        /// <value>The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially</value>
        [DataMember(Name="default_hourly_rate", EmitDefaultValue=false)]
        public decimal? DefaultHourlyRate { get; set; }

        /// <summary>
        /// The subscription plan for the workspace, deprecated
        /// </summary>
        /// <value>The subscription plan for the workspace, deprecated</value>
        [DataMember(Name="initial_pricing_plan", EmitDefaultValue=false)]
        public int? InitialPricingPlan { get; set; }

        /// <summary>
        /// Workspace name
        /// </summary>
        /// <value>Workspace name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Only admins will be able to create projects, optional, only for existing WS, will be false initially
        /// </summary>
        /// <value>Only admins will be able to create projects, optional, only for existing WS, will be false initially</value>
        [DataMember(Name="only_admins_may_create_projects", EmitDefaultValue=false)]
        public bool? OnlyAdminsMayCreateProjects { get; set; }

        /// <summary>
        /// Only admins will be able to create tags, optional, only for existing WS, will be false initially
        /// </summary>
        /// <value>Only admins will be able to create tags, optional, only for existing WS, will be false initially</value>
        [DataMember(Name="only_admins_may_create_tags", EmitDefaultValue=false)]
        public bool? OnlyAdminsMayCreateTags { get; set; }

        /// <summary>
        /// Whether only admins will be able to see billable rates, premium feature, optional, only for existing WS. Will be false initially
        /// </summary>
        /// <value>Whether only admins will be able to see billable rates, premium feature, optional, only for existing WS. Will be false initially</value>
        [DataMember(Name="only_admins_see_billable_rates", EmitDefaultValue=false)]
        public bool? OnlyAdminsSeeBillableRates { get; set; }

        /// <summary>
        /// Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially
        /// </summary>
        /// <value>Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially</value>
        [DataMember(Name="only_admins_see_team_dashboard", EmitDefaultValue=false)]
        public bool? OnlyAdminsSeeTeamDashboard { get; set; }

        /// <summary>
        /// Whether projects will be set as billable by default, premium feature, optional, only for existing WS. Will be true initially
        /// </summary>
        /// <value>Whether projects will be set as billable by default, premium feature, optional, only for existing WS. Will be true initially</value>
        [DataMember(Name="projects_billable_by_default", EmitDefaultValue=false)]
        public bool? ProjectsBillableByDefault { get; set; }

        /// <summary>
        /// Whether projects will be set to private by default, optional. Will be true initially.
        /// </summary>
        /// <value>Whether projects will be set to private by default, optional. Will be true initially.</value>
        [DataMember(Name="projects_private_by_default", EmitDefaultValue=false)]
        public bool? ProjectsPrivateByDefault { get; set; }

        /// <summary>
        /// The rate change mode, premium feature, optional, only for existing WS. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;
        /// </summary>
        /// <value>The rate change mode, premium feature, optional, only for existing WS. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;</value>
        [DataMember(Name="rate_change_mode", EmitDefaultValue=false)]
        public string RateChangeMode { get; set; }

        /// <summary>
        /// Whether reports should be collapsed by default, optional, only for existing WS, will be true initially
        /// </summary>
        /// <value>Whether reports should be collapsed by default, optional, only for existing WS, will be true initially</value>
        [DataMember(Name="reports_collapse", EmitDefaultValue=false)]
        public bool? ReportsCollapse { get; set; }

        /// <summary>
        /// Default rounding, premium feature, optional, only for existing WS
        /// </summary>
        /// <value>Default rounding, premium feature, optional, only for existing WS</value>
        [DataMember(Name="rounding", EmitDefaultValue=false)]
        public int? Rounding { get; set; }

        /// <summary>
        /// Default rounding in minutes, premium feature, optional, only for existing WS
        /// </summary>
        /// <value>Default rounding in minutes, premium feature, optional, only for existing WS</value>
        [DataMember(Name="rounding_minutes", EmitDefaultValue=false)]
        public int? RoundingMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkspacePayload {\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("  DefaultCurrency: ").Append(DefaultCurrency).Append("\n");
            sb.Append("  DefaultHourlyRate: ").Append(DefaultHourlyRate).Append("\n");
            sb.Append("  InitialPricingPlan: ").Append(InitialPricingPlan).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OnlyAdminsMayCreateProjects: ").Append(OnlyAdminsMayCreateProjects).Append("\n");
            sb.Append("  OnlyAdminsMayCreateTags: ").Append(OnlyAdminsMayCreateTags).Append("\n");
            sb.Append("  OnlyAdminsSeeBillableRates: ").Append(OnlyAdminsSeeBillableRates).Append("\n");
            sb.Append("  OnlyAdminsSeeTeamDashboard: ").Append(OnlyAdminsSeeTeamDashboard).Append("\n");
            sb.Append("  ProjectsBillableByDefault: ").Append(ProjectsBillableByDefault).Append("\n");
            sb.Append("  ProjectsPrivateByDefault: ").Append(ProjectsPrivateByDefault).Append("\n");
            sb.Append("  RateChangeMode: ").Append(RateChangeMode).Append("\n");
            sb.Append("  ReportsCollapse: ").Append(ReportsCollapse).Append("\n");
            sb.Append("  Rounding: ").Append(Rounding).Append("\n");
            sb.Append("  RoundingMinutes: ").Append(RoundingMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkspacePayload);
        }

        /// <summary>
        /// Returns true if WorkspacePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkspacePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspacePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Admins == input.Admins ||
                    this.Admins != null &&
                    this.Admins.SequenceEqual(input.Admins)
                ) && 
                (
                    this.DefaultCurrency == input.DefaultCurrency ||
                    (this.DefaultCurrency != null &&
                    this.DefaultCurrency.Equals(input.DefaultCurrency))
                ) && 
                (
                    this.DefaultHourlyRate == input.DefaultHourlyRate ||
                    (this.DefaultHourlyRate != null &&
                    this.DefaultHourlyRate.Equals(input.DefaultHourlyRate))
                ) && 
                (
                    this.InitialPricingPlan == input.InitialPricingPlan ||
                    (this.InitialPricingPlan != null &&
                    this.InitialPricingPlan.Equals(input.InitialPricingPlan))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OnlyAdminsMayCreateProjects == input.OnlyAdminsMayCreateProjects ||
                    (this.OnlyAdminsMayCreateProjects != null &&
                    this.OnlyAdminsMayCreateProjects.Equals(input.OnlyAdminsMayCreateProjects))
                ) && 
                (
                    this.OnlyAdminsMayCreateTags == input.OnlyAdminsMayCreateTags ||
                    (this.OnlyAdminsMayCreateTags != null &&
                    this.OnlyAdminsMayCreateTags.Equals(input.OnlyAdminsMayCreateTags))
                ) && 
                (
                    this.OnlyAdminsSeeBillableRates == input.OnlyAdminsSeeBillableRates ||
                    (this.OnlyAdminsSeeBillableRates != null &&
                    this.OnlyAdminsSeeBillableRates.Equals(input.OnlyAdminsSeeBillableRates))
                ) && 
                (
                    this.OnlyAdminsSeeTeamDashboard == input.OnlyAdminsSeeTeamDashboard ||
                    (this.OnlyAdminsSeeTeamDashboard != null &&
                    this.OnlyAdminsSeeTeamDashboard.Equals(input.OnlyAdminsSeeTeamDashboard))
                ) && 
                (
                    this.ProjectsBillableByDefault == input.ProjectsBillableByDefault ||
                    (this.ProjectsBillableByDefault != null &&
                    this.ProjectsBillableByDefault.Equals(input.ProjectsBillableByDefault))
                ) && 
                (
                    this.ProjectsPrivateByDefault == input.ProjectsPrivateByDefault ||
                    (this.ProjectsPrivateByDefault != null &&
                    this.ProjectsPrivateByDefault.Equals(input.ProjectsPrivateByDefault))
                ) && 
                (
                    this.RateChangeMode == input.RateChangeMode ||
                    (this.RateChangeMode != null &&
                    this.RateChangeMode.Equals(input.RateChangeMode))
                ) && 
                (
                    this.ReportsCollapse == input.ReportsCollapse ||
                    (this.ReportsCollapse != null &&
                    this.ReportsCollapse.Equals(input.ReportsCollapse))
                ) && 
                (
                    this.Rounding == input.Rounding ||
                    (this.Rounding != null &&
                    this.Rounding.Equals(input.Rounding))
                ) && 
                (
                    this.RoundingMinutes == input.RoundingMinutes ||
                    (this.RoundingMinutes != null &&
                    this.RoundingMinutes.Equals(input.RoundingMinutes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Admins != null)
                    hashCode = hashCode * 59 + this.Admins.GetHashCode();
                if (this.DefaultCurrency != null)
                    hashCode = hashCode * 59 + this.DefaultCurrency.GetHashCode();
                if (this.DefaultHourlyRate != null)
                    hashCode = hashCode * 59 + this.DefaultHourlyRate.GetHashCode();
                if (this.InitialPricingPlan != null)
                    hashCode = hashCode * 59 + this.InitialPricingPlan.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OnlyAdminsMayCreateProjects != null)
                    hashCode = hashCode * 59 + this.OnlyAdminsMayCreateProjects.GetHashCode();
                if (this.OnlyAdminsMayCreateTags != null)
                    hashCode = hashCode * 59 + this.OnlyAdminsMayCreateTags.GetHashCode();
                if (this.OnlyAdminsSeeBillableRates != null)
                    hashCode = hashCode * 59 + this.OnlyAdminsSeeBillableRates.GetHashCode();
                if (this.OnlyAdminsSeeTeamDashboard != null)
                    hashCode = hashCode * 59 + this.OnlyAdminsSeeTeamDashboard.GetHashCode();
                if (this.ProjectsBillableByDefault != null)
                    hashCode = hashCode * 59 + this.ProjectsBillableByDefault.GetHashCode();
                if (this.ProjectsPrivateByDefault != null)
                    hashCode = hashCode * 59 + this.ProjectsPrivateByDefault.GetHashCode();
                if (this.RateChangeMode != null)
                    hashCode = hashCode * 59 + this.RateChangeMode.GetHashCode();
                if (this.ReportsCollapse != null)
                    hashCode = hashCode * 59 + this.ReportsCollapse.GetHashCode();
                if (this.Rounding != null)
                    hashCode = hashCode * 59 + this.Rounding.GetHashCode();
                if (this.RoundingMinutes != null)
                    hashCode = hashCode * 59 + this.RoundingMinutes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
