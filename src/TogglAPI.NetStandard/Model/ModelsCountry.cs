/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsCountry
    /// </summary>
    [DataContract]
    public partial class ModelsCountry :  IEquatable<ModelsCountry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsCountry" /> class.
        /// </summary>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="defaultCurrencyId">defaultCurrencyId.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="vatApplicable">vatApplicable.</param>
        /// <param name="vatPercentage">vatPercentage.</param>
        /// <param name="vatRegex">vatRegex.</param>
        public ModelsCountry(string countryCode = default(string), int? defaultCurrencyId = default(int?), int? id = default(int?), string name = default(string), bool? vatApplicable = default(bool?), decimal? vatPercentage = default(decimal?), string vatRegex = default(string))
        {
            this.CountryCode = countryCode;
            this.DefaultCurrencyId = defaultCurrencyId;
            this.Id = id;
            this.Name = name;
            this.VatApplicable = vatApplicable;
            this.VatPercentage = vatPercentage;
            this.VatRegex = vatRegex;
        }
        
        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCurrencyId
        /// </summary>
        [DataMember(Name="default_currency_id", EmitDefaultValue=false)]
        public int? DefaultCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VatApplicable
        /// </summary>
        [DataMember(Name="vat_applicable", EmitDefaultValue=false)]
        public bool? VatApplicable { get; set; }

        /// <summary>
        /// Gets or Sets VatPercentage
        /// </summary>
        [DataMember(Name="vat_percentage", EmitDefaultValue=false)]
        public decimal? VatPercentage { get; set; }

        /// <summary>
        /// Gets or Sets VatRegex
        /// </summary>
        [DataMember(Name="vat_regex", EmitDefaultValue=false)]
        public string VatRegex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsCountry {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DefaultCurrencyId: ").Append(DefaultCurrencyId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VatApplicable: ").Append(VatApplicable).Append("\n");
            sb.Append("  VatPercentage: ").Append(VatPercentage).Append("\n");
            sb.Append("  VatRegex: ").Append(VatRegex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsCountry);
        }

        /// <summary>
        /// Returns true if ModelsCountry instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsCountry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsCountry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DefaultCurrencyId == input.DefaultCurrencyId ||
                    (this.DefaultCurrencyId != null &&
                    this.DefaultCurrencyId.Equals(input.DefaultCurrencyId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VatApplicable == input.VatApplicable ||
                    (this.VatApplicable != null &&
                    this.VatApplicable.Equals(input.VatApplicable))
                ) && 
                (
                    this.VatPercentage == input.VatPercentage ||
                    (this.VatPercentage != null &&
                    this.VatPercentage.Equals(input.VatPercentage))
                ) && 
                (
                    this.VatRegex == input.VatRegex ||
                    (this.VatRegex != null &&
                    this.VatRegex.Equals(input.VatRegex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DefaultCurrencyId != null)
                    hashCode = hashCode * 59 + this.DefaultCurrencyId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.VatApplicable != null)
                    hashCode = hashCode * 59 + this.VatApplicable.GetHashCode();
                if (this.VatPercentage != null)
                    hashCode = hashCode * 59 + this.VatPercentage.GetHashCode();
                if (this.VatRegex != null)
                    hashCode = hashCode * 59 + this.VatRegex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
