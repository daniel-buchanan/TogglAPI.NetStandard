/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ProjectsProjectTrends
    /// </summary>
    [DataContract]
    public partial class ProjectsProjectTrends :  IEquatable<ProjectsProjectTrends>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsProjectTrends" /> class.
        /// </summary>
        /// <param name="currentPeriodSeconds">currentPeriodSeconds.</param>
        /// <param name="previousPeriodSeconds">previousPeriodSeconds.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="start">start.</param>
        /// <param name="userIds">userIds.</param>
        public ProjectsProjectTrends(List<int?> currentPeriodSeconds = default(List<int?>), List<int?> previousPeriodSeconds = default(List<int?>), int? projectId = default(int?), string start = default(string), List<int?> userIds = default(List<int?>))
        {
            this.CurrentPeriodSeconds = currentPeriodSeconds;
            this.PreviousPeriodSeconds = previousPeriodSeconds;
            this.ProjectId = projectId;
            this.Start = start;
            this.UserIds = userIds;
        }
        
        /// <summary>
        /// Gets or Sets CurrentPeriodSeconds
        /// </summary>
        [DataMember(Name="current_period_seconds", EmitDefaultValue=false)]
        public List<int?> CurrentPeriodSeconds { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPeriodSeconds
        /// </summary>
        [DataMember(Name="previous_period_seconds", EmitDefaultValue=false)]
        public List<int?> PreviousPeriodSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets UserIds
        /// </summary>
        [DataMember(Name="user_ids", EmitDefaultValue=false)]
        public List<int?> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectsProjectTrends {\n");
            sb.Append("  CurrentPeriodSeconds: ").Append(CurrentPeriodSeconds).Append("\n");
            sb.Append("  PreviousPeriodSeconds: ").Append(PreviousPeriodSeconds).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectsProjectTrends);
        }

        /// <summary>
        /// Returns true if ProjectsProjectTrends instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectsProjectTrends to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectsProjectTrends input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentPeriodSeconds == input.CurrentPeriodSeconds ||
                    this.CurrentPeriodSeconds != null &&
                    this.CurrentPeriodSeconds.SequenceEqual(input.CurrentPeriodSeconds)
                ) && 
                (
                    this.PreviousPeriodSeconds == input.PreviousPeriodSeconds ||
                    this.PreviousPeriodSeconds != null &&
                    this.PreviousPeriodSeconds.SequenceEqual(input.PreviousPeriodSeconds)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentPeriodSeconds != null)
                    hashCode = hashCode * 59 + this.CurrentPeriodSeconds.GetHashCode();
                if (this.PreviousPeriodSeconds != null)
                    hashCode = hashCode * 59 + this.PreviousPeriodSeconds.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
