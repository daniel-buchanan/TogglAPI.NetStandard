/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsWorkspaceUser
    /// </summary>
    [DataContract]
    public partial class ModelsWorkspaceUser :  IEquatable<ModelsWorkspaceUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsWorkspaceUser" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="admin">admin.</param>
        /// <param name="at">at.</param>
        /// <param name="avatarFileName">avatarFileName.</param>
        /// <param name="email">email.</param>
        /// <param name="groupIds">groupIds.</param>
        /// <param name="id">id.</param>
        /// <param name="inactive">inactive.</param>
        /// <param name="invitationCode">invitationCode.</param>
        /// <param name="inviteUrl">inviteUrl.</param>
        /// <param name="labourCost">labourCost.</param>
        /// <param name="name">name.</param>
        /// <param name="rate">rate.</param>
        /// <param name="rateLastUpdated">rateLastUpdated.</param>
        /// <param name="role">role.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="uid">uid.</param>
        /// <param name="wid">wid.</param>
        /// <param name="workingHoursInMinutes">workingHoursInMinutes.</param>
        public ModelsWorkspaceUser(bool? active = default(bool?), bool? admin = default(bool?), string at = default(string), string avatarFileName = default(string), string email = default(string), UtilsInt64Slice groupIds = default(UtilsInt64Slice), long? id = default(long?), bool? inactive = default(bool?), string invitationCode = default(string), string inviteUrl = default(string), long? labourCost = default(long?), string name = default(string), decimal? rate = default(decimal?), string rateLastUpdated = default(string), string role = default(string), string timezone = default(string), long? uid = default(long?), long? wid = default(long?), long? workingHoursInMinutes = default(long?))
        {
            this.Active = active;
            this.Admin = admin;
            this.At = at;
            this.AvatarFileName = avatarFileName;
            this.Email = email;
            this.GroupIds = groupIds;
            this.Id = id;
            this.Inactive = inactive;
            this.InvitationCode = invitationCode;
            this.InviteUrl = inviteUrl;
            this.LabourCost = labourCost;
            this.Name = name;
            this.Rate = rate;
            this.RateLastUpdated = rateLastUpdated;
            this.Role = role;
            this.Timezone = timezone;
            this.Uid = uid;
            this.Wid = wid;
            this.WorkingHoursInMinutes = workingHoursInMinutes;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public bool? Admin { get; set; }

        /// <summary>
        /// Gets or Sets At
        /// </summary>
        [DataMember(Name="at", EmitDefaultValue=false)]
        public string At { get; set; }

        /// <summary>
        /// Gets or Sets AvatarFileName
        /// </summary>
        [DataMember(Name="avatar_file_name", EmitDefaultValue=false)]
        public string AvatarFileName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets GroupIds
        /// </summary>
        [DataMember(Name="group_ids", EmitDefaultValue=false)]
        public UtilsInt64Slice GroupIds { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets InvitationCode
        /// </summary>
        [DataMember(Name="invitation_code", EmitDefaultValue=false)]
        public string InvitationCode { get; set; }

        /// <summary>
        /// Gets or Sets InviteUrl
        /// </summary>
        [DataMember(Name="invite_url", EmitDefaultValue=false)]
        public string InviteUrl { get; set; }

        /// <summary>
        /// Gets or Sets LabourCost
        /// </summary>
        [DataMember(Name="labour_cost", EmitDefaultValue=false)]
        public long? LabourCost { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Gets or Sets RateLastUpdated
        /// </summary>
        [DataMember(Name="rate_last_updated", EmitDefaultValue=false)]
        public string RateLastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public long? Uid { get; set; }

        /// <summary>
        /// Gets or Sets Wid
        /// </summary>
        [DataMember(Name="wid", EmitDefaultValue=false)]
        public long? Wid { get; set; }

        /// <summary>
        /// Gets or Sets WorkingHoursInMinutes
        /// </summary>
        [DataMember(Name="working_hours_in_minutes", EmitDefaultValue=false)]
        public long? WorkingHoursInMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsWorkspaceUser {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  AvatarFileName: ").Append(AvatarFileName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  InvitationCode: ").Append(InvitationCode).Append("\n");
            sb.Append("  InviteUrl: ").Append(InviteUrl).Append("\n");
            sb.Append("  LabourCost: ").Append(LabourCost).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateLastUpdated: ").Append(RateLastUpdated).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Wid: ").Append(Wid).Append("\n");
            sb.Append("  WorkingHoursInMinutes: ").Append(WorkingHoursInMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsWorkspaceUser);
        }

        /// <summary>
        /// Returns true if ModelsWorkspaceUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsWorkspaceUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsWorkspaceUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.AvatarFileName == input.AvatarFileName ||
                    (this.AvatarFileName != null &&
                    this.AvatarFileName.Equals(input.AvatarFileName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.GroupIds == input.GroupIds ||
                    (this.GroupIds != null &&
                    this.GroupIds.Equals(input.GroupIds))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                ) && 
                (
                    this.InvitationCode == input.InvitationCode ||
                    (this.InvitationCode != null &&
                    this.InvitationCode.Equals(input.InvitationCode))
                ) && 
                (
                    this.InviteUrl == input.InviteUrl ||
                    (this.InviteUrl != null &&
                    this.InviteUrl.Equals(input.InviteUrl))
                ) && 
                (
                    this.LabourCost == input.LabourCost ||
                    (this.LabourCost != null &&
                    this.LabourCost.Equals(input.LabourCost))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RateLastUpdated == input.RateLastUpdated ||
                    (this.RateLastUpdated != null &&
                    this.RateLastUpdated.Equals(input.RateLastUpdated))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Wid == input.Wid ||
                    (this.Wid != null &&
                    this.Wid.Equals(input.Wid))
                ) && 
                (
                    this.WorkingHoursInMinutes == input.WorkingHoursInMinutes ||
                    (this.WorkingHoursInMinutes != null &&
                    this.WorkingHoursInMinutes.Equals(input.WorkingHoursInMinutes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.At != null)
                    hashCode = hashCode * 59 + this.At.GetHashCode();
                if (this.AvatarFileName != null)
                    hashCode = hashCode * 59 + this.AvatarFileName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.GroupIds != null)
                    hashCode = hashCode * 59 + this.GroupIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                if (this.InvitationCode != null)
                    hashCode = hashCode * 59 + this.InvitationCode.GetHashCode();
                if (this.InviteUrl != null)
                    hashCode = hashCode * 59 + this.InviteUrl.GetHashCode();
                if (this.LabourCost != null)
                    hashCode = hashCode * 59 + this.LabourCost.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RateLastUpdated != null)
                    hashCode = hashCode * 59 + this.RateLastUpdated.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Wid != null)
                    hashCode = hashCode * 59 + this.Wid.GetHashCode();
                if (this.WorkingHoursInMinutes != null)
                    hashCode = hashCode * 59 + this.WorkingHoursInMinutes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
