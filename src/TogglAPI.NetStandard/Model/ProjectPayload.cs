/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ProjectPayload
    /// </summary>
    [DataContract]
    public partial class ProjectPayload :  IEquatable<ProjectPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectPayload" /> class.
        /// </summary>
        /// <param name="active">Whether the project is active or archived.</param>
        /// <param name="autoEstimates">Whether estimates are based on task hours, optional, premium feature.</param>
        /// <param name="billable">Whether the project is set as billable, optional, premium feature.</param>
        /// <param name="cid">Client ID, legacy.</param>
        /// <param name="clientId">Client ID, optional.</param>
        /// <param name="clientName">Client name, optional.</param>
        /// <param name="color">Project color.</param>
        /// <param name="currency">Project currency, optional, premium feature.</param>
        /// <param name="endDate">End date of a project timeframe.</param>
        /// <param name="estimatedHours">Estimated hours, optional, premium feature.</param>
        /// <param name="fixedFee">Project fixed fee, optional, premium feature.</param>
        /// <param name="isPrivate">Whether the project is private or not.</param>
        /// <param name="isShared">Shared.</param>
        /// <param name="name">Project name.</param>
        /// <param name="rate">Hourly rate, optional, premium feature.</param>
        /// <param name="rateChangeMode">Rate change mode, optional, premium feature. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;.</param>
        /// <param name="recurring">Project is recurring, optional, premium feature.</param>
        /// <param name="recurringParameters">Project recurring parameters, optional, premium feature.</param>
        /// <param name="startDate">Start date of a project timeframe.</param>
        /// <param name="template">Project is template, optional, premium feature.</param>
        /// <param name="templateId">Template ID, optional.</param>
        public ProjectPayload(bool? active = default(bool?), bool? autoEstimates = default(bool?), bool? billable = default(bool?), int? cid = default(int?), int? clientId = default(int?), string clientName = default(string), string color = default(string), string currency = default(string), string endDate = default(string), int? estimatedHours = default(int?), decimal? fixedFee = default(decimal?), bool? isPrivate = default(bool?), bool? isShared = default(bool?), string name = default(string), decimal? rate = default(decimal?), string rateChangeMode = default(string), bool? recurring = default(bool?), ProjectRecurringParameters recurringParameters = default(ProjectRecurringParameters), string startDate = default(string), bool? template = default(bool?), int? templateId = default(int?))
        {
            this.Active = active;
            this.AutoEstimates = autoEstimates;
            this.Billable = billable;
            this.Cid = cid;
            this.ClientId = clientId;
            this.ClientName = clientName;
            this.Color = color;
            this.Currency = currency;
            this.EndDate = endDate;
            this.EstimatedHours = estimatedHours;
            this.FixedFee = fixedFee;
            this.IsPrivate = isPrivate;
            this.IsShared = isShared;
            this.Name = name;
            this.Rate = rate;
            this.RateChangeMode = rateChangeMode;
            this.Recurring = recurring;
            this.RecurringParameters = recurringParameters;
            this.StartDate = startDate;
            this.Template = template;
            this.TemplateId = templateId;
        }
        
        /// <summary>
        /// Whether the project is active or archived
        /// </summary>
        /// <value>Whether the project is active or archived</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Whether estimates are based on task hours, optional, premium feature
        /// </summary>
        /// <value>Whether estimates are based on task hours, optional, premium feature</value>
        [DataMember(Name="auto_estimates", EmitDefaultValue=false)]
        public bool? AutoEstimates { get; set; }

        /// <summary>
        /// Whether the project is set as billable, optional, premium feature
        /// </summary>
        /// <value>Whether the project is set as billable, optional, premium feature</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Client ID, legacy
        /// </summary>
        /// <value>Client ID, legacy</value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public int? Cid { get; set; }

        /// <summary>
        /// Client ID, optional
        /// </summary>
        /// <value>Client ID, optional</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public int? ClientId { get; set; }

        /// <summary>
        /// Client name, optional
        /// </summary>
        /// <value>Client name, optional</value>
        [DataMember(Name="client_name", EmitDefaultValue=false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Project color
        /// </summary>
        /// <value>Project color</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Project currency, optional, premium feature
        /// </summary>
        /// <value>Project currency, optional, premium feature</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// End date of a project timeframe
        /// </summary>
        /// <value>End date of a project timeframe</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Estimated hours, optional, premium feature
        /// </summary>
        /// <value>Estimated hours, optional, premium feature</value>
        [DataMember(Name="estimated_hours", EmitDefaultValue=false)]
        public int? EstimatedHours { get; set; }

        /// <summary>
        /// Project fixed fee, optional, premium feature
        /// </summary>
        /// <value>Project fixed fee, optional, premium feature</value>
        [DataMember(Name="fixed_fee", EmitDefaultValue=false)]
        public decimal? FixedFee { get; set; }

        /// <summary>
        /// Whether the project is private or not
        /// </summary>
        /// <value>Whether the project is private or not</value>
        [DataMember(Name="is_private", EmitDefaultValue=false)]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Shared
        /// </summary>
        /// <value>Shared</value>
        [DataMember(Name="is_shared", EmitDefaultValue=false)]
        public bool? IsShared { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        /// <value>Project name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Hourly rate, optional, premium feature
        /// </summary>
        /// <value>Hourly rate, optional, premium feature</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Rate change mode, optional, premium feature. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;
        /// </summary>
        /// <value>Rate change mode, optional, premium feature. Can be \&quot;start-today\&quot;, \&quot;override-current\&quot;, \&quot;override-all\&quot;</value>
        [DataMember(Name="rate_change_mode", EmitDefaultValue=false)]
        public string RateChangeMode { get; set; }

        /// <summary>
        /// Project is recurring, optional, premium feature
        /// </summary>
        /// <value>Project is recurring, optional, premium feature</value>
        [DataMember(Name="recurring", EmitDefaultValue=false)]
        public bool? Recurring { get; set; }

        /// <summary>
        /// Project recurring parameters, optional, premium feature
        /// </summary>
        /// <value>Project recurring parameters, optional, premium feature</value>
        [DataMember(Name="recurring_parameters", EmitDefaultValue=false)]
        public ProjectRecurringParameters RecurringParameters { get; set; }

        /// <summary>
        /// Start date of a project timeframe
        /// </summary>
        /// <value>Start date of a project timeframe</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Project is template, optional, premium feature
        /// </summary>
        /// <value>Project is template, optional, premium feature</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public bool? Template { get; set; }

        /// <summary>
        /// Template ID, optional
        /// </summary>
        /// <value>Template ID, optional</value>
        [DataMember(Name="template_id", EmitDefaultValue=false)]
        public int? TemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectPayload {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AutoEstimates: ").Append(AutoEstimates).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  FixedFee: ").Append(FixedFee).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateChangeMode: ").Append(RateChangeMode).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  RecurringParameters: ").Append(RecurringParameters).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectPayload);
        }

        /// <summary>
        /// Returns true if ProjectPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.AutoEstimates == input.AutoEstimates ||
                    (this.AutoEstimates != null &&
                    this.AutoEstimates.Equals(input.AutoEstimates))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.FixedFee == input.FixedFee ||
                    (this.FixedFee != null &&
                    this.FixedFee.Equals(input.FixedFee))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.IsShared == input.IsShared ||
                    (this.IsShared != null &&
                    this.IsShared.Equals(input.IsShared))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RateChangeMode == input.RateChangeMode ||
                    (this.RateChangeMode != null &&
                    this.RateChangeMode.Equals(input.RateChangeMode))
                ) && 
                (
                    this.Recurring == input.Recurring ||
                    (this.Recurring != null &&
                    this.Recurring.Equals(input.Recurring))
                ) && 
                (
                    this.RecurringParameters == input.RecurringParameters ||
                    (this.RecurringParameters != null &&
                    this.RecurringParameters.Equals(input.RecurringParameters))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AutoEstimates != null)
                    hashCode = hashCode * 59 + this.AutoEstimates.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientName != null)
                    hashCode = hashCode * 59 + this.ClientName.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.FixedFee != null)
                    hashCode = hashCode * 59 + this.FixedFee.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.IsShared != null)
                    hashCode = hashCode * 59 + this.IsShared.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RateChangeMode != null)
                    hashCode = hashCode * 59 + this.RateChangeMode.GetHashCode();
                if (this.Recurring != null)
                    hashCode = hashCode * 59 + this.Recurring.GetHashCode();
                if (this.RecurringParameters != null)
                    hashCode = hashCode * 59 + this.RecurringParameters.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
