/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// DictionaryProjectUserDict
    /// </summary>
    [DataContract]
    public partial class DictionaryProjectUserDict :  IEquatable<DictionaryProjectUserDict>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DictionaryProjectUserDict" /> class.
        /// </summary>
        /// <param name="actualHours">actualHours.</param>
        /// <param name="actualSeconds">actualSeconds.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="color">color.</param>
        /// <param name="currency">currency.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="estimatedHours">estimatedHours.</param>
        /// <param name="estimatedSeconds">estimatedSeconds.</param>
        /// <param name="fixedFee">fixedFee.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="startDate">startDate.</param>
        public DictionaryProjectUserDict(long? actualHours = default(long?), long? actualSeconds = default(long?), long? clientId = default(long?), string color = default(string), string currency = default(string), string endDate = default(string), long? estimatedHours = default(long?), long? estimatedSeconds = default(long?), decimal? fixedFee = default(decimal?), long? id = default(long?), string name = default(string), string startDate = default(string))
        {
            this.ActualHours = actualHours;
            this.ActualSeconds = actualSeconds;
            this.ClientId = clientId;
            this.Color = color;
            this.Currency = currency;
            this.EndDate = endDate;
            this.EstimatedHours = estimatedHours;
            this.EstimatedSeconds = estimatedSeconds;
            this.FixedFee = fixedFee;
            this.Id = id;
            this.Name = name;
            this.StartDate = startDate;
        }
        
        /// <summary>
        /// Gets or Sets ActualHours
        /// </summary>
        [DataMember(Name="actual_hours", EmitDefaultValue=false)]
        public long? ActualHours { get; set; }

        /// <summary>
        /// Gets or Sets ActualSeconds
        /// </summary>
        [DataMember(Name="actual_seconds", EmitDefaultValue=false)]
        public long? ActualSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public long? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedHours
        /// </summary>
        [DataMember(Name="estimated_hours", EmitDefaultValue=false)]
        public long? EstimatedHours { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedSeconds
        /// </summary>
        [DataMember(Name="estimated_seconds", EmitDefaultValue=false)]
        public long? EstimatedSeconds { get; set; }

        /// <summary>
        /// Gets or Sets FixedFee
        /// </summary>
        [DataMember(Name="fixed_fee", EmitDefaultValue=false)]
        public decimal? FixedFee { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DictionaryProjectUserDict {\n");
            sb.Append("  ActualHours: ").Append(ActualHours).Append("\n");
            sb.Append("  ActualSeconds: ").Append(ActualSeconds).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  EstimatedSeconds: ").Append(EstimatedSeconds).Append("\n");
            sb.Append("  FixedFee: ").Append(FixedFee).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DictionaryProjectUserDict);
        }

        /// <summary>
        /// Returns true if DictionaryProjectUserDict instances are equal
        /// </summary>
        /// <param name="input">Instance of DictionaryProjectUserDict to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DictionaryProjectUserDict input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActualHours == input.ActualHours ||
                    (this.ActualHours != null &&
                    this.ActualHours.Equals(input.ActualHours))
                ) && 
                (
                    this.ActualSeconds == input.ActualSeconds ||
                    (this.ActualSeconds != null &&
                    this.ActualSeconds.Equals(input.ActualSeconds))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.EstimatedSeconds == input.EstimatedSeconds ||
                    (this.EstimatedSeconds != null &&
                    this.EstimatedSeconds.Equals(input.EstimatedSeconds))
                ) && 
                (
                    this.FixedFee == input.FixedFee ||
                    (this.FixedFee != null &&
                    this.FixedFee.Equals(input.FixedFee))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualHours != null)
                    hashCode = hashCode * 59 + this.ActualHours.GetHashCode();
                if (this.ActualSeconds != null)
                    hashCode = hashCode * 59 + this.ActualSeconds.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.EstimatedSeconds != null)
                    hashCode = hashCode * 59 + this.EstimatedSeconds.GetHashCode();
                if (this.FixedFee != null)
                    hashCode = hashCode * 59 + this.FixedFee.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
