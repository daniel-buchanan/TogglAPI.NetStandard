/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsAlert
    /// </summary>
    [DataContract]
    public partial class ModelsAlert :  IEquatable<ModelsAlert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsAlert" /> class.
        /// </summary>
        /// <param name="errors">errors.</param>
        /// <param name="id">id.</param>
        /// <param name="objectType">objectType.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="receiverGroups">receiverGroups.</param>
        /// <param name="receiverRoles">receiverRoles.</param>
        /// <param name="receiverUsers">receiverUsers.</param>
        /// <param name="receivers">receivers.</param>
        /// <param name="sourceKind">sourceKind.</param>
        /// <param name="threshold">threshold.</param>
        /// <param name="thresholdType">thresholdType.</param>
        /// <param name="thresholds">using pq types is a workaround to enable reading postgres arrays into go types we should wrap these pq types to avoid polluting our domain.</param>
        /// <param name="wid">wid.</param>
        public ModelsAlert(List<ModelsAlertError> errors = default(List<ModelsAlertError>), long? id = default(long?), long? objectType = default(long?), long? projectId = default(long?), string receiverGroups = default(string), string receiverRoles = default(string), string receiverUsers = default(string), long? receivers = default(long?), string sourceKind = default(string), long? threshold = default(long?), string thresholdType = default(string), string thresholds = default(string), long? wid = default(long?))
        {
            this.Errors = errors;
            this.Id = id;
            this.ObjectType = objectType;
            this.ProjectId = projectId;
            this.ReceiverGroups = receiverGroups;
            this.ReceiverRoles = receiverRoles;
            this.ReceiverUsers = receiverUsers;
            this.Receivers = receivers;
            this.SourceKind = sourceKind;
            this.Threshold = threshold;
            this.ThresholdType = thresholdType;
            this.Thresholds = thresholds;
            this.Wid = wid;
        }
        
        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<ModelsAlertError> Errors { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name="object_type", EmitDefaultValue=false)]
        public long? ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverGroups
        /// </summary>
        [DataMember(Name="receiver_groups", EmitDefaultValue=false)]
        public string ReceiverGroups { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverRoles
        /// </summary>
        [DataMember(Name="receiver_roles", EmitDefaultValue=false)]
        public string ReceiverRoles { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverUsers
        /// </summary>
        [DataMember(Name="receiver_users", EmitDefaultValue=false)]
        public string ReceiverUsers { get; set; }

        /// <summary>
        /// Gets or Sets Receivers
        /// </summary>
        [DataMember(Name="receivers", EmitDefaultValue=false)]
        public long? Receivers { get; set; }

        /// <summary>
        /// Gets or Sets SourceKind
        /// </summary>
        [DataMember(Name="source_kind", EmitDefaultValue=false)]
        public string SourceKind { get; set; }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public long? Threshold { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdType
        /// </summary>
        [DataMember(Name="threshold_type", EmitDefaultValue=false)]
        public string ThresholdType { get; set; }

        /// <summary>
        /// using pq types is a workaround to enable reading postgres arrays into go types we should wrap these pq types to avoid polluting our domain
        /// </summary>
        /// <value>using pq types is a workaround to enable reading postgres arrays into go types we should wrap these pq types to avoid polluting our domain</value>
        [DataMember(Name="thresholds", EmitDefaultValue=false)]
        public string Thresholds { get; set; }

        /// <summary>
        /// Gets or Sets Wid
        /// </summary>
        [DataMember(Name="wid", EmitDefaultValue=false)]
        public long? Wid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsAlert {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ReceiverGroups: ").Append(ReceiverGroups).Append("\n");
            sb.Append("  ReceiverRoles: ").Append(ReceiverRoles).Append("\n");
            sb.Append("  ReceiverUsers: ").Append(ReceiverUsers).Append("\n");
            sb.Append("  Receivers: ").Append(Receivers).Append("\n");
            sb.Append("  SourceKind: ").Append(SourceKind).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  ThresholdType: ").Append(ThresholdType).Append("\n");
            sb.Append("  Thresholds: ").Append(Thresholds).Append("\n");
            sb.Append("  Wid: ").Append(Wid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsAlert);
        }

        /// <summary>
        /// Returns true if ModelsAlert instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsAlert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ReceiverGroups == input.ReceiverGroups ||
                    (this.ReceiverGroups != null &&
                    this.ReceiverGroups.Equals(input.ReceiverGroups))
                ) && 
                (
                    this.ReceiverRoles == input.ReceiverRoles ||
                    (this.ReceiverRoles != null &&
                    this.ReceiverRoles.Equals(input.ReceiverRoles))
                ) && 
                (
                    this.ReceiverUsers == input.ReceiverUsers ||
                    (this.ReceiverUsers != null &&
                    this.ReceiverUsers.Equals(input.ReceiverUsers))
                ) && 
                (
                    this.Receivers == input.Receivers ||
                    (this.Receivers != null &&
                    this.Receivers.Equals(input.Receivers))
                ) && 
                (
                    this.SourceKind == input.SourceKind ||
                    (this.SourceKind != null &&
                    this.SourceKind.Equals(input.SourceKind))
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                ) && 
                (
                    this.ThresholdType == input.ThresholdType ||
                    (this.ThresholdType != null &&
                    this.ThresholdType.Equals(input.ThresholdType))
                ) && 
                (
                    this.Thresholds == input.Thresholds ||
                    (this.Thresholds != null &&
                    this.Thresholds.Equals(input.Thresholds))
                ) && 
                (
                    this.Wid == input.Wid ||
                    (this.Wid != null &&
                    this.Wid.Equals(input.Wid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ReceiverGroups != null)
                    hashCode = hashCode * 59 + this.ReceiverGroups.GetHashCode();
                if (this.ReceiverRoles != null)
                    hashCode = hashCode * 59 + this.ReceiverRoles.GetHashCode();
                if (this.ReceiverUsers != null)
                    hashCode = hashCode * 59 + this.ReceiverUsers.GetHashCode();
                if (this.Receivers != null)
                    hashCode = hashCode * 59 + this.Receivers.GetHashCode();
                if (this.SourceKind != null)
                    hashCode = hashCode * 59 + this.SourceKind.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                if (this.ThresholdType != null)
                    hashCode = hashCode * 59 + this.ThresholdType.GetHashCode();
                if (this.Thresholds != null)
                    hashCode = hashCode * 59 + this.Thresholds.GetHashCode();
                if (this.Wid != null)
                    hashCode = hashCode * 59 + this.Wid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
