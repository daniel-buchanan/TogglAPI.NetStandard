/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsSSOInvitation
    /// </summary>
    [DataContract]
    public partial class ModelsSSOInvitation :  IEquatable<ModelsSSOInvitation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsSSOInvitation" /> class.
        /// </summary>
        /// <param name="accountsSignupUrl">AccountsSignupURL is a legacy field, should be removed one more after this issue gets done https://github.com/toggl/accounts-fe/issues/704.</param>
        /// <param name="code">code.</param>
        /// <param name="email">email.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="senderEmail">senderEmail.</param>
        /// <param name="senderName">senderName.</param>
        /// <param name="sso">sso.</param>
        /// <param name="token">token.</param>
        public ModelsSSOInvitation(string accountsSignupUrl = default(string), string code = default(string), string email = default(string), int? organizationId = default(int?), string senderEmail = default(string), string senderName = default(string), bool? sso = default(bool?), string token = default(string))
        {
            this.AccountsSignupUrl = accountsSignupUrl;
            this.Code = code;
            this.Email = email;
            this.OrganizationId = organizationId;
            this.SenderEmail = senderEmail;
            this.SenderName = senderName;
            this.Sso = sso;
            this.Token = token;
        }
        
        /// <summary>
        /// AccountsSignupURL is a legacy field, should be removed one more after this issue gets done https://github.com/toggl/accounts-fe/issues/704
        /// </summary>
        /// <value>AccountsSignupURL is a legacy field, should be removed one more after this issue gets done https://github.com/toggl/accounts-fe/issues/704</value>
        [DataMember(Name="accounts_signup_url", EmitDefaultValue=false)]
        public string AccountsSignupUrl { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public int? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets SenderEmail
        /// </summary>
        [DataMember(Name="sender_email", EmitDefaultValue=false)]
        public string SenderEmail { get; set; }

        /// <summary>
        /// Gets or Sets SenderName
        /// </summary>
        [DataMember(Name="sender_name", EmitDefaultValue=false)]
        public string SenderName { get; set; }

        /// <summary>
        /// Gets or Sets Sso
        /// </summary>
        [DataMember(Name="sso", EmitDefaultValue=false)]
        public bool? Sso { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsSSOInvitation {\n");
            sb.Append("  AccountsSignupUrl: ").Append(AccountsSignupUrl).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  Sso: ").Append(Sso).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsSSOInvitation);
        }

        /// <summary>
        /// Returns true if ModelsSSOInvitation instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsSSOInvitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsSSOInvitation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountsSignupUrl == input.AccountsSignupUrl ||
                    (this.AccountsSignupUrl != null &&
                    this.AccountsSignupUrl.Equals(input.AccountsSignupUrl))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                ) && 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                ) && 
                (
                    this.Sso == input.Sso ||
                    (this.Sso != null &&
                    this.Sso.Equals(input.Sso))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountsSignupUrl != null)
                    hashCode = hashCode * 59 + this.AccountsSignupUrl.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.SenderEmail != null)
                    hashCode = hashCode * 59 + this.SenderEmail.GetHashCode();
                if (this.SenderName != null)
                    hashCode = hashCode * 59 + this.SenderName.GetHashCode();
                if (this.Sso != null)
                    hashCode = hashCode * 59 + this.Sso.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
