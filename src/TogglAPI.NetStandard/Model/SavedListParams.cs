/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// SavedListParams
    /// </summary>
    [DataContract]
    public partial class SavedListParams :  IEquatable<SavedListParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SavedListParams" /> class.
        /// </summary>
        /// <param name="fixedDates">fixedDates.</param>
        /// <param name="name">name.</param>
        /// <param name="ownerID">ownerID.</param>
        /// <param name="page">page.</param>
        /// <param name="perPage">perPage.</param>
        /// <param name="_public">_public.</param>
        /// <param name="scheduled">scheduled.</param>
        /// <param name="sortDirection">sortDirection.</param>
        /// <param name="sortField">sortField.</param>
        public SavedListParams(bool? fixedDates = default(bool?), string name = default(string), int? ownerID = default(int?), int? page = default(int?), int? perPage = default(int?), bool? _public = default(bool?), bool? scheduled = default(bool?), string sortDirection = default(string), string sortField = default(string))
        {
            this.FixedDates = fixedDates;
            this.Name = name;
            this.OwnerID = ownerID;
            this.Page = page;
            this.PerPage = perPage;
            this.Public = _public;
            this.Scheduled = scheduled;
            this.SortDirection = sortDirection;
            this.SortField = sortField;
        }
        
        /// <summary>
        /// Gets or Sets FixedDates
        /// </summary>
        [DataMember(Name="fixed_dates", EmitDefaultValue=false)]
        public bool? FixedDates { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OwnerID
        /// </summary>
        [DataMember(Name="ownerID", EmitDefaultValue=false)]
        public int? OwnerID { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int? Page { get; set; }

        /// <summary>
        /// Gets or Sets PerPage
        /// </summary>
        [DataMember(Name="per_page", EmitDefaultValue=false)]
        public int? PerPage { get; set; }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool? Public { get; set; }

        /// <summary>
        /// Gets or Sets Scheduled
        /// </summary>
        [DataMember(Name="scheduled", EmitDefaultValue=false)]
        public bool? Scheduled { get; set; }

        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [DataMember(Name="sort_direction", EmitDefaultValue=false)]
        public string SortDirection { get; set; }

        /// <summary>
        /// Gets or Sets SortField
        /// </summary>
        [DataMember(Name="sort_field", EmitDefaultValue=false)]
        public string SortField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SavedListParams {\n");
            sb.Append("  FixedDates: ").Append(FixedDates).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerID: ").Append(OwnerID).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  Scheduled: ").Append(Scheduled).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SavedListParams);
        }

        /// <summary>
        /// Returns true if SavedListParams instances are equal
        /// </summary>
        /// <param name="input">Instance of SavedListParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedListParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FixedDates == input.FixedDates ||
                    (this.FixedDates != null &&
                    this.FixedDates.Equals(input.FixedDates))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OwnerID == input.OwnerID ||
                    (this.OwnerID != null &&
                    this.OwnerID.Equals(input.OwnerID))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.PerPage == input.PerPage ||
                    (this.PerPage != null &&
                    this.PerPage.Equals(input.PerPage))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.Scheduled == input.Scheduled ||
                    (this.Scheduled != null &&
                    this.Scheduled.Equals(input.Scheduled))
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    (this.SortDirection != null &&
                    this.SortDirection.Equals(input.SortDirection))
                ) && 
                (
                    this.SortField == input.SortField ||
                    (this.SortField != null &&
                    this.SortField.Equals(input.SortField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FixedDates != null)
                    hashCode = hashCode * 59 + this.FixedDates.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OwnerID != null)
                    hashCode = hashCode * 59 + this.OwnerID.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.PerPage != null)
                    hashCode = hashCode * 59 + this.PerPage.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.Scheduled != null)
                    hashCode = hashCode * 59 + this.Scheduled.GetHashCode();
                if (this.SortDirection != null)
                    hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                if (this.SortField != null)
                    hashCode = hashCode * 59 + this.SortField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
