/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ProjectsGraphItem
    /// </summary>
    [DataContract]
    public partial class ProjectsGraphItem :  IEquatable<ProjectsGraphItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsGraphItem" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="earnings">earnings.</param>
        /// <param name="labourCost">labourCost.</param>
        public ProjectsGraphItem(string date = default(string), long? earnings = default(long?), long? labourCost = default(long?))
        {
            this.Date = date;
            this.Earnings = earnings;
            this.LabourCost = labourCost;
        }
        
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Earnings
        /// </summary>
        [DataMember(Name="earnings", EmitDefaultValue=false)]
        public long? Earnings { get; set; }

        /// <summary>
        /// Gets or Sets LabourCost
        /// </summary>
        [DataMember(Name="labour_cost", EmitDefaultValue=false)]
        public long? LabourCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectsGraphItem {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Earnings: ").Append(Earnings).Append("\n");
            sb.Append("  LabourCost: ").Append(LabourCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectsGraphItem);
        }

        /// <summary>
        /// Returns true if ProjectsGraphItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectsGraphItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectsGraphItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Earnings == input.Earnings ||
                    (this.Earnings != null &&
                    this.Earnings.Equals(input.Earnings))
                ) && 
                (
                    this.LabourCost == input.LabourCost ||
                    (this.LabourCost != null &&
                    this.LabourCost.Equals(input.LabourCost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Earnings != null)
                    hashCode = hashCode * 59 + this.Earnings.GetHashCode();
                if (this.LabourCost != null)
                    hashCode = hashCode * 59 + this.LabourCost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
