/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ProjectsDataTrendsProject
    /// </summary>
    [DataContract]
    public partial class ProjectsDataTrendsProject :  IEquatable<ProjectsDataTrendsProject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsDataTrendsProject" /> class.
        /// </summary>
        /// <param name="billableSeconds">billableSeconds.</param>
        /// <param name="color">color.</param>
        /// <param name="currency">currency.</param>
        /// <param name="earnings">earnings.</param>
        /// <param name="name">name.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="totalSeconds">totalSeconds.</param>
        public ProjectsDataTrendsProject(int? billableSeconds = default(int?), string color = default(string), string currency = default(string), int? earnings = default(int?), string name = default(string), int? projectId = default(int?), int? totalSeconds = default(int?))
        {
            this.BillableSeconds = billableSeconds;
            this.Color = color;
            this.Currency = currency;
            this.Earnings = earnings;
            this.Name = name;
            this.ProjectId = projectId;
            this.TotalSeconds = totalSeconds;
        }
        
        /// <summary>
        /// Gets or Sets BillableSeconds
        /// </summary>
        [DataMember(Name="billable_seconds", EmitDefaultValue=false)]
        public int? BillableSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Earnings
        /// </summary>
        [DataMember(Name="earnings", EmitDefaultValue=false)]
        public int? Earnings { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets TotalSeconds
        /// </summary>
        [DataMember(Name="total_seconds", EmitDefaultValue=false)]
        public int? TotalSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectsDataTrendsProject {\n");
            sb.Append("  BillableSeconds: ").Append(BillableSeconds).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Earnings: ").Append(Earnings).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TotalSeconds: ").Append(TotalSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectsDataTrendsProject);
        }

        /// <summary>
        /// Returns true if ProjectsDataTrendsProject instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectsDataTrendsProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectsDataTrendsProject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillableSeconds == input.BillableSeconds ||
                    (this.BillableSeconds != null &&
                    this.BillableSeconds.Equals(input.BillableSeconds))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Earnings == input.Earnings ||
                    (this.Earnings != null &&
                    this.Earnings.Equals(input.Earnings))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.TotalSeconds == input.TotalSeconds ||
                    (this.TotalSeconds != null &&
                    this.TotalSeconds.Equals(input.TotalSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillableSeconds != null)
                    hashCode = hashCode * 59 + this.BillableSeconds.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Earnings != null)
                    hashCode = hashCode * 59 + this.Earnings.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.TotalSeconds != null)
                    hashCode = hashCode * 59 + this.TotalSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
