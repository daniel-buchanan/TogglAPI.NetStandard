/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// BillingPricingStruct
    /// </summary>
    [DataContract]
    public partial class BillingPricingStruct :  IEquatable<BillingPricingStruct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPricingStruct" /> class.
        /// </summary>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="discountPercentage">discountPercentage.</param>
        /// <param name="discountTo">discountTo.</param>
        /// <param name="plans">plans.</param>
        /// <param name="taxIncluded">taxIncluded.</param>
        /// <param name="taxPercentage">taxPercentage.</param>
        /// <param name="taxType">taxType.</param>
        /// <param name="userCount">userCount.</param>
        public BillingPricingStruct(int? currencyId = default(int?), int? discountPercentage = default(int?), string discountTo = default(string), List<BillingFancyPlan> plans = default(List<BillingFancyPlan>), bool? taxIncluded = default(bool?), decimal? taxPercentage = default(decimal?), string taxType = default(string), int? userCount = default(int?))
        {
            this.CurrencyId = currencyId;
            this.DiscountPercentage = discountPercentage;
            this.DiscountTo = discountTo;
            this.Plans = plans;
            this.TaxIncluded = taxIncluded;
            this.TaxPercentage = taxPercentage;
            this.TaxType = taxType;
            this.UserCount = userCount;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="currency_id", EmitDefaultValue=false)]
        public int? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercentage
        /// </summary>
        [DataMember(Name="discount_percentage", EmitDefaultValue=false)]
        public int? DiscountPercentage { get; set; }

        /// <summary>
        /// Gets or Sets DiscountTo
        /// </summary>
        [DataMember(Name="discount_to", EmitDefaultValue=false)]
        public string DiscountTo { get; set; }

        /// <summary>
        /// Gets or Sets Plans
        /// </summary>
        [DataMember(Name="plans", EmitDefaultValue=false)]
        public List<BillingFancyPlan> Plans { get; set; }

        /// <summary>
        /// Gets or Sets TaxIncluded
        /// </summary>
        [DataMember(Name="tax_included", EmitDefaultValue=false)]
        public bool? TaxIncluded { get; set; }

        /// <summary>
        /// Gets or Sets TaxPercentage
        /// </summary>
        [DataMember(Name="tax_percentage", EmitDefaultValue=false)]
        public decimal? TaxPercentage { get; set; }

        /// <summary>
        /// Gets or Sets TaxType
        /// </summary>
        [DataMember(Name="tax_type", EmitDefaultValue=false)]
        public string TaxType { get; set; }

        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name="user_count", EmitDefaultValue=false)]
        public int? UserCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingPricingStruct {\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  DiscountTo: ").Append(DiscountTo).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("  TaxIncluded: ").Append(TaxIncluded).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingPricingStruct);
        }

        /// <summary>
        /// Returns true if BillingPricingStruct instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingPricingStruct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingPricingStruct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.DiscountPercentage == input.DiscountPercentage ||
                    (this.DiscountPercentage != null &&
                    this.DiscountPercentage.Equals(input.DiscountPercentage))
                ) && 
                (
                    this.DiscountTo == input.DiscountTo ||
                    (this.DiscountTo != null &&
                    this.DiscountTo.Equals(input.DiscountTo))
                ) && 
                (
                    this.Plans == input.Plans ||
                    this.Plans != null &&
                    this.Plans.SequenceEqual(input.Plans)
                ) && 
                (
                    this.TaxIncluded == input.TaxIncluded ||
                    (this.TaxIncluded != null &&
                    this.TaxIncluded.Equals(input.TaxIncluded))
                ) && 
                (
                    this.TaxPercentage == input.TaxPercentage ||
                    (this.TaxPercentage != null &&
                    this.TaxPercentage.Equals(input.TaxPercentage))
                ) && 
                (
                    this.TaxType == input.TaxType ||
                    (this.TaxType != null &&
                    this.TaxType.Equals(input.TaxType))
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.DiscountPercentage != null)
                    hashCode = hashCode * 59 + this.DiscountPercentage.GetHashCode();
                if (this.DiscountTo != null)
                    hashCode = hashCode * 59 + this.DiscountTo.GetHashCode();
                if (this.Plans != null)
                    hashCode = hashCode * 59 + this.Plans.GetHashCode();
                if (this.TaxIncluded != null)
                    hashCode = hashCode * 59 + this.TaxIncluded.GetHashCode();
                if (this.TaxPercentage != null)
                    hashCode = hashCode * 59 + this.TaxPercentage.GetHashCode();
                if (this.TaxType != null)
                    hashCode = hashCode * 59 + this.TaxType.GetHashCode();
                if (this.UserCount != null)
                    hashCode = hashCode * 59 + this.UserCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
