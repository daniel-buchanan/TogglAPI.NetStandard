/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsFavorite
    /// </summary>
    [DataContract]
    public partial class ModelsFavorite :  IEquatable<ModelsFavorite>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsFavorite" /> class.
        /// </summary>
        /// <param name="billable">billable.</param>
        /// <param name="clientName">Related entities meta fields - if requested.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="deletedAt">deletedAt.</param>
        /// <param name="description">description.</param>
        /// <param name="favoriteId">favoriteId.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="projectActive">projectActive.</param>
        /// <param name="projectColor">projectColor.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="_public">_public.</param>
        /// <param name="rank">rank.</param>
        /// <param name="serverDeletedAt">serverDeletedAt.</param>
        /// <param name="tagIds">tagIds.</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="taskName">taskName.</param>
        /// <param name="userId">userId.</param>
        /// <param name="wasPublicAt">wasPublicAt.</param>
        /// <param name="workspaceId">workspaceId.</param>
        public ModelsFavorite(bool? billable = default(bool?), string clientName = default(string), string createdAt = default(string), string deletedAt = default(string), string description = default(string), long? favoriteId = default(long?), string permissions = default(string), bool? projectActive = default(bool?), string projectColor = default(string), long? projectId = default(long?), string projectName = default(string), bool? _public = default(bool?), long? rank = default(long?), string serverDeletedAt = default(string), ModelsIntArray tagIds = default(ModelsIntArray), long? taskId = default(long?), string taskName = default(string), long? userId = default(long?), string wasPublicAt = default(string), long? workspaceId = default(long?))
        {
            this.Billable = billable;
            this.ClientName = clientName;
            this.CreatedAt = createdAt;
            this.DeletedAt = deletedAt;
            this.Description = description;
            this.FavoriteId = favoriteId;
            this.Permissions = permissions;
            this.ProjectActive = projectActive;
            this.ProjectColor = projectColor;
            this.ProjectId = projectId;
            this.ProjectName = projectName;
            this.Public = _public;
            this.Rank = rank;
            this.ServerDeletedAt = serverDeletedAt;
            this.TagIds = tagIds;
            this.TaskId = taskId;
            this.TaskName = taskName;
            this.UserId = userId;
            this.WasPublicAt = wasPublicAt;
            this.WorkspaceId = workspaceId;
        }
        
        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Related entities meta fields - if requested
        /// </summary>
        /// <value>Related entities meta fields - if requested</value>
        [DataMember(Name="client_name", EmitDefaultValue=false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public string DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FavoriteId
        /// </summary>
        [DataMember(Name="favorite_id", EmitDefaultValue=false)]
        public long? FavoriteId { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public string Permissions { get; set; }

        /// <summary>
        /// Gets or Sets ProjectActive
        /// </summary>
        [DataMember(Name="project_active", EmitDefaultValue=false)]
        public bool? ProjectActive { get; set; }

        /// <summary>
        /// Gets or Sets ProjectColor
        /// </summary>
        [DataMember(Name="project_color", EmitDefaultValue=false)]
        public string ProjectColor { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public long? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="project_name", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool? Public { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public long? Rank { get; set; }

        /// <summary>
        /// Gets or Sets ServerDeletedAt
        /// </summary>
        [DataMember(Name="server_deleted_at", EmitDefaultValue=false)]
        public string ServerDeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [DataMember(Name="tag_ids", EmitDefaultValue=false)]
        public ModelsIntArray TagIds { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="task_id", EmitDefaultValue=false)]
        public long? TaskId { get; set; }

        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>
        [DataMember(Name="task_name", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets WasPublicAt
        /// </summary>
        [DataMember(Name="was_public_at", EmitDefaultValue=false)]
        public string WasPublicAt { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public long? WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsFavorite {\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FavoriteId: ").Append(FavoriteId).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  ProjectActive: ").Append(ProjectActive).Append("\n");
            sb.Append("  ProjectColor: ").Append(ProjectColor).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  ServerDeletedAt: ").Append(ServerDeletedAt).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WasPublicAt: ").Append(WasPublicAt).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsFavorite);
        }

        /// <summary>
        /// Returns true if ModelsFavorite instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsFavorite to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsFavorite input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FavoriteId == input.FavoriteId ||
                    (this.FavoriteId != null &&
                    this.FavoriteId.Equals(input.FavoriteId))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.ProjectActive == input.ProjectActive ||
                    (this.ProjectActive != null &&
                    this.ProjectActive.Equals(input.ProjectActive))
                ) && 
                (
                    this.ProjectColor == input.ProjectColor ||
                    (this.ProjectColor != null &&
                    this.ProjectColor.Equals(input.ProjectColor))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.ServerDeletedAt == input.ServerDeletedAt ||
                    (this.ServerDeletedAt != null &&
                    this.ServerDeletedAt.Equals(input.ServerDeletedAt))
                ) && 
                (
                    this.TagIds == input.TagIds ||
                    (this.TagIds != null &&
                    this.TagIds.Equals(input.TagIds))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.WasPublicAt == input.WasPublicAt ||
                    (this.WasPublicAt != null &&
                    this.WasPublicAt.Equals(input.WasPublicAt))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.ClientName != null)
                    hashCode = hashCode * 59 + this.ClientName.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FavoriteId != null)
                    hashCode = hashCode * 59 + this.FavoriteId.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.ProjectActive != null)
                    hashCode = hashCode * 59 + this.ProjectActive.GetHashCode();
                if (this.ProjectColor != null)
                    hashCode = hashCode * 59 + this.ProjectColor.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.ServerDeletedAt != null)
                    hashCode = hashCode * 59 + this.ServerDeletedAt.GetHashCode();
                if (this.TagIds != null)
                    hashCode = hashCode * 59 + this.TagIds.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.WasPublicAt != null)
                    hashCode = hashCode * 59 + this.WasPublicAt.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
