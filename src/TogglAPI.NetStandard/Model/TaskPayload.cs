/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// TaskPayload
    /// </summary>
    [DataContract]
    public partial class TaskPayload :  IEquatable<TaskPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskPayload" /> class.
        /// </summary>
        /// <param name="active">Use false to mark the task as done.</param>
        /// <param name="estimatedSeconds">Task estimation in seconds.</param>
        /// <param name="name">Name.</param>
        /// <param name="projectId">Project ID.</param>
        /// <param name="userId">Creator ID, if omitted will use requester user ID.</param>
        /// <param name="workspaceId">Workspace ID.</param>
        public TaskPayload(bool? active = default(bool?), int? estimatedSeconds = default(int?), string name = default(string), int? projectId = default(int?), int? userId = default(int?), int? workspaceId = default(int?))
        {
            this.Active = active;
            this.EstimatedSeconds = estimatedSeconds;
            this.Name = name;
            this.ProjectId = projectId;
            this.UserId = userId;
            this.WorkspaceId = workspaceId;
        }
        
        /// <summary>
        /// Use false to mark the task as done
        /// </summary>
        /// <value>Use false to mark the task as done</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Task estimation in seconds
        /// </summary>
        /// <value>Task estimation in seconds</value>
        [DataMember(Name="estimated_seconds", EmitDefaultValue=false)]
        public int? EstimatedSeconds { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Project ID
        /// </summary>
        /// <value>Project ID</value>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// Creator ID, if omitted will use requester user ID
        /// </summary>
        /// <value>Creator ID, if omitted will use requester user ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Workspace ID
        /// </summary>
        /// <value>Workspace ID</value>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public int? WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskPayload {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  EstimatedSeconds: ").Append(EstimatedSeconds).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskPayload);
        }

        /// <summary>
        /// Returns true if TaskPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.EstimatedSeconds == input.EstimatedSeconds ||
                    (this.EstimatedSeconds != null &&
                    this.EstimatedSeconds.Equals(input.EstimatedSeconds))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.EstimatedSeconds != null)
                    hashCode = hashCode * 59 + this.EstimatedSeconds.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
