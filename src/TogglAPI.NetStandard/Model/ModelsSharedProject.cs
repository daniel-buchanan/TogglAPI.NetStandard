/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsSharedProject
    /// </summary>
    [DataContract]
    public partial class ModelsSharedProject :  IEquatable<ModelsSharedProject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsSharedProject" /> class.
        /// </summary>
        /// <param name="active">Whether the project is active or archived.</param>
        /// <param name="actualHours">Actual hours.</param>
        /// <param name="actualSeconds">Actual seconds.</param>
        /// <param name="at">Last updated date.</param>
        /// <param name="autoEstimates">Whether estimates are based on task hours, premium feature.</param>
        /// <param name="billable">Whether the project is billable, premium feature.</param>
        /// <param name="canTrackTime">canTrackTime.</param>
        /// <param name="cid">Client ID legacy field.</param>
        /// <param name="clientId">Client ID.</param>
        /// <param name="color">Color.</param>
        /// <param name="createdAt">Creation date.</param>
        /// <param name="currency">Currency, premium feature.</param>
        /// <param name="currentPeriod">Current project period, premium feature.</param>
        /// <param name="endDate">End date.</param>
        /// <param name="estimatedHours">Estimated hours.</param>
        /// <param name="estimatedSeconds">Estimated seconds.</param>
        /// <param name="fixedFee">Fixed fee, premium feature.</param>
        /// <param name="id">Project ID.</param>
        /// <param name="isPrivate">Whether the project is private.</param>
        /// <param name="isShared">Shared Project.</param>
        /// <param name="name">Name.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="rate">Hourly rate.</param>
        /// <param name="rateLastUpdated">Last date for rate change.</param>
        /// <param name="recurring">Whether the project is recurring, premium feature.</param>
        /// <param name="recurringParameters">Project recurring parameters, premium feature.</param>
        /// <param name="serverDeletedAt">Deletion date.</param>
        /// <param name="sharedAt">sharedAt.</param>
        /// <param name="sharedHash">sharedHash.</param>
        /// <param name="startDate">Start date.</param>
        /// <param name="status">Status of the project (upcoming, active, ended, archived, deleted).</param>
        /// <param name="tasks">tasks.</param>
        /// <param name="template">Whether the project is used as template, premium feature.</param>
        /// <param name="templateId">Template ID.</param>
        /// <param name="wid">Workspace ID legacy field.</param>
        /// <param name="workspaceId">Workspace ID.</param>
        public ModelsSharedProject(bool? active = default(bool?), long? actualHours = default(long?), long? actualSeconds = default(long?), string at = default(string), bool? autoEstimates = default(bool?), bool? billable = default(bool?), bool? canTrackTime = default(bool?), long? cid = default(long?), long? clientId = default(long?), string color = default(string), string createdAt = default(string), string currency = default(string), ModelsRecurringPeriod currentPeriod = default(ModelsRecurringPeriod), string endDate = default(string), long? estimatedHours = default(long?), long? estimatedSeconds = default(long?), decimal? fixedFee = default(decimal?), long? id = default(long?), bool? isPrivate = default(bool?), bool? isShared = default(bool?), string name = default(string), string permissions = default(string), decimal? rate = default(decimal?), string rateLastUpdated = default(string), bool? recurring = default(bool?), List<ModelsRecurringProjectParameters> recurringParameters = default(List<ModelsRecurringProjectParameters>), string serverDeletedAt = default(string), string sharedAt = default(string), string sharedHash = default(string), string startDate = default(string), string status = default(string), List<ModelsTask> tasks = default(List<ModelsTask>), bool? template = default(bool?), long? templateId = default(long?), long? wid = default(long?), long? workspaceId = default(long?))
        {
            this.Active = active;
            this.ActualHours = actualHours;
            this.ActualSeconds = actualSeconds;
            this.At = at;
            this.AutoEstimates = autoEstimates;
            this.Billable = billable;
            this.CanTrackTime = canTrackTime;
            this.Cid = cid;
            this.ClientId = clientId;
            this.Color = color;
            this.CreatedAt = createdAt;
            this.Currency = currency;
            this.CurrentPeriod = currentPeriod;
            this.EndDate = endDate;
            this.EstimatedHours = estimatedHours;
            this.EstimatedSeconds = estimatedSeconds;
            this.FixedFee = fixedFee;
            this.Id = id;
            this.IsPrivate = isPrivate;
            this.IsShared = isShared;
            this.Name = name;
            this.Permissions = permissions;
            this.Rate = rate;
            this.RateLastUpdated = rateLastUpdated;
            this.Recurring = recurring;
            this.RecurringParameters = recurringParameters;
            this.ServerDeletedAt = serverDeletedAt;
            this.SharedAt = sharedAt;
            this.SharedHash = sharedHash;
            this.StartDate = startDate;
            this.Status = status;
            this.Tasks = tasks;
            this.Template = template;
            this.TemplateId = templateId;
            this.Wid = wid;
            this.WorkspaceId = workspaceId;
        }
        
        /// <summary>
        /// Whether the project is active or archived
        /// </summary>
        /// <value>Whether the project is active or archived</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Actual hours
        /// </summary>
        /// <value>Actual hours</value>
        [DataMember(Name="actual_hours", EmitDefaultValue=false)]
        public long? ActualHours { get; set; }

        /// <summary>
        /// Actual seconds
        /// </summary>
        /// <value>Actual seconds</value>
        [DataMember(Name="actual_seconds", EmitDefaultValue=false)]
        public long? ActualSeconds { get; set; }

        /// <summary>
        /// Last updated date
        /// </summary>
        /// <value>Last updated date</value>
        [DataMember(Name="at", EmitDefaultValue=false)]
        public string At { get; set; }

        /// <summary>
        /// Whether estimates are based on task hours, premium feature
        /// </summary>
        /// <value>Whether estimates are based on task hours, premium feature</value>
        [DataMember(Name="auto_estimates", EmitDefaultValue=false)]
        public bool? AutoEstimates { get; set; }

        /// <summary>
        /// Whether the project is billable, premium feature
        /// </summary>
        /// <value>Whether the project is billable, premium feature</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets CanTrackTime
        /// </summary>
        [DataMember(Name="can_track_time", EmitDefaultValue=false)]
        public bool? CanTrackTime { get; set; }

        /// <summary>
        /// Client ID legacy field
        /// </summary>
        /// <value>Client ID legacy field</value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public long? Cid { get; set; }

        /// <summary>
        /// Client ID
        /// </summary>
        /// <value>Client ID</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public long? ClientId { get; set; }

        /// <summary>
        /// Color
        /// </summary>
        /// <value>Color</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Currency, premium feature
        /// </summary>
        /// <value>Currency, premium feature</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Current project period, premium feature
        /// </summary>
        /// <value>Current project period, premium feature</value>
        [DataMember(Name="current_period", EmitDefaultValue=false)]
        public ModelsRecurringPeriod CurrentPeriod { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Estimated hours
        /// </summary>
        /// <value>Estimated hours</value>
        [DataMember(Name="estimated_hours", EmitDefaultValue=false)]
        public long? EstimatedHours { get; set; }

        /// <summary>
        /// Estimated seconds
        /// </summary>
        /// <value>Estimated seconds</value>
        [DataMember(Name="estimated_seconds", EmitDefaultValue=false)]
        public long? EstimatedSeconds { get; set; }

        /// <summary>
        /// Fixed fee, premium feature
        /// </summary>
        /// <value>Fixed fee, premium feature</value>
        [DataMember(Name="fixed_fee", EmitDefaultValue=false)]
        public decimal? FixedFee { get; set; }

        /// <summary>
        /// Project ID
        /// </summary>
        /// <value>Project ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Whether the project is private
        /// </summary>
        /// <value>Whether the project is private</value>
        [DataMember(Name="is_private", EmitDefaultValue=false)]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Shared Project
        /// </summary>
        /// <value>Shared Project</value>
        [DataMember(Name="is_shared", EmitDefaultValue=false)]
        public bool? IsShared { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public string Permissions { get; set; }

        /// <summary>
        /// Hourly rate
        /// </summary>
        /// <value>Hourly rate</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Last date for rate change
        /// </summary>
        /// <value>Last date for rate change</value>
        [DataMember(Name="rate_last_updated", EmitDefaultValue=false)]
        public string RateLastUpdated { get; set; }

        /// <summary>
        /// Whether the project is recurring, premium feature
        /// </summary>
        /// <value>Whether the project is recurring, premium feature</value>
        [DataMember(Name="recurring", EmitDefaultValue=false)]
        public bool? Recurring { get; set; }

        /// <summary>
        /// Project recurring parameters, premium feature
        /// </summary>
        /// <value>Project recurring parameters, premium feature</value>
        [DataMember(Name="recurring_parameters", EmitDefaultValue=false)]
        public List<ModelsRecurringProjectParameters> RecurringParameters { get; set; }

        /// <summary>
        /// Deletion date
        /// </summary>
        /// <value>Deletion date</value>
        [DataMember(Name="server_deleted_at", EmitDefaultValue=false)]
        public string ServerDeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets SharedAt
        /// </summary>
        [DataMember(Name="shared_at", EmitDefaultValue=false)]
        public string SharedAt { get; set; }

        /// <summary>
        /// Gets or Sets SharedHash
        /// </summary>
        [DataMember(Name="shared_hash", EmitDefaultValue=false)]
        public string SharedHash { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Status of the project (upcoming, active, ended, archived, deleted)
        /// </summary>
        /// <value>Status of the project (upcoming, active, ended, archived, deleted)</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public List<ModelsTask> Tasks { get; set; }

        /// <summary>
        /// Whether the project is used as template, premium feature
        /// </summary>
        /// <value>Whether the project is used as template, premium feature</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public bool? Template { get; set; }

        /// <summary>
        /// Template ID
        /// </summary>
        /// <value>Template ID</value>
        [DataMember(Name="template_id", EmitDefaultValue=false)]
        public long? TemplateId { get; set; }

        /// <summary>
        /// Workspace ID legacy field
        /// </summary>
        /// <value>Workspace ID legacy field</value>
        [DataMember(Name="wid", EmitDefaultValue=false)]
        public long? Wid { get; set; }

        /// <summary>
        /// Workspace ID
        /// </summary>
        /// <value>Workspace ID</value>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public long? WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsSharedProject {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ActualHours: ").Append(ActualHours).Append("\n");
            sb.Append("  ActualSeconds: ").Append(ActualSeconds).Append("\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  AutoEstimates: ").Append(AutoEstimates).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  CanTrackTime: ").Append(CanTrackTime).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrentPeriod: ").Append(CurrentPeriod).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  EstimatedSeconds: ").Append(EstimatedSeconds).Append("\n");
            sb.Append("  FixedFee: ").Append(FixedFee).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateLastUpdated: ").Append(RateLastUpdated).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  RecurringParameters: ").Append(RecurringParameters).Append("\n");
            sb.Append("  ServerDeletedAt: ").Append(ServerDeletedAt).Append("\n");
            sb.Append("  SharedAt: ").Append(SharedAt).Append("\n");
            sb.Append("  SharedHash: ").Append(SharedHash).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Wid: ").Append(Wid).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsSharedProject);
        }

        /// <summary>
        /// Returns true if ModelsSharedProject instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsSharedProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsSharedProject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.ActualHours == input.ActualHours ||
                    (this.ActualHours != null &&
                    this.ActualHours.Equals(input.ActualHours))
                ) && 
                (
                    this.ActualSeconds == input.ActualSeconds ||
                    (this.ActualSeconds != null &&
                    this.ActualSeconds.Equals(input.ActualSeconds))
                ) && 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.AutoEstimates == input.AutoEstimates ||
                    (this.AutoEstimates != null &&
                    this.AutoEstimates.Equals(input.AutoEstimates))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.CanTrackTime == input.CanTrackTime ||
                    (this.CanTrackTime != null &&
                    this.CanTrackTime.Equals(input.CanTrackTime))
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CurrentPeriod == input.CurrentPeriod ||
                    (this.CurrentPeriod != null &&
                    this.CurrentPeriod.Equals(input.CurrentPeriod))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.EstimatedSeconds == input.EstimatedSeconds ||
                    (this.EstimatedSeconds != null &&
                    this.EstimatedSeconds.Equals(input.EstimatedSeconds))
                ) && 
                (
                    this.FixedFee == input.FixedFee ||
                    (this.FixedFee != null &&
                    this.FixedFee.Equals(input.FixedFee))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.IsShared == input.IsShared ||
                    (this.IsShared != null &&
                    this.IsShared.Equals(input.IsShared))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RateLastUpdated == input.RateLastUpdated ||
                    (this.RateLastUpdated != null &&
                    this.RateLastUpdated.Equals(input.RateLastUpdated))
                ) && 
                (
                    this.Recurring == input.Recurring ||
                    (this.Recurring != null &&
                    this.Recurring.Equals(input.Recurring))
                ) && 
                (
                    this.RecurringParameters == input.RecurringParameters ||
                    this.RecurringParameters != null &&
                    this.RecurringParameters.SequenceEqual(input.RecurringParameters)
                ) && 
                (
                    this.ServerDeletedAt == input.ServerDeletedAt ||
                    (this.ServerDeletedAt != null &&
                    this.ServerDeletedAt.Equals(input.ServerDeletedAt))
                ) && 
                (
                    this.SharedAt == input.SharedAt ||
                    (this.SharedAt != null &&
                    this.SharedAt.Equals(input.SharedAt))
                ) && 
                (
                    this.SharedHash == input.SharedHash ||
                    (this.SharedHash != null &&
                    this.SharedHash.Equals(input.SharedHash))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Wid == input.Wid ||
                    (this.Wid != null &&
                    this.Wid.Equals(input.Wid))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.ActualHours != null)
                    hashCode = hashCode * 59 + this.ActualHours.GetHashCode();
                if (this.ActualSeconds != null)
                    hashCode = hashCode * 59 + this.ActualSeconds.GetHashCode();
                if (this.At != null)
                    hashCode = hashCode * 59 + this.At.GetHashCode();
                if (this.AutoEstimates != null)
                    hashCode = hashCode * 59 + this.AutoEstimates.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.CanTrackTime != null)
                    hashCode = hashCode * 59 + this.CanTrackTime.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CurrentPeriod != null)
                    hashCode = hashCode * 59 + this.CurrentPeriod.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.EstimatedSeconds != null)
                    hashCode = hashCode * 59 + this.EstimatedSeconds.GetHashCode();
                if (this.FixedFee != null)
                    hashCode = hashCode * 59 + this.FixedFee.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.IsShared != null)
                    hashCode = hashCode * 59 + this.IsShared.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RateLastUpdated != null)
                    hashCode = hashCode * 59 + this.RateLastUpdated.GetHashCode();
                if (this.Recurring != null)
                    hashCode = hashCode * 59 + this.Recurring.GetHashCode();
                if (this.RecurringParameters != null)
                    hashCode = hashCode * 59 + this.RecurringParameters.GetHashCode();
                if (this.ServerDeletedAt != null)
                    hashCode = hashCode * 59 + this.ServerDeletedAt.GetHashCode();
                if (this.SharedAt != null)
                    hashCode = hashCode * 59 + this.SharedAt.GetHashCode();
                if (this.SharedHash != null)
                    hashCode = hashCode * 59 + this.SharedHash.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Tasks != null)
                    hashCode = hashCode * 59 + this.Tasks.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Wid != null)
                    hashCode = hashCode * 59 + this.Wid.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
