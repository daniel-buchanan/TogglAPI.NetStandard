/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// SubscriptionInvoiceInfo
    /// </summary>
    [DataContract]
    public partial class SubscriptionInvoiceInfo :  IEquatable<SubscriptionInvoiceInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionInvoiceInfo" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="due">due.</param>
        /// <param name="id">id.</param>
        /// <param name="paidAt">paidAt.</param>
        /// <param name="taxPercentage">taxPercentage.</param>
        /// <param name="totalAmount">totalAmount.</param>
        public SubscriptionInvoiceInfo(int? amount = default(int?), string createdAt = default(string), int? currencyId = default(int?), string due = default(string), int? id = default(int?), string paidAt = default(string), decimal? taxPercentage = default(decimal?), int? totalAmount = default(int?))
        {
            this.Amount = amount;
            this.CreatedAt = createdAt;
            this.CurrencyId = currencyId;
            this.Due = due;
            this.Id = id;
            this.PaidAt = paidAt;
            this.TaxPercentage = taxPercentage;
            this.TotalAmount = totalAmount;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="currency_id", EmitDefaultValue=false)]
        public int? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets Due
        /// </summary>
        [DataMember(Name="due", EmitDefaultValue=false)]
        public string Due { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets PaidAt
        /// </summary>
        [DataMember(Name="paid_at", EmitDefaultValue=false)]
        public string PaidAt { get; set; }

        /// <summary>
        /// Gets or Sets TaxPercentage
        /// </summary>
        [DataMember(Name="tax_percentage", EmitDefaultValue=false)]
        public decimal? TaxPercentage { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="total_amount", EmitDefaultValue=false)]
        public int? TotalAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionInvoiceInfo {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  Due: ").Append(Due).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaidAt: ").Append(PaidAt).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionInvoiceInfo);
        }

        /// <summary>
        /// Returns true if SubscriptionInvoiceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionInvoiceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionInvoiceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.Due == input.Due ||
                    (this.Due != null &&
                    this.Due.Equals(input.Due))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PaidAt == input.PaidAt ||
                    (this.PaidAt != null &&
                    this.PaidAt.Equals(input.PaidAt))
                ) && 
                (
                    this.TaxPercentage == input.TaxPercentage ||
                    (this.TaxPercentage != null &&
                    this.TaxPercentage.Equals(input.TaxPercentage))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.Due != null)
                    hashCode = hashCode * 59 + this.Due.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PaidAt != null)
                    hashCode = hashCode * 59 + this.PaidAt.GetHashCode();
                if (this.TaxPercentage != null)
                    hashCode = hashCode * 59 + this.TaxPercentage.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
