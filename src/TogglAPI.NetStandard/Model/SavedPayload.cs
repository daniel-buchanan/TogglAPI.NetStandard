/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// SavedPayload
    /// </summary>
    [DataContract]
    public partial class SavedPayload :  IEquatable<SavedPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SavedPayload" /> class.
        /// </summary>
        /// <param name="fixedDaterange">fixedDaterange.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="_params">_params.</param>
        /// <param name="_public">_public.</param>
        /// <param name="regenerateToken">regenerateToken.</param>
        public SavedPayload(bool? fixedDaterange = default(bool?), long? id = default(long?), string name = default(string), Dictionary<string, object> _params = default(Dictionary<string, object>), bool? _public = default(bool?), bool? regenerateToken = default(bool?))
        {
            this.FixedDaterange = fixedDaterange;
            this.Id = id;
            this.Name = name;
            this.Params = _params;
            this.Public = _public;
            this.RegenerateToken = regenerateToken;
        }
        
        /// <summary>
        /// Gets or Sets FixedDaterange
        /// </summary>
        [DataMember(Name="fixed_daterange", EmitDefaultValue=false)]
        public bool? FixedDaterange { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public Dictionary<string, object> Params { get; set; }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool? Public { get; set; }

        /// <summary>
        /// Gets or Sets RegenerateToken
        /// </summary>
        [DataMember(Name="regenerate_token", EmitDefaultValue=false)]
        public bool? RegenerateToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SavedPayload {\n");
            sb.Append("  FixedDaterange: ").Append(FixedDaterange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  RegenerateToken: ").Append(RegenerateToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SavedPayload);
        }

        /// <summary>
        /// Returns true if SavedPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of SavedPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FixedDaterange == input.FixedDaterange ||
                    (this.FixedDaterange != null &&
                    this.FixedDaterange.Equals(input.FixedDaterange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.RegenerateToken == input.RegenerateToken ||
                    (this.RegenerateToken != null &&
                    this.RegenerateToken.Equals(input.RegenerateToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FixedDaterange != null)
                    hashCode = hashCode * 59 + this.FixedDaterange.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.RegenerateToken != null)
                    hashCode = hashCode * 59 + this.RegenerateToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
