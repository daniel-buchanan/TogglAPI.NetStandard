/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsUnifiedSubscriptionInvoice
    /// </summary>
    [DataContract]
    public partial class ModelsUnifiedSubscriptionInvoice :  IEquatable<ModelsUnifiedSubscriptionInvoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsUnifiedSubscriptionInvoice" /> class.
        /// </summary>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="currency">currency.</param>
        /// <param name="description">description.</param>
        /// <param name="hostedUrl">hostedUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="pdfUrl">pdfUrl.</param>
        /// <param name="totalAmount">totalAmount.</param>
        public ModelsUnifiedSubscriptionInvoice(DateTime? creationDate = default(DateTime?), string currency = default(string), string description = default(string), string hostedUrl = default(string), string id = default(string), string invoiceNumber = default(string), string pdfUrl = default(string), int? totalAmount = default(int?))
        {
            this.CreationDate = creationDate;
            this.Currency = currency;
            this.Description = description;
            this.HostedUrl = hostedUrl;
            this.Id = id;
            this.InvoiceNumber = invoiceNumber;
            this.PdfUrl = pdfUrl;
            this.TotalAmount = totalAmount;
        }
        
        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HostedUrl
        /// </summary>
        [DataMember(Name="hosted_url", EmitDefaultValue=false)]
        public string HostedUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoice_number", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PdfUrl
        /// </summary>
        [DataMember(Name="pdf_url", EmitDefaultValue=false)]
        public string PdfUrl { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="total_amount", EmitDefaultValue=false)]
        public int? TotalAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsUnifiedSubscriptionInvoice {\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HostedUrl: ").Append(HostedUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  PdfUrl: ").Append(PdfUrl).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsUnifiedSubscriptionInvoice);
        }

        /// <summary>
        /// Returns true if ModelsUnifiedSubscriptionInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsUnifiedSubscriptionInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsUnifiedSubscriptionInvoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HostedUrl == input.HostedUrl ||
                    (this.HostedUrl != null &&
                    this.HostedUrl.Equals(input.HostedUrl))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.PdfUrl == input.PdfUrl ||
                    (this.PdfUrl != null &&
                    this.PdfUrl.Equals(input.PdfUrl))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.HostedUrl != null)
                    hashCode = hashCode * 59 + this.HostedUrl.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.PdfUrl != null)
                    hashCode = hashCode * 59 + this.PdfUrl.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
