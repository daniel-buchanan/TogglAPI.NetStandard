/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// ModelsWindowsAutoTrackingParameter
    /// </summary>
    [DataContract]
    public partial class ModelsWindowsAutoTrackingParameter :  IEquatable<ModelsWindowsAutoTrackingParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsWindowsAutoTrackingParameter" /> class.
        /// </summary>
        /// <param name="duration">duration.</param>
        /// <param name="keyword">keyword.</param>
        /// <param name="timeOfDay">timeOfDay.</param>
        /// <param name="weekDays">weekDays.</param>
        public ModelsWindowsAutoTrackingParameter(string duration = default(string), string keyword = default(string), string timeOfDay = default(string), string weekDays = default(string))
        {
            this.Duration = duration;
            this.Keyword = keyword;
            this.TimeOfDay = timeOfDay;
            this.WeekDays = weekDays;
        }
        
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets Keyword
        /// </summary>
        [DataMember(Name="keyword", EmitDefaultValue=false)]
        public string Keyword { get; set; }

        /// <summary>
        /// Gets or Sets TimeOfDay
        /// </summary>
        [DataMember(Name="time_of_day", EmitDefaultValue=false)]
        public string TimeOfDay { get; set; }

        /// <summary>
        /// Gets or Sets WeekDays
        /// </summary>
        [DataMember(Name="week_days", EmitDefaultValue=false)]
        public string WeekDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelsWindowsAutoTrackingParameter {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  TimeOfDay: ").Append(TimeOfDay).Append("\n");
            sb.Append("  WeekDays: ").Append(WeekDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelsWindowsAutoTrackingParameter);
        }

        /// <summary>
        /// Returns true if ModelsWindowsAutoTrackingParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelsWindowsAutoTrackingParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelsWindowsAutoTrackingParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                ) && 
                (
                    this.TimeOfDay == input.TimeOfDay ||
                    (this.TimeOfDay != null &&
                    this.TimeOfDay.Equals(input.TimeOfDay))
                ) && 
                (
                    this.WeekDays == input.WeekDays ||
                    (this.WeekDays != null &&
                    this.WeekDays.Equals(input.WeekDays))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Keyword != null)
                    hashCode = hashCode * 59 + this.Keyword.GetHashCode();
                if (this.TimeOfDay != null)
                    hashCode = hashCode * 59 + this.TimeOfDay.GetHashCode();
                if (this.WeekDays != null)
                    hashCode = hashCode * 59 + this.WeekDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
