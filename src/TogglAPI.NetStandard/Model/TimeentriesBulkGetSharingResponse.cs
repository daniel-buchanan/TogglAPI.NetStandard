/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TogglAPI.NetStandard.Client.SwaggerDateConverter;

namespace TogglAPI.NetStandard.Model
{
    /// <summary>
    /// TimeentriesBulkGetSharingResponse
    /// </summary>
    [DataContract]
    public partial class TimeentriesBulkGetSharingResponse :  IEquatable<TimeentriesBulkGetSharingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeentriesBulkGetSharingResponse" /> class.
        /// </summary>
        /// <param name="isAccepted">isAccepted.</param>
        /// <param name="timeEntryId">timeEntryId.</param>
        /// <param name="timeEntryInvitationId">timeEntryInvitationId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="userName">userName.</param>
        /// <param name="workspaceId">workspaceId.</param>
        public TimeentriesBulkGetSharingResponse(bool? isAccepted = default(bool?), int? timeEntryId = default(int?), int? timeEntryInvitationId = default(int?), int? userId = default(int?), string userName = default(string), int? workspaceId = default(int?))
        {
            this.IsAccepted = isAccepted;
            this.TimeEntryId = timeEntryId;
            this.TimeEntryInvitationId = timeEntryInvitationId;
            this.UserId = userId;
            this.UserName = userName;
            this.WorkspaceId = workspaceId;
        }
        
        /// <summary>
        /// Gets or Sets IsAccepted
        /// </summary>
        [DataMember(Name="is_accepted", EmitDefaultValue=false)]
        public bool? IsAccepted { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryId
        /// </summary>
        [DataMember(Name="time_entry_id", EmitDefaultValue=false)]
        public int? TimeEntryId { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryInvitationId
        /// </summary>
        [DataMember(Name="time_entry_invitation_id", EmitDefaultValue=false)]
        public int? TimeEntryInvitationId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceId
        /// </summary>
        [DataMember(Name="workspace_id", EmitDefaultValue=false)]
        public int? WorkspaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeentriesBulkGetSharingResponse {\n");
            sb.Append("  IsAccepted: ").Append(IsAccepted).Append("\n");
            sb.Append("  TimeEntryId: ").Append(TimeEntryId).Append("\n");
            sb.Append("  TimeEntryInvitationId: ").Append(TimeEntryInvitationId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeentriesBulkGetSharingResponse);
        }

        /// <summary>
        /// Returns true if TimeentriesBulkGetSharingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeentriesBulkGetSharingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeentriesBulkGetSharingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsAccepted == input.IsAccepted ||
                    (this.IsAccepted != null &&
                    this.IsAccepted.Equals(input.IsAccepted))
                ) && 
                (
                    this.TimeEntryId == input.TimeEntryId ||
                    (this.TimeEntryId != null &&
                    this.TimeEntryId.Equals(input.TimeEntryId))
                ) && 
                (
                    this.TimeEntryInvitationId == input.TimeEntryInvitationId ||
                    (this.TimeEntryInvitationId != null &&
                    this.TimeEntryInvitationId.Equals(input.TimeEntryInvitationId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsAccepted != null)
                    hashCode = hashCode * 59 + this.IsAccepted.GetHashCode();
                if (this.TimeEntryId != null)
                    hashCode = hashCode * 59 + this.TimeEntryId.GetHashCode();
                if (this.TimeEntryInvitationId != null)
                    hashCode = hashCode * 59 + this.TimeEntryInvitationId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.WorkspaceId != null)
                    hashCode = hashCode * 59 + this.WorkspaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
