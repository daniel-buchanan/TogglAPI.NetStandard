/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get organization roles
        /// </summary>
        /// <remarks>
        /// Retrieves all roles for a specific organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>List&lt;RolesRole&gt;</returns>
        List<RolesRole> RolesProductIdOrganizationIdGet (int? productId, int? organizationId);

        /// <summary>
        /// Get organization roles
        /// </summary>
        /// <remarks>
        /// Retrieves all roles for a specific organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>ApiResponse of List&lt;RolesRole&gt;</returns>
        ApiResponse<List<RolesRole>> RolesProductIdOrganizationIdGetWithHttpInfo (int? productId, int? organizationId);
        /// <summary>
        /// Create organization role
        /// </summary>
        /// <remarks>
        /// Creates a new role within an organization with the specified product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>RolesRole</returns>
        RolesRole RolesProductIdOrganizationIdPost (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body);

        /// <summary>
        /// Create organization role
        /// </summary>
        /// <remarks>
        /// Creates a new role within an organization with the specified product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>ApiResponse of RolesRole</returns>
        ApiResponse<RolesRole> RolesProductIdOrganizationIdPostWithHttpInfo (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body);
        /// <summary>
        /// Delete organization role
        /// </summary>
        /// <remarks>
        /// Deletes a specific role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Dictionary&lt;string, &gt;</returns>
        Dictionary<string, object> RolesProductIdOrganizationIdRoleIdDelete (int? productId, int? organizationId, int? roleId);

        /// <summary>
        /// Delete organization role
        /// </summary>
        /// <remarks>
        /// Deletes a specific role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>ApiResponse of Dictionary&lt;string, &gt;</returns>
        ApiResponse<Dictionary<string, object>> RolesProductIdOrganizationIdRoleIdDeleteWithHttpInfo (int? productId, int? organizationId, int? roleId);
        /// <summary>
        /// Duplicate organization role
        /// </summary>
        /// <remarks>
        /// Duplicates a specific role within an organization by role ID with a new code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>RolesRole</returns>
        RolesRole RolesProductIdOrganizationIdRoleIdDuplicatePost (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body);

        /// <summary>
        /// Duplicate organization role
        /// </summary>
        /// <remarks>
        /// Duplicates a specific role within an organization by role ID with a new code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>ApiResponse of RolesRole</returns>
        ApiResponse<RolesRole> RolesProductIdOrganizationIdRoleIdDuplicatePostWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body);
        /// <summary>
        /// Get specific organization role
        /// </summary>
        /// <remarks>
        /// Retrieves a specific role by ID for a given organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>RolesRole</returns>
        RolesRole RolesProductIdOrganizationIdRoleIdGet (int? productId, int? organizationId, int? roleId);

        /// <summary>
        /// Get specific organization role
        /// </summary>
        /// <remarks>
        /// Retrieves a specific role by ID for a given organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>ApiResponse of RolesRole</returns>
        ApiResponse<RolesRole> RolesProductIdOrganizationIdRoleIdGetWithHttpInfo (int? productId, int? organizationId, int? roleId);
        /// <summary>
        /// Update organization role
        /// </summary>
        /// <remarks>
        /// Updates an existing role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>RolesRole</returns>
        RolesRole RolesProductIdOrganizationIdRoleIdPut (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body);

        /// <summary>
        /// Update organization role
        /// </summary>
        /// <remarks>
        /// Updates an existing role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>ApiResponse of RolesRole</returns>
        ApiResponse<RolesRole> RolesProductIdOrganizationIdRoleIdPutWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get organization roles
        /// </summary>
        /// <remarks>
        /// Retrieves all roles for a specific organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>Task of List&lt;RolesRole&gt;</returns>
        System.Threading.Tasks.Task<List<RolesRole>> RolesProductIdOrganizationIdGetAsync (int? productId, int? organizationId);

        /// <summary>
        /// Get organization roles
        /// </summary>
        /// <remarks>
        /// Retrieves all roles for a specific organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>Task of ApiResponse (List&lt;RolesRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RolesRole>>> RolesProductIdOrganizationIdGetAsyncWithHttpInfo (int? productId, int? organizationId);
        /// <summary>
        /// Create organization role
        /// </summary>
        /// <remarks>
        /// Creates a new role within an organization with the specified product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>Task of RolesRole</returns>
        System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdPostAsync (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body);

        /// <summary>
        /// Create organization role
        /// </summary>
        /// <remarks>
        /// Creates a new role within an organization with the specified product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdPostAsyncWithHttpInfo (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body);
        /// <summary>
        /// Delete organization role
        /// </summary>
        /// <remarks>
        /// Deletes a specific role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of Dictionary&lt;string, &gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, object>> RolesProductIdOrganizationIdRoleIdDeleteAsync (int? productId, int? organizationId, int? roleId);

        /// <summary>
        /// Delete organization role
        /// </summary>
        /// <remarks>
        /// Deletes a specific role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, &gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, object>>> RolesProductIdOrganizationIdRoleIdDeleteAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId);
        /// <summary>
        /// Duplicate organization role
        /// </summary>
        /// <remarks>
        /// Duplicates a specific role within an organization by role ID with a new code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>Task of RolesRole</returns>
        System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdRoleIdDuplicatePostAsync (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body);

        /// <summary>
        /// Duplicate organization role
        /// </summary>
        /// <remarks>
        /// Duplicates a specific role within an organization by role ID with a new code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdRoleIdDuplicatePostAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body);
        /// <summary>
        /// Get specific organization role
        /// </summary>
        /// <remarks>
        /// Retrieves a specific role by ID for a given organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of RolesRole</returns>
        System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdRoleIdGetAsync (int? productId, int? organizationId, int? roleId);

        /// <summary>
        /// Get specific organization role
        /// </summary>
        /// <remarks>
        /// Retrieves a specific role by ID for a given organization and product.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdRoleIdGetAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId);
        /// <summary>
        /// Update organization role
        /// </summary>
        /// <remarks>
        /// Updates an existing role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>Task of RolesRole</returns>
        System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdRoleIdPutAsync (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body);

        /// <summary>
        /// Update organization role
        /// </summary>
        /// <remarks>
        /// Updates an existing role within an organization by role ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdRoleIdPutAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationRolesApi : IOrganizationRolesApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationRolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationRolesApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationRolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationRolesApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get organization roles Retrieves all roles for a specific organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>List&lt;RolesRole&gt;</returns>
        public List<RolesRole> RolesProductIdOrganizationIdGet (int? productId, int? organizationId)
        {
             ApiResponse<List<RolesRole>> localVarResponse = RolesProductIdOrganizationIdGetWithHttpInfo(productId, organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get organization roles Retrieves all roles for a specific organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>ApiResponse of List&lt;RolesRole&gt;</returns>
        public ApiResponse< List<RolesRole> > RolesProductIdOrganizationIdGetWithHttpInfo (int? productId, int? organizationId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdGet");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdGet");

            var localVarPath = "/roles/{product_id}/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RolesRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RolesRole>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RolesRole>)));
        }

        /// <summary>
        /// Get organization roles Retrieves all roles for a specific organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>Task of List&lt;RolesRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<RolesRole>> RolesProductIdOrganizationIdGetAsync (int? productId, int? organizationId)
        {
             ApiResponse<List<RolesRole>> localVarResponse = await RolesProductIdOrganizationIdGetAsyncWithHttpInfo(productId, organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get organization roles Retrieves all roles for a specific organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>Task of ApiResponse (List&lt;RolesRole&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RolesRole>>> RolesProductIdOrganizationIdGetAsyncWithHttpInfo (int? productId, int? organizationId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdGet");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdGet");

            var localVarPath = "/roles/{product_id}/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RolesRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RolesRole>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RolesRole>)));
        }

        /// <summary>
        /// Create organization role Creates a new role within an organization with the specified product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>RolesRole</returns>
        public RolesRole RolesProductIdOrganizationIdPost (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body)
        {
             ApiResponse<RolesRole> localVarResponse = RolesProductIdOrganizationIdPostWithHttpInfo(productId, organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create organization role Creates a new role within an organization with the specified product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>ApiResponse of RolesRole</returns>
        public ApiResponse< RolesRole > RolesProductIdOrganizationIdPostWithHttpInfo (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdPost");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrganizationRolesApi->RolesProductIdOrganizationIdPost");

            var localVarPath = "/roles/{product_id}/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

        /// <summary>
        /// Create organization role Creates a new role within an organization with the specified product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>Task of RolesRole</returns>
        public async System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdPostAsync (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body)
        {
             ApiResponse<RolesRole> localVarResponse = await RolesProductIdOrganizationIdPostAsyncWithHttpInfo(productId, organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create organization role Creates a new role within an organization with the specified product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="body">Role creation data</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdPostAsyncWithHttpInfo (int? productId, int? organizationId, RolesCreateOrganizationRoleParams body)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdPost");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrganizationRolesApi->RolesProductIdOrganizationIdPost");

            var localVarPath = "/roles/{product_id}/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

        /// <summary>
        /// Delete organization role Deletes a specific role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Dictionary&lt;string, &gt;</returns>
        public Dictionary<string, object> RolesProductIdOrganizationIdRoleIdDelete (int? productId, int? organizationId, int? roleId)
        {
             ApiResponse<Dictionary<string, object>> localVarResponse = RolesProductIdOrganizationIdRoleIdDeleteWithHttpInfo(productId, organizationId, roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete organization role Deletes a specific role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>ApiResponse of Dictionary&lt;string, &gt;</returns>
        public ApiResponse< Dictionary<string, object> > RolesProductIdOrganizationIdRoleIdDeleteWithHttpInfo (int? productId, int? organizationId, int? roleId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDelete");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDelete");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDelete");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, object>)));
        }

        /// <summary>
        /// Delete organization role Deletes a specific role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of Dictionary&lt;string, &gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, object>> RolesProductIdOrganizationIdRoleIdDeleteAsync (int? productId, int? organizationId, int? roleId)
        {
             ApiResponse<Dictionary<string, object>> localVarResponse = await RolesProductIdOrganizationIdRoleIdDeleteAsyncWithHttpInfo(productId, organizationId, roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete organization role Deletes a specific role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, &gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, object>>> RolesProductIdOrganizationIdRoleIdDeleteAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDelete");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDelete");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDelete");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, object>)));
        }

        /// <summary>
        /// Duplicate organization role Duplicates a specific role within an organization by role ID with a new code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>RolesRole</returns>
        public RolesRole RolesProductIdOrganizationIdRoleIdDuplicatePost (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body)
        {
             ApiResponse<RolesRole> localVarResponse = RolesProductIdOrganizationIdRoleIdDuplicatePostWithHttpInfo(productId, organizationId, roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Duplicate organization role Duplicates a specific role within an organization by role ID with a new code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>ApiResponse of RolesRole</returns>
        public ApiResponse< RolesRole > RolesProductIdOrganizationIdRoleIdDuplicatePostWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdDuplicatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

        /// <summary>
        /// Duplicate organization role Duplicates a specific role within an organization by role ID with a new code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>Task of RolesRole</returns>
        public async System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdRoleIdDuplicatePostAsync (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body)
        {
             ApiResponse<RolesRole> localVarResponse = await RolesProductIdOrganizationIdRoleIdDuplicatePostAsyncWithHttpInfo(productId, organizationId, roleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Duplicate organization role Duplicates a specific role within an organization by role ID with a new code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role duplication data</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdRoleIdDuplicatePostAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesDuplicateOrganizationRoleParams body)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdDuplicatePost");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdDuplicatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

        /// <summary>
        /// Get specific organization role Retrieves a specific role by ID for a given organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>RolesRole</returns>
        public RolesRole RolesProductIdOrganizationIdRoleIdGet (int? productId, int? organizationId, int? roleId)
        {
             ApiResponse<RolesRole> localVarResponse = RolesProductIdOrganizationIdRoleIdGetWithHttpInfo(productId, organizationId, roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific organization role Retrieves a specific role by ID for a given organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>ApiResponse of RolesRole</returns>
        public ApiResponse< RolesRole > RolesProductIdOrganizationIdRoleIdGetWithHttpInfo (int? productId, int? organizationId, int? roleId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdGet");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdGet");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdGet");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

        /// <summary>
        /// Get specific organization role Retrieves a specific role by ID for a given organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of RolesRole</returns>
        public async System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdRoleIdGetAsync (int? productId, int? organizationId, int? roleId)
        {
             ApiResponse<RolesRole> localVarResponse = await RolesProductIdOrganizationIdRoleIdGetAsyncWithHttpInfo(productId, organizationId, roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific organization role Retrieves a specific role by ID for a given organization and product.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdRoleIdGetAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdGet");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdGet");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdGet");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

        /// <summary>
        /// Update organization role Updates an existing role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>RolesRole</returns>
        public RolesRole RolesProductIdOrganizationIdRoleIdPut (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body)
        {
             ApiResponse<RolesRole> localVarResponse = RolesProductIdOrganizationIdRoleIdPutWithHttpInfo(productId, organizationId, roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update organization role Updates an existing role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>ApiResponse of RolesRole</returns>
        public ApiResponse< RolesRole > RolesProductIdOrganizationIdRoleIdPutWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

        /// <summary>
        /// Update organization role Updates an existing role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>Task of RolesRole</returns>
        public async System.Threading.Tasks.Task<RolesRole> RolesProductIdOrganizationIdRoleIdPutAsync (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body)
        {
             ApiResponse<RolesRole> localVarResponse = await RolesProductIdOrganizationIdRoleIdPutAsyncWithHttpInfo(productId, organizationId, roleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update organization role Updates an existing role within an organization by role ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product ID</param>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="roleId">Role ID</param>
        /// <param name="body">Role update data</param>
        /// <returns>Task of ApiResponse (RolesRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RolesRole>> RolesProductIdOrganizationIdRoleIdPutAsyncWithHttpInfo (int? productId, int? organizationId, int? roleId, RolesUpdateOrganizationRoleParams body)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrganizationRolesApi->RolesProductIdOrganizationIdRoleIdPut");

            var localVarPath = "/roles/{product_id}/{organization_id}/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (roleId != null) localVarPathParams.Add("role_id", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RolesProductIdOrganizationIdRoleIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RolesRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RolesRole) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RolesRole)));
        }

    }
}
