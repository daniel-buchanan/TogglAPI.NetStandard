/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISavedReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        string ReportsApiV3SharedReportTokenCsvPost (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3SharedReportTokenCsvPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>string</returns>
        string ReportsApiV3SharedReportTokenPdfPost (string reportToken, string startDate = null, string endDate = null, string displayMode = null);

        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3SharedReportTokenPdfPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null);
        /// <summary>
        /// Load the previously saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>SavedReportOutput</returns>
        SavedReportOutput ReportsApiV3SharedReportTokenPost (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null);

        /// <summary>
        /// Load the previously saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>ApiResponse of SavedReportOutput</returns>
        ApiResponse<SavedReportOutput> ReportsApiV3SharedReportTokenPostWithHttpInfo (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null);
        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        string ReportsApiV3SharedReportTokenXlsxPost (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3SharedReportTokenXlsxPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenCsvPostAsync (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenCsvPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenPdfPostAsync (string reportToken, string startDate = null, string endDate = null, string displayMode = null);

        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenPdfPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null);
        /// <summary>
        /// Load the previously saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>Task of SavedReportOutput</returns>
        System.Threading.Tasks.Task<SavedReportOutput> ReportsApiV3SharedReportTokenPostAsync (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null);

        /// <summary>
        /// Load the previously saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>Task of ApiResponse (SavedReportOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<SavedReportOutput>> ReportsApiV3SharedReportTokenPostAsyncWithHttpInfo (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null);
        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenXlsxPostAsync (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenXlsxPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SavedReportsApi : ISavedReportsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SavedReportsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SavedReportsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        public string ReportsApiV3SharedReportTokenCsvPost (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3SharedReportTokenCsvPostWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3SharedReportTokenCsvPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenCsvPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenCsvPostAsync (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3SharedReportTokenCsvPostAsyncWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenCsvPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenCsvPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>string</returns>
        public string ReportsApiV3SharedReportTokenPdfPost (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3SharedReportTokenPdfPostWithHttpInfo(reportToken, startDate, endDate, displayMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3SharedReportTokenPdfPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenPdfPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (displayMode != null && displayMode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(displayMode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = displayMode; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenPdfPostAsync (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3SharedReportTokenPdfPostAsyncWithHttpInfo(reportToken, startDate, endDate, displayMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenPdfPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenPdfPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (displayMode != null && displayMode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(displayMode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = displayMode; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Load the previously saved report &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>SavedReportOutput</returns>
        public SavedReportOutput ReportsApiV3SharedReportTokenPost (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null)
        {
             ApiResponse<SavedReportOutput> localVarResponse = ReportsApiV3SharedReportTokenPostWithHttpInfo(reportToken, startDate, firstTimestamp, endDate, groupIds, userIds, clientIds, projectIds, taskIds, tagIds, description, billable, rounding, roundingMinutes, grouped, grouping, subGrouping);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load the previously saved report &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>ApiResponse of SavedReportOutput</returns>
        public ApiResponse< SavedReportOutput > ReportsApiV3SharedReportTokenPostWithHttpInfo (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (subGrouping != null && subGrouping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subGrouping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subGrouping; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SavedReportOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SavedReportOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SavedReportOutput)));
        }

        /// <summary>
        /// Load the previously saved report &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>Task of SavedReportOutput</returns>
        public async System.Threading.Tasks.Task<SavedReportOutput> ReportsApiV3SharedReportTokenPostAsync (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null)
        {
             ApiResponse<SavedReportOutput> localVarResponse = await ReportsApiV3SharedReportTokenPostAsyncWithHttpInfo(reportToken, startDate, firstTimestamp, endDate, groupIds, userIds, clientIds, projectIds, taskIds, tagIds, description, billable, rounding, roundingMinutes, grouped, grouping, subGrouping);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load the previously saved report &lt;p&gt;Returns the previously saved report.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="firstTimestamp">Unix timestamp(UTC) or null for proper pagination. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD. This parameter only works in Detailed and Summary reports. (optional)</param>
        /// <param name="groupIds">Integer array with group_ids (optional)</param>
        /// <param name="userIds">Integer array with user_ids (optional)</param>
        /// <param name="clientIds">Integer array with client_ids (optional)</param>
        /// <param name="projectIds">Integer array with project_ids (optional)</param>
        /// <param name="taskIds">Integer array with task_ids (optional)</param>
        /// <param name="tagIds">Integer array with tag_ids (optional)</param>
        /// <param name="description">Case insensitive pattern that matches &#x60;.*(description).*&#x60; (optional)</param>
        /// <param name="billable">Is billable filter on (optional)</param>
        /// <param name="rounding">How the rounding is done: 1 is rounding up, -1 down, 0 for no rounding. (optional)</param>
        /// <param name="roundingMinutes">Rounding amount in minutes (optional)</param>
        /// <param name="grouped">If it is grouped or not. This parameter only works for Detailed report. (optional)</param>
        /// <param name="grouping">Criteria to group by. This parameter only works for Summary report. (optional)</param>
        /// <param name="subGrouping">Criteria to subgroup. This parameter only works for Summary report. (optional)</param>
        /// <returns>Task of ApiResponse (SavedReportOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SavedReportOutput>> ReportsApiV3SharedReportTokenPostAsyncWithHttpInfo (string reportToken, string startDate = null, int? firstTimestamp = null, string endDate = null, List<int?> groupIds = null, List<int?> userIds = null, List<int?> clientIds = null, List<int?> projectIds = null, List<int?> taskIds = null, List<int?> tagIds = null, string description = null, bool? billable = null, int? rounding = null, int? roundingMinutes = null, bool? grouped = null, string grouping = null, string subGrouping = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (subGrouping != null && subGrouping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subGrouping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subGrouping; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SavedReportOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SavedReportOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SavedReportOutput)));
        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        public string ReportsApiV3SharedReportTokenXlsxPost (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3SharedReportTokenXlsxPostWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3SharedReportTokenXlsxPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenXlsxPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.xlsx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenXlsxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenXlsxPostAsync (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3SharedReportTokenXlsxPostAsyncWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenXlsxPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling SavedReportsApi->ReportsApiV3SharedReportTokenXlsxPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.xlsx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenXlsxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
