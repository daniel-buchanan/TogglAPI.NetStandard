/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// SAML2 Identity Provider URL
        /// </summary>
        /// <remarks>
        /// Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>Saml2LoginResponse</returns>
        Saml2LoginResponse GetSaml2LoginUrl (string email, string _client = null, string state = null);

        /// <summary>
        /// SAML2 Identity Provider URL
        /// </summary>
        /// <remarks>
        /// Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>ApiResponse of Saml2LoginResponse</returns>
        ApiResponse<Saml2LoginResponse> GetSaml2LoginUrlWithHttpInfo (string email, string _client = null, string state = null);
        /// <summary>
        /// Workspace SSO configuration
        /// </summary>
        /// <remarks>
        /// Returns the SSO configuration for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>SsoConfigResult</returns>
        SsoConfigResult GetWorkspaceSso (int? workspaceId);

        /// <summary>
        /// Workspace SSO configuration
        /// </summary>
        /// <remarks>
        /// Returns the SSO configuration for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of SsoConfigResult</returns>
        ApiResponse<SsoConfigResult> GetWorkspaceSsoWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Delete session
        /// </summary>
        /// <remarks>
        /// Deletes a session used for authenticating the current request
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void MeSessionsDelete ();

        /// <summary>
        /// Delete session
        /// </summary>
        /// <remarks>
        /// Deletes a session used for authenticating the current request
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MeSessionsDeleteWithHttpInfo ();
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>ModelsUser</returns>
        ModelsUser MeSessionsPost (MePostSessionHandlerRequestBody sessionPost = null);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>ApiResponse of ModelsUser</returns>
        ApiResponse<ModelsUser> MeSessionsPostWithHttpInfo (MePostSessionHandlerRequestBody sessionPost = null);
        /// <summary>
        /// Confirm SSO enabling for user account
        /// </summary>
        /// <remarks>
        /// Confirm SSO enabling in existing Toggl account after successful SSO
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>string</returns>
        string PostEnableSso (SsoConfirmation enableSsoPost);

        /// <summary>
        /// Confirm SSO enabling for user account
        /// </summary>
        /// <remarks>
        /// Confirm SSO enabling in existing Toggl account after successful SSO
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostEnableSsoWithHttpInfo (SsoConfirmation enableSsoPost);
        /// <summary>
        /// ResetToken
        /// </summary>
        /// <remarks>
        /// Resets API token for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string PostResetToken ();

        /// <summary>
        /// ResetToken
        /// </summary>
        /// <remarks>
        /// Resets API token for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostResetTokenWithHttpInfo ();
        /// <summary>
        /// SAML2 Identity Provider Callback
        /// </summary>
        /// <remarks>
        /// Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns></returns>
        void PostSaml2Callback (int? workspaceId, string sAMLResponse, string relayState = null);

        /// <summary>
        /// SAML2 Identity Provider Callback
        /// </summary>
        /// <remarks>
        /// Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSaml2CallbackWithHttpInfo (int? workspaceId, string sAMLResponse, string relayState = null);
        /// <summary>
        /// Signup
        /// </summary>
        /// <remarks>
        /// Sign up as a new user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>ModelsTogglUser</returns>
        ModelsTogglUser PostSignup (MePostUser postUser);

        /// <summary>
        /// Signup
        /// </summary>
        /// <remarks>
        /// Sign up as a new user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>ApiResponse of ModelsTogglUser</returns>
        ApiResponse<ModelsTogglUser> PostSignupWithHttpInfo (MePostUser postUser);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// SAML2 Identity Provider URL
        /// </summary>
        /// <remarks>
        /// Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>Task of Saml2LoginResponse</returns>
        System.Threading.Tasks.Task<Saml2LoginResponse> GetSaml2LoginUrlAsync (string email, string _client = null, string state = null);

        /// <summary>
        /// SAML2 Identity Provider URL
        /// </summary>
        /// <remarks>
        /// Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>Task of ApiResponse (Saml2LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Saml2LoginResponse>> GetSaml2LoginUrlAsyncWithHttpInfo (string email, string _client = null, string state = null);
        /// <summary>
        /// Workspace SSO configuration
        /// </summary>
        /// <remarks>
        /// Returns the SSO configuration for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of SsoConfigResult</returns>
        System.Threading.Tasks.Task<SsoConfigResult> GetWorkspaceSsoAsync (int? workspaceId);

        /// <summary>
        /// Workspace SSO configuration
        /// </summary>
        /// <remarks>
        /// Returns the SSO configuration for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (SsoConfigResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SsoConfigResult>> GetWorkspaceSsoAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Delete session
        /// </summary>
        /// <remarks>
        /// Deletes a session used for authenticating the current request
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MeSessionsDeleteAsync ();

        /// <summary>
        /// Delete session
        /// </summary>
        /// <remarks>
        /// Deletes a session used for authenticating the current request
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MeSessionsDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>Task of ModelsUser</returns>
        System.Threading.Tasks.Task<ModelsUser> MeSessionsPostAsync (MePostSessionHandlerRequestBody sessionPost = null);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>Task of ApiResponse (ModelsUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsUser>> MeSessionsPostAsyncWithHttpInfo (MePostSessionHandlerRequestBody sessionPost = null);
        /// <summary>
        /// Confirm SSO enabling for user account
        /// </summary>
        /// <remarks>
        /// Confirm SSO enabling in existing Toggl account after successful SSO
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostEnableSsoAsync (SsoConfirmation enableSsoPost);

        /// <summary>
        /// Confirm SSO enabling for user account
        /// </summary>
        /// <remarks>
        /// Confirm SSO enabling in existing Toggl account after successful SSO
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostEnableSsoAsyncWithHttpInfo (SsoConfirmation enableSsoPost);
        /// <summary>
        /// ResetToken
        /// </summary>
        /// <remarks>
        /// Resets API token for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostResetTokenAsync ();

        /// <summary>
        /// ResetToken
        /// </summary>
        /// <remarks>
        /// Resets API token for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostResetTokenAsyncWithHttpInfo ();
        /// <summary>
        /// SAML2 Identity Provider Callback
        /// </summary>
        /// <remarks>
        /// Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostSaml2CallbackAsync (int? workspaceId, string sAMLResponse, string relayState = null);

        /// <summary>
        /// SAML2 Identity Provider Callback
        /// </summary>
        /// <remarks>
        /// Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostSaml2CallbackAsyncWithHttpInfo (int? workspaceId, string sAMLResponse, string relayState = null);
        /// <summary>
        /// Signup
        /// </summary>
        /// <remarks>
        /// Sign up as a new user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>Task of ModelsTogglUser</returns>
        System.Threading.Tasks.Task<ModelsTogglUser> PostSignupAsync (MePostUser postUser);

        /// <summary>
        /// Signup
        /// </summary>
        /// <remarks>
        /// Sign up as a new user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>Task of ApiResponse (ModelsTogglUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTogglUser>> PostSignupAsyncWithHttpInfo (MePostUser postUser);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// SAML2 Identity Provider URL Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>Saml2LoginResponse</returns>
        public Saml2LoginResponse GetSaml2LoginUrl (string email, string _client = null, string state = null)
        {
             ApiResponse<Saml2LoginResponse> localVarResponse = GetSaml2LoginUrlWithHttpInfo(email, _client, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// SAML2 Identity Provider URL Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>ApiResponse of Saml2LoginResponse</returns>
        public ApiResponse< Saml2LoginResponse > GetSaml2LoginUrlWithHttpInfo (string email, string _client = null, string state = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AuthenticationApi->GetSaml2LoginUrl");

            var localVarPath = "/auth/saml2/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (_client != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client", _client)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSaml2LoginUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Saml2LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Saml2LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Saml2LoginResponse)));
        }

        /// <summary>
        /// SAML2 Identity Provider URL Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>Task of Saml2LoginResponse</returns>
        public async System.Threading.Tasks.Task<Saml2LoginResponse> GetSaml2LoginUrlAsync (string email, string _client = null, string state = null)
        {
             ApiResponse<Saml2LoginResponse> localVarResponse = await GetSaml2LoginUrlAsyncWithHttpInfo(email, _client, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// SAML2 Identity Provider URL Returns the SSO URL given an email address for authenticating in an Identity Provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email</param>
        /// <param name="_client">Client identification (webapp/toggl-button/client) TODO: add desktop identification (optional)</param>
        /// <param name="state">State to be preserved when redirecting to Accounts API (optional)</param>
        /// <returns>Task of ApiResponse (Saml2LoginResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Saml2LoginResponse>> GetSaml2LoginUrlAsyncWithHttpInfo (string email, string _client = null, string state = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling AuthenticationApi->GetSaml2LoginUrl");

            var localVarPath = "/auth/saml2/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (_client != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client", _client)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSaml2LoginUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Saml2LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Saml2LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Saml2LoginResponse)));
        }

        /// <summary>
        /// Workspace SSO configuration Returns the SSO configuration for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>SsoConfigResult</returns>
        public SsoConfigResult GetWorkspaceSso (int? workspaceId)
        {
             ApiResponse<SsoConfigResult> localVarResponse = GetWorkspaceSsoWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Workspace SSO configuration Returns the SSO configuration for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of SsoConfigResult</returns>
        public ApiResponse< SsoConfigResult > GetWorkspaceSsoWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling AuthenticationApi->GetWorkspaceSso");

            var localVarPath = "/workspaces/{workspace_id}/sso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceSso", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SsoConfigResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SsoConfigResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SsoConfigResult)));
        }

        /// <summary>
        /// Workspace SSO configuration Returns the SSO configuration for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of SsoConfigResult</returns>
        public async System.Threading.Tasks.Task<SsoConfigResult> GetWorkspaceSsoAsync (int? workspaceId)
        {
             ApiResponse<SsoConfigResult> localVarResponse = await GetWorkspaceSsoAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Workspace SSO configuration Returns the SSO configuration for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (SsoConfigResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SsoConfigResult>> GetWorkspaceSsoAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling AuthenticationApi->GetWorkspaceSso");

            var localVarPath = "/workspaces/{workspace_id}/sso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceSso", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SsoConfigResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SsoConfigResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SsoConfigResult)));
        }

        /// <summary>
        /// Delete session Deletes a session used for authenticating the current request
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void MeSessionsDelete ()
        {
             MeSessionsDeleteWithHttpInfo();
        }

        /// <summary>
        /// Delete session Deletes a session used for authenticating the current request
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MeSessionsDeleteWithHttpInfo ()
        {

            var localVarPath = "/me/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeSessionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete session Deletes a session used for authenticating the current request
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MeSessionsDeleteAsync ()
        {
             await MeSessionsDeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete session Deletes a session used for authenticating the current request
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MeSessionsDeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeSessionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create session Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>ModelsUser</returns>
        public ModelsUser MeSessionsPost (MePostSessionHandlerRequestBody sessionPost = null)
        {
             ApiResponse<ModelsUser> localVarResponse = MeSessionsPostWithHttpInfo(sessionPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create session Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>ApiResponse of ModelsUser</returns>
        public ApiResponse< ModelsUser > MeSessionsPostWithHttpInfo (MePostSessionHandlerRequestBody sessionPost = null)
        {

            var localVarPath = "/me/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionPost != null && sessionPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sessionPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sessionPost; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeSessionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsUser)));
        }

        /// <summary>
        /// Create session Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>Task of ModelsUser</returns>
        public async System.Threading.Tasks.Task<ModelsUser> MeSessionsPostAsync (MePostSessionHandlerRequestBody sessionPost = null)
        {
             ApiResponse<ModelsUser> localVarResponse = await MeSessionsPostAsyncWithHttpInfo(sessionPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create session Creates a session and sets a cookie in the response header which can be used for authentication in API requests
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionPost">Session preferences (optional)</param>
        /// <returns>Task of ApiResponse (ModelsUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsUser>> MeSessionsPostAsyncWithHttpInfo (MePostSessionHandlerRequestBody sessionPost = null)
        {

            var localVarPath = "/me/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionPost != null && sessionPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sessionPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sessionPost; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeSessionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsUser)));
        }

        /// <summary>
        /// Confirm SSO enabling for user account Confirm SSO enabling in existing Toggl account after successful SSO
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>string</returns>
        public string PostEnableSso (SsoConfirmation enableSsoPost)
        {
             ApiResponse<string> localVarResponse = PostEnableSsoWithHttpInfo(enableSsoPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm SSO enabling for user account Confirm SSO enabling in existing Toggl account after successful SSO
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostEnableSsoWithHttpInfo (SsoConfirmation enableSsoPost)
        {
            // verify the required parameter 'enableSsoPost' is set
            if (enableSsoPost == null)
                throw new ApiException(400, "Missing required parameter 'enableSsoPost' when calling AuthenticationApi->PostEnableSso");

            var localVarPath = "/me/enable_sso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableSsoPost != null && enableSsoPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enableSsoPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enableSsoPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEnableSso", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Confirm SSO enabling for user account Confirm SSO enabling in existing Toggl account after successful SSO
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostEnableSsoAsync (SsoConfirmation enableSsoPost)
        {
             ApiResponse<string> localVarResponse = await PostEnableSsoAsyncWithHttpInfo(enableSsoPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm SSO enabling for user account Confirm SSO enabling in existing Toggl account after successful SSO
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableSsoPost">SSO enabling confirmation data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostEnableSsoAsyncWithHttpInfo (SsoConfirmation enableSsoPost)
        {
            // verify the required parameter 'enableSsoPost' is set
            if (enableSsoPost == null)
                throw new ApiException(400, "Missing required parameter 'enableSsoPost' when calling AuthenticationApi->PostEnableSso");

            var localVarPath = "/me/enable_sso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enableSsoPost != null && enableSsoPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enableSsoPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enableSsoPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEnableSso", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// ResetToken Resets API token for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string PostResetToken ()
        {
             ApiResponse<string> localVarResponse = PostResetTokenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// ResetToken Resets API token for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostResetTokenWithHttpInfo ()
        {

            var localVarPath = "/me/reset_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostResetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// ResetToken Resets API token for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostResetTokenAsync ()
        {
             ApiResponse<string> localVarResponse = await PostResetTokenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// ResetToken Resets API token for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostResetTokenAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/reset_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostResetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// SAML2 Identity Provider Callback Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns></returns>
        public void PostSaml2Callback (int? workspaceId, string sAMLResponse, string relayState = null)
        {
             PostSaml2CallbackWithHttpInfo(workspaceId, sAMLResponse, relayState);
        }

        /// <summary>
        /// SAML2 Identity Provider Callback Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostSaml2CallbackWithHttpInfo (int? workspaceId, string sAMLResponse, string relayState = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling AuthenticationApi->PostSaml2Callback");
            // verify the required parameter 'sAMLResponse' is set
            if (sAMLResponse == null)
                throw new ApiException(400, "Missing required parameter 'sAMLResponse' when calling AuthenticationApi->PostSaml2Callback");

            var localVarPath = "/auth/saml2/login/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (sAMLResponse != null) localVarFormParams.Add("SAMLResponse", this.Configuration.ApiClient.ParameterToString(sAMLResponse)); // form parameter
            if (relayState != null) localVarFormParams.Add("RelayState", this.Configuration.ApiClient.ParameterToString(relayState)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSaml2Callback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// SAML2 Identity Provider Callback Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostSaml2CallbackAsync (int? workspaceId, string sAMLResponse, string relayState = null)
        {
             await PostSaml2CallbackAsyncWithHttpInfo(workspaceId, sAMLResponse, relayState);

        }

        /// <summary>
        /// SAML2 Identity Provider Callback Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="sAMLResponse">SAML2 assertion with authentication response</param>
        /// <param name="relayState">Encoded string containing client and host which originated the requests (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostSaml2CallbackAsyncWithHttpInfo (int? workspaceId, string sAMLResponse, string relayState = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling AuthenticationApi->PostSaml2Callback");
            // verify the required parameter 'sAMLResponse' is set
            if (sAMLResponse == null)
                throw new ApiException(400, "Missing required parameter 'sAMLResponse' when calling AuthenticationApi->PostSaml2Callback");

            var localVarPath = "/auth/saml2/login/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (sAMLResponse != null) localVarFormParams.Add("SAMLResponse", this.Configuration.ApiClient.ParameterToString(sAMLResponse)); // form parameter
            if (relayState != null) localVarFormParams.Add("RelayState", this.Configuration.ApiClient.ParameterToString(relayState)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSaml2Callback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Signup Sign up as a new user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>ModelsTogglUser</returns>
        public ModelsTogglUser PostSignup (MePostUser postUser)
        {
             ApiResponse<ModelsTogglUser> localVarResponse = PostSignupWithHttpInfo(postUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Signup Sign up as a new user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>ApiResponse of ModelsTogglUser</returns>
        public ApiResponse< ModelsTogglUser > PostSignupWithHttpInfo (MePostUser postUser)
        {
            // verify the required parameter 'postUser' is set
            if (postUser == null)
                throw new ApiException(400, "Missing required parameter 'postUser' when calling AuthenticationApi->PostSignup");

            var localVarPath = "/signup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postUser != null && postUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postUser; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTogglUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTogglUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTogglUser)));
        }

        /// <summary>
        /// Signup Sign up as a new user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>Task of ModelsTogglUser</returns>
        public async System.Threading.Tasks.Task<ModelsTogglUser> PostSignupAsync (MePostUser postUser)
        {
             ApiResponse<ModelsTogglUser> localVarResponse = await PostSignupAsyncWithHttpInfo(postUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Signup Sign up as a new user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUser">authorization data</param>
        /// <returns>Task of ApiResponse (ModelsTogglUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTogglUser>> PostSignupAsyncWithHttpInfo (MePostUser postUser)
        {
            // verify the required parameter 'postUser' is set
            if (postUser == null)
                throw new ApiException(400, "Missing required parameter 'postUser' when calling AuthenticationApi->PostSignup");

            var localVarPath = "/signup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postUser != null && postUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postUser; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTogglUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTogglUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTogglUser)));
        }

    }
}
