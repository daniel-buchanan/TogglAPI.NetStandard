/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsOwnerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns single organization transfer in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>ModelsTransfer</returns>
        ModelsTransfer GetOwnershipTransfer (int? organizationId, int? transferId);

        /// <summary>
        /// Returns single organization transfer in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>ApiResponse of ModelsTransfer</returns>
        ApiResponse<ModelsTransfer> GetOwnershipTransferWithHttpInfo (int? organizationId, int? transferId);
        /// <summary>
        /// Returns list of organization transfers made in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>List&lt;ModelsTransfer&gt;</returns>
        List<ModelsTransfer> GetOwnershipTransfers (int? organizationId, string ongoing = null);

        /// <summary>
        /// Returns list of organization transfers made in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTransfer&gt;</returns>
        ApiResponse<List<ModelsTransfer>> GetOwnershipTransfersWithHttpInfo (int? organizationId, string ongoing = null);
        /// <summary>
        /// Creates new ownership transfer process
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ModelsTransfer</returns>
        ModelsTransfer PostOwnershipTransfer (int? organizationId);

        /// <summary>
        /// Creates new ownership transfer process
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ApiResponse of ModelsTransfer</returns>
        ApiResponse<ModelsTransfer> PostOwnershipTransferWithHttpInfo (int? organizationId);
        /// <summary>
        /// Updates transfer process and emails stakeholders
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization and emails stakeholders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>ModelsTransfer</returns>
        ModelsTransfer PostOwnershipTransferActions (int? organizationId, int? transferId, string action);

        /// <summary>
        /// Updates transfer process and emails stakeholders
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization and emails stakeholders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>ApiResponse of ModelsTransfer</returns>
        ApiResponse<ModelsTransfer> PostOwnershipTransferActionsWithHttpInfo (int? organizationId, int? transferId, string action);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns single organization transfer in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>Task of ModelsTransfer</returns>
        System.Threading.Tasks.Task<ModelsTransfer> GetOwnershipTransferAsync (int? organizationId, int? transferId);

        /// <summary>
        /// Returns single organization transfer in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>Task of ApiResponse (ModelsTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTransfer>> GetOwnershipTransferAsyncWithHttpInfo (int? organizationId, int? transferId);
        /// <summary>
        /// Returns list of organization transfers made in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>Task of List&lt;ModelsTransfer&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTransfer>> GetOwnershipTransfersAsync (int? organizationId, string ongoing = null);

        /// <summary>
        /// Returns list of organization transfers made in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTransfer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTransfer>>> GetOwnershipTransfersAsyncWithHttpInfo (int? organizationId, string ongoing = null);
        /// <summary>
        /// Creates new ownership transfer process
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ModelsTransfer</returns>
        System.Threading.Tasks.Task<ModelsTransfer> PostOwnershipTransferAsync (int? organizationId);

        /// <summary>
        /// Creates new ownership transfer process
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ApiResponse (ModelsTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTransfer>> PostOwnershipTransferAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Updates transfer process and emails stakeholders
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization and emails stakeholders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>Task of ModelsTransfer</returns>
        System.Threading.Tasks.Task<ModelsTransfer> PostOwnershipTransferActionsAsync (int? organizationId, int? transferId, string action);

        /// <summary>
        /// Updates transfer process and emails stakeholders
        /// </summary>
        /// <remarks>
        /// Return the ownership transfer for a given organization and emails stakeholders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>Task of ApiResponse (ModelsTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTransfer>> PostOwnershipTransferActionsAsyncWithHttpInfo (int? organizationId, int? transferId, string action);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationsOwnerApi : IOrganizationsOwnerApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsOwnerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsOwnerApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsOwnerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationsOwnerApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns single organization transfer in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>ModelsTransfer</returns>
        public ModelsTransfer GetOwnershipTransfer (int? organizationId, int? transferId)
        {
             ApiResponse<ModelsTransfer> localVarResponse = GetOwnershipTransferWithHttpInfo(organizationId, transferId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns single organization transfer in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>ApiResponse of ModelsTransfer</returns>
        public ApiResponse< ModelsTransfer > GetOwnershipTransferWithHttpInfo (int? organizationId, int? transferId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->GetOwnershipTransfer");
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling OrganizationsOwnerApi->GetOwnershipTransfer");

            var localVarPath = "/organizations/{organization_id}/owner/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnershipTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTransfer)));
        }

        /// <summary>
        /// Returns single organization transfer in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>Task of ModelsTransfer</returns>
        public async System.Threading.Tasks.Task<ModelsTransfer> GetOwnershipTransferAsync (int? organizationId, int? transferId)
        {
             ApiResponse<ModelsTransfer> localVarResponse = await GetOwnershipTransferAsyncWithHttpInfo(organizationId, transferId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns single organization transfer in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <returns>Task of ApiResponse (ModelsTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTransfer>> GetOwnershipTransferAsyncWithHttpInfo (int? organizationId, int? transferId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->GetOwnershipTransfer");
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling OrganizationsOwnerApi->GetOwnershipTransfer");

            var localVarPath = "/organizations/{organization_id}/owner/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnershipTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTransfer)));
        }

        /// <summary>
        /// Returns list of organization transfers made in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>List&lt;ModelsTransfer&gt;</returns>
        public List<ModelsTransfer> GetOwnershipTransfers (int? organizationId, string ongoing = null)
        {
             ApiResponse<List<ModelsTransfer>> localVarResponse = GetOwnershipTransfersWithHttpInfo(organizationId, ongoing);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns list of organization transfers made in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTransfer&gt;</returns>
        public ApiResponse< List<ModelsTransfer> > GetOwnershipTransfersWithHttpInfo (int? organizationId, string ongoing = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->GetOwnershipTransfers");

            var localVarPath = "/organizations/{organization_id}/owner/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (ongoing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ongoing", ongoing)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnershipTransfers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTransfer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTransfer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTransfer>)));
        }

        /// <summary>
        /// Returns list of organization transfers made in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>Task of List&lt;ModelsTransfer&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTransfer>> GetOwnershipTransfersAsync (int? organizationId, string ongoing = null)
        {
             ApiResponse<List<ModelsTransfer>> localVarResponse = await GetOwnershipTransfersAsyncWithHttpInfo(organizationId, ongoing);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns list of organization transfers made in the organization 
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="ongoing">If true, returns only current, not finished transfer (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTransfer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTransfer>>> GetOwnershipTransfersAsyncWithHttpInfo (int? organizationId, string ongoing = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->GetOwnershipTransfers");

            var localVarPath = "/organizations/{organization_id}/owner/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (ongoing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ongoing", ongoing)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnershipTransfers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTransfer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTransfer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTransfer>)));
        }

        /// <summary>
        /// Creates new ownership transfer process Return the ownership transfer for a given organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ModelsTransfer</returns>
        public ModelsTransfer PostOwnershipTransfer (int? organizationId)
        {
             ApiResponse<ModelsTransfer> localVarResponse = PostOwnershipTransferWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new ownership transfer process Return the ownership transfer for a given organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ApiResponse of ModelsTransfer</returns>
        public ApiResponse< ModelsTransfer > PostOwnershipTransferWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->PostOwnershipTransfer");

            var localVarPath = "/organizations/{organization_id}/owner/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOwnershipTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTransfer)));
        }

        /// <summary>
        /// Creates new ownership transfer process Return the ownership transfer for a given organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ModelsTransfer</returns>
        public async System.Threading.Tasks.Task<ModelsTransfer> PostOwnershipTransferAsync (int? organizationId)
        {
             ApiResponse<ModelsTransfer> localVarResponse = await PostOwnershipTransferAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new ownership transfer process Return the ownership transfer for a given organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ApiResponse (ModelsTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTransfer>> PostOwnershipTransferAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->PostOwnershipTransfer");

            var localVarPath = "/organizations/{organization_id}/owner/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOwnershipTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTransfer)));
        }

        /// <summary>
        /// Updates transfer process and emails stakeholders Return the ownership transfer for a given organization and emails stakeholders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>ModelsTransfer</returns>
        public ModelsTransfer PostOwnershipTransferActions (int? organizationId, int? transferId, string action)
        {
             ApiResponse<ModelsTransfer> localVarResponse = PostOwnershipTransferActionsWithHttpInfo(organizationId, transferId, action);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates transfer process and emails stakeholders Return the ownership transfer for a given organization and emails stakeholders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>ApiResponse of ModelsTransfer</returns>
        public ApiResponse< ModelsTransfer > PostOwnershipTransferActionsWithHttpInfo (int? organizationId, int? transferId, string action)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->PostOwnershipTransferActions");
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling OrganizationsOwnerApi->PostOwnershipTransferActions");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling OrganizationsOwnerApi->PostOwnershipTransferActions");

            var localVarPath = "/organizations/{organization_id}/owner/transfer/{transfer_id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOwnershipTransferActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTransfer)));
        }

        /// <summary>
        /// Updates transfer process and emails stakeholders Return the ownership transfer for a given organization and emails stakeholders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>Task of ModelsTransfer</returns>
        public async System.Threading.Tasks.Task<ModelsTransfer> PostOwnershipTransferActionsAsync (int? organizationId, int? transferId, string action)
        {
             ApiResponse<ModelsTransfer> localVarResponse = await PostOwnershipTransferActionsAsyncWithHttpInfo(organizationId, transferId, action);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates transfer process and emails stakeholders Return the ownership transfer for a given organization and emails stakeholders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="transferId">Numeric ID of the transfer.</param>
        /// <param name="action">Action to update transfer with.</param>
        /// <returns>Task of ApiResponse (ModelsTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTransfer>> PostOwnershipTransferActionsAsyncWithHttpInfo (int? organizationId, int? transferId, string action)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsOwnerApi->PostOwnershipTransferActions");
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling OrganizationsOwnerApi->PostOwnershipTransferActions");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling OrganizationsOwnerApi->PostOwnershipTransferActions");

            var localVarPath = "/organizations/{organization_id}/owner/transfer/{transfer_id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOwnershipTransferActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTransfer)));
        }

    }
}
