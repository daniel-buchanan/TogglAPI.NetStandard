/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>string</returns>
        string DeleteOrganizationUsersLeave (int? organizationId);

        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteOrganizationUsersLeaveWithHttpInfo (int? organizationId);
        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns></returns>
        void DeleteWorkspaceUser (int? workspaceId, int? workspaceUserId);

        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkspaceUserWithHttpInfo (int? workspaceId, int? workspaceUserId);
        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUser&gt;</returns>
        List<ModelsOrgUser> GetOrganizationUsers (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUser&gt;</returns>
        ApiResponse<List<ModelsOrgUser>> GetOrganizationUsersWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUserDetailed&gt;</returns>
        List<ModelsOrgUserDetailed> GetOrganizationUsersDetailed (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUserDetailed&gt;</returns>
        ApiResponse<List<ModelsOrgUserDetailed>> GetOrganizationUsersDetailedWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        List<ModelsOrganizationWorkspaceUser> GetOrganizationWorkspacesWorkspaceusers (int? organizationId, int? workspaceId, string name);

        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>ApiResponse of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        ApiResponse<List<ModelsOrganizationWorkspaceUser>> GetOrganizationWorkspacesWorkspaceusersWithHttpInfo (int? organizationId, int? workspaceId, string name);
        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        List<ModelsSimpleWorkspaceUser> GetWorkspaceUsers (int? workspaceId, bool? excludeDeleted = null);

        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        ApiResponse<List<ModelsSimpleWorkspaceUser>> GetWorkspaceUsersWithHttpInfo (int? workspaceId, bool? excludeDeleted = null);
        /// <summary>
        /// Get workspace workspace-users
        /// </summary>
        /// <remarks>
        /// List all workspace_users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>List&lt;ModelsWorkspaceUser&gt;</returns>
        List<ModelsWorkspaceUser> GetWorkspaceWorkspaceUsers (int? workspaceId, string includeIndirect);

        /// <summary>
        /// Get workspace workspace-users
        /// </summary>
        /// <remarks>
        /// List all workspace_users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>ApiResponse of List&lt;ModelsWorkspaceUser&gt;</returns>
        ApiResponse<List<ModelsWorkspaceUser>> GetWorkspaceWorkspaceUsersWithHttpInfo (int? workspaceId, string includeIndirect);
        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        string PatchOrganizationUsers (int? organizationId, UserPatchParams _params);

        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PatchOrganizationUsersWithHttpInfo (int? organizationId, UserPatchParams _params);
        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        string PatchOrganizationWorkspaceUsers (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);

        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PatchOrganizationWorkspaceUsersWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);
        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>UsersLostPasswordURL</returns>
        UsersLostPasswordURL PostWorkspaceUsersLostPassword (int? workspaceId, int? userId);

        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of UsersLostPasswordURL</returns>
        ApiResponse<UsersLostPasswordURL> PostWorkspaceUsersLostPasswordWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>string</returns>
        string PutOrganizationUsers (int? organizationId, UserPayload _params);

        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutOrganizationUsersWithHttpInfo (int? organizationId, UserPayload _params);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>string</returns>
        string PutWorkspaceUsers (int? workspaceId, int? userId);

        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutWorkspaceUsersWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>string</returns>
        string PutWorkspaceWorkspaceUsers (int? workspaceId, int? workspaceUserId, UserPayload post);

        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutWorkspaceWorkspaceUsersWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteOrganizationUsersLeaveAsync (int? organizationId);

        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationUsersLeaveAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkspaceUserAsync (int? workspaceId, int? workspaceUserId);

        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkspaceUserAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId);
        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsOrgUser>> GetOrganizationUsersAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUser>>> GetOrganizationUsersAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUserDetailed&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsOrgUserDetailed>> GetOrganizationUsersDetailedAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUserDetailed&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUserDetailed>>> GetOrganizationUsersDetailedAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsOrganizationWorkspaceUser>> GetOrganizationWorkspacesWorkspaceusersAsync (int? organizationId, int? workspaceId, string name);

        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrganizationWorkspaceUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsOrganizationWorkspaceUser>>> GetOrganizationWorkspacesWorkspaceusersAsyncWithHttpInfo (int? organizationId, int? workspaceId, string name);
        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsSimpleWorkspaceUser>> GetWorkspaceUsersAsync (int? workspaceId, bool? excludeDeleted = null);

        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSimpleWorkspaceUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsSimpleWorkspaceUser>>> GetWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, bool? excludeDeleted = null);
        /// <summary>
        /// Get workspace workspace-users
        /// </summary>
        /// <remarks>
        /// List all workspace_users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>Task of List&lt;ModelsWorkspaceUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsWorkspaceUser>> GetWorkspaceWorkspaceUsersAsync (int? workspaceId, string includeIndirect);

        /// <summary>
        /// Get workspace workspace-users
        /// </summary>
        /// <remarks>
        /// List all workspace_users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsWorkspaceUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsWorkspaceUser>>> GetWorkspaceWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, string includeIndirect);
        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PatchOrganizationUsersAsync (int? organizationId, UserPatchParams _params);

        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPatchParams _params);
        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PatchOrganizationWorkspaceUsersAsync (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);

        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationWorkspaceUsersAsyncWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);
        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of UsersLostPasswordURL</returns>
        System.Threading.Tasks.Task<UsersLostPasswordURL> PostWorkspaceUsersLostPasswordAsync (int? workspaceId, int? userId);

        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (UsersLostPasswordURL)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersLostPasswordURL>> PostWorkspaceUsersLostPasswordAsyncWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutOrganizationUsersAsync (int? organizationId, UserPayload _params);

        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPayload _params);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutWorkspaceUsersAsync (int? workspaceId, int? userId);

        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutWorkspaceWorkspaceUsersAsync (int? workspaceId, int? workspaceUserId, UserPayload post);

        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>string</returns>
        public string DeleteOrganizationUsersLeave (int? organizationId)
        {
             ApiResponse<string> localVarResponse = DeleteOrganizationUsersLeaveWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteOrganizationUsersLeaveWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->DeleteOrganizationUsersLeave");

            var localVarPath = "/organizations/{organization_id}/users/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationUsersLeave", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteOrganizationUsersLeaveAsync (int? organizationId)
        {
             ApiResponse<string> localVarResponse = await DeleteOrganizationUsersLeaveAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationUsersLeaveAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->DeleteOrganizationUsersLeave");

            var localVarPath = "/organizations/{organization_id}/users/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationUsersLeave", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns></returns>
        public void DeleteWorkspaceUser (int? workspaceId, int? workspaceUserId)
        {
             DeleteWorkspaceUserWithHttpInfo(workspaceId, workspaceUserId);
        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorkspaceUserWithHttpInfo (int? workspaceId, int? workspaceUserId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->DeleteWorkspaceUser");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling UsersApi->DeleteWorkspaceUser");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkspaceUserAsync (int? workspaceId, int? workspaceUserId)
        {
             await DeleteWorkspaceUserAsyncWithHttpInfo(workspaceId, workspaceUserId);

        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkspaceUserAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->DeleteWorkspaceUser");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling UsersApi->DeleteWorkspaceUser");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUser&gt;</returns>
        public List<ModelsOrgUser> GetOrganizationUsers (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUser>> localVarResponse = GetOrganizationUsersWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUser&gt;</returns>
        public ApiResponse< List<ModelsOrgUser> > GetOrganizationUsersWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUser>)));
        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsOrgUser>> GetOrganizationUsersAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUser>> localVarResponse = await GetOrganizationUsersAsyncWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUser>>> GetOrganizationUsersAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUser>)));
        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUserDetailed&gt;</returns>
        public List<ModelsOrgUserDetailed> GetOrganizationUsersDetailed (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUserDetailed>> localVarResponse = GetOrganizationUsersDetailedWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUserDetailed&gt;</returns>
        public ApiResponse< List<ModelsOrgUserDetailed> > GetOrganizationUsersDetailedWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetOrganizationUsersDetailed");

            var localVarPath = "/organizations/{organization_id}/users/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsersDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUserDetailed>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUserDetailed>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUserDetailed>)));
        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUserDetailed&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsOrgUserDetailed>> GetOrganizationUsersDetailedAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUserDetailed>> localVarResponse = await GetOrganizationUsersDetailedAsyncWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUserDetailed&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUserDetailed>>> GetOrganizationUsersDetailedAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetOrganizationUsersDetailed");

            var localVarPath = "/organizations/{organization_id}/users/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsersDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUserDetailed>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUserDetailed>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUserDetailed>)));
        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        public List<ModelsOrganizationWorkspaceUser> GetOrganizationWorkspacesWorkspaceusers (int? organizationId, int? workspaceId, string name)
        {
             ApiResponse<List<ModelsOrganizationWorkspaceUser>> localVarResponse = GetOrganizationWorkspacesWorkspaceusersWithHttpInfo(organizationId, workspaceId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>ApiResponse of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        public ApiResponse< List<ModelsOrganizationWorkspaceUser> > GetOrganizationWorkspacesWorkspaceusersWithHttpInfo (int? organizationId, int? workspaceId, string name)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetOrganizationWorkspacesWorkspaceusers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesWorkspaceusers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrganizationWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrganizationWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrganizationWorkspaceUser>)));
        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsOrganizationWorkspaceUser>> GetOrganizationWorkspacesWorkspaceusersAsync (int? organizationId, int? workspaceId, string name)
        {
             ApiResponse<List<ModelsOrganizationWorkspaceUser>> localVarResponse = await GetOrganizationWorkspacesWorkspaceusersAsyncWithHttpInfo(organizationId, workspaceId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrganizationWorkspaceUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsOrganizationWorkspaceUser>>> GetOrganizationWorkspacesWorkspaceusersAsyncWithHttpInfo (int? organizationId, int? workspaceId, string name)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetOrganizationWorkspacesWorkspaceusers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesWorkspaceusers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrganizationWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrganizationWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrganizationWorkspaceUser>)));
        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        public List<ModelsSimpleWorkspaceUser> GetWorkspaceUsers (int? workspaceId, bool? excludeDeleted = null)
        {
             ApiResponse<List<ModelsSimpleWorkspaceUser>> localVarResponse = GetWorkspaceUsersWithHttpInfo(workspaceId, excludeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        public ApiResponse< List<ModelsSimpleWorkspaceUser> > GetWorkspaceUsersWithHttpInfo (int? workspaceId, bool? excludeDeleted = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->GetWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (excludeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_deleted", excludeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSimpleWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSimpleWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSimpleWorkspaceUser>)));
        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsSimpleWorkspaceUser>> GetWorkspaceUsersAsync (int? workspaceId, bool? excludeDeleted = null)
        {
             ApiResponse<List<ModelsSimpleWorkspaceUser>> localVarResponse = await GetWorkspaceUsersAsyncWithHttpInfo(workspaceId, excludeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSimpleWorkspaceUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsSimpleWorkspaceUser>>> GetWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, bool? excludeDeleted = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->GetWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (excludeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_deleted", excludeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSimpleWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSimpleWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSimpleWorkspaceUser>)));
        }

        /// <summary>
        /// Get workspace workspace-users List all workspace_users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>List&lt;ModelsWorkspaceUser&gt;</returns>
        public List<ModelsWorkspaceUser> GetWorkspaceWorkspaceUsers (int? workspaceId, string includeIndirect)
        {
             ApiResponse<List<ModelsWorkspaceUser>> localVarResponse = GetWorkspaceWorkspaceUsersWithHttpInfo(workspaceId, includeIndirect);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace workspace-users List all workspace_users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>ApiResponse of List&lt;ModelsWorkspaceUser&gt;</returns>
        public ApiResponse< List<ModelsWorkspaceUser> > GetWorkspaceWorkspaceUsersWithHttpInfo (int? workspaceId, string includeIndirect)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->GetWorkspaceWorkspaceUsers");
            // verify the required parameter 'includeIndirect' is set
            if (includeIndirect == null)
                throw new ApiException(400, "Missing required parameter 'includeIndirect' when calling UsersApi->GetWorkspaceWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (includeIndirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeIndirect", includeIndirect)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsWorkspaceUser>)));
        }

        /// <summary>
        /// Get workspace workspace-users List all workspace_users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>Task of List&lt;ModelsWorkspaceUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsWorkspaceUser>> GetWorkspaceWorkspaceUsersAsync (int? workspaceId, string includeIndirect)
        {
             ApiResponse<List<ModelsWorkspaceUser>> localVarResponse = await GetWorkspaceWorkspaceUsersAsyncWithHttpInfo(workspaceId, includeIndirect);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace workspace-users List all workspace_users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="includeIndirect">If true, includes indirect users (i.e. users assigned via group) to workspace user list</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsWorkspaceUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsWorkspaceUser>>> GetWorkspaceWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, string includeIndirect)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->GetWorkspaceWorkspaceUsers");
            // verify the required parameter 'includeIndirect' is set
            if (includeIndirect == null)
                throw new ApiException(400, "Missing required parameter 'includeIndirect' when calling UsersApi->GetWorkspaceWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (includeIndirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeIndirect", includeIndirect)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsWorkspaceUser>)));
        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        public string PatchOrganizationUsers (int? organizationId, UserPatchParams _params)
        {
             ApiResponse<string> localVarResponse = PatchOrganizationUsersWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PatchOrganizationUsersWithHttpInfo (int? organizationId, UserPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PatchOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling UsersApi->PatchOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PatchOrganizationUsersAsync (int? organizationId, UserPatchParams _params)
        {
             ApiResponse<string> localVarResponse = await PatchOrganizationUsersAsyncWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PatchOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling UsersApi->PatchOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        public string PatchOrganizationWorkspaceUsers (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
             ApiResponse<string> localVarResponse = PatchOrganizationWorkspaceUsersWithHttpInfo(organizationId, workspaceId, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PatchOrganizationWorkspaceUsersWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling UsersApi->PatchOrganizationWorkspaceUsers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PatchOrganizationWorkspaceUsersAsync (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
             ApiResponse<string> localVarResponse = await PatchOrganizationWorkspaceUsersAsyncWithHttpInfo(organizationId, workspaceId, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationWorkspaceUsersAsyncWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling UsersApi->PatchOrganizationWorkspaceUsers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>UsersLostPasswordURL</returns>
        public UsersLostPasswordURL PostWorkspaceUsersLostPassword (int? workspaceId, int? userId)
        {
             ApiResponse<UsersLostPasswordURL> localVarResponse = PostWorkspaceUsersLostPasswordWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of UsersLostPasswordURL</returns>
        public ApiResponse< UsersLostPasswordURL > PostWorkspaceUsersLostPasswordWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PostWorkspaceUsersLostPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->PostWorkspaceUsersLostPassword");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}/lost_password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceUsersLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersLostPasswordURL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersLostPasswordURL) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersLostPasswordURL)));
        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of UsersLostPasswordURL</returns>
        public async System.Threading.Tasks.Task<UsersLostPasswordURL> PostWorkspaceUsersLostPasswordAsync (int? workspaceId, int? userId)
        {
             ApiResponse<UsersLostPasswordURL> localVarResponse = await PostWorkspaceUsersLostPasswordAsyncWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (UsersLostPasswordURL)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersLostPasswordURL>> PostWorkspaceUsersLostPasswordAsyncWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PostWorkspaceUsersLostPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->PostWorkspaceUsersLostPassword");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}/lost_password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceUsersLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersLostPasswordURL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersLostPasswordURL) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersLostPasswordURL)));
        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>string</returns>
        public string PutOrganizationUsers (int? organizationId, UserPayload _params)
        {
             ApiResponse<string> localVarResponse = PutOrganizationUsersWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutOrganizationUsersWithHttpInfo (int? organizationId, UserPayload _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PutOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling UsersApi->PutOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users/{organization_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutOrganizationUsersAsync (int? organizationId, UserPayload _params)
        {
             ApiResponse<string> localVarResponse = await PutOrganizationUsersAsyncWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPayload _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PutOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling UsersApi->PutOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users/{organization_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        public string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = PutOrganizationWorkspacesAssignmentsWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling UsersApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = await PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling UsersApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>string</returns>
        public string PutWorkspaceUsers (int? workspaceId, int? userId)
        {
             ApiResponse<string> localVarResponse = PutWorkspaceUsersWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutWorkspaceUsersWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PutWorkspaceUsers");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->PutWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutWorkspaceUsersAsync (int? workspaceId, int? userId)
        {
             ApiResponse<string> localVarResponse = await PutWorkspaceUsersAsyncWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PutWorkspaceUsers");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->PutWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>string</returns>
        public string PutWorkspaceWorkspaceUsers (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
             ApiResponse<string> localVarResponse = PutWorkspaceWorkspaceUsersWithHttpInfo(workspaceId, workspaceUserId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutWorkspaceWorkspaceUsersWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling UsersApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling UsersApi->PutWorkspaceWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutWorkspaceWorkspaceUsersAsync (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
             ApiResponse<string> localVarResponse = await PutWorkspaceWorkspaceUsersAsyncWithHttpInfo(workspaceId, workspaceUserId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling UsersApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling UsersApi->PutWorkspaceWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
