/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprovalsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>string</returns>
        string DeleteTimesheetSetups (int? workspaceId, int? setupId);

        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId);
        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>TimesheetsetupsGetPaginatedResponse</returns>
        TimesheetsetupsGetPaginatedResponse GetTimesheetSetups (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of TimesheetsetupsGetPaginatedResponse</returns>
        ApiResponse<TimesheetsetupsGetPaginatedResponse> GetTimesheetSetupsWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        List<TimesheetsTimesheetHoursResponse> GetWorkspaceTimesheetHoursHandler (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);

        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        ApiResponse<List<TimesheetsTimesheetHoursResponse>> GetWorkspaceTimesheetHoursHandlerWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);
        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>List&lt;ModelsTimeEntry&gt;</returns>
        List<ModelsTimeEntry> GetWorkspaceTimesheetTimeEntriesHandler (int? workspaceId, int? setupId, string startDate);

        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntry&gt;</returns>
        ApiResponse<List<ModelsTimeEntry>> GetWorkspaceTimesheetTimeEntriesHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate);
        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        List<TimesheetsGetPaginatedResponse> GetWorkspaceTimesheetsHandler (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        ApiResponse<List<TimesheetsGetPaginatedResponse>> GetWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        List<TimesheetsetupsAPITimesheetSetup> PostTimesheetSetups (int? workspaceId, TimesheetsetupsCreatePayload payload);

        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        ApiResponse<List<TimesheetsetupsAPITimesheetSetup>> PostTimesheetSetupsWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload);
        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>TimesheetsetupsAPITimesheetSetup</returns>
        TimesheetsetupsAPITimesheetSetup PutTimesheetSetups (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);

        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>ApiResponse of TimesheetsetupsAPITimesheetSetup</returns>
        ApiResponse<TimesheetsetupsAPITimesheetSetup> PutTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);
        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>TimesheetsAPITimesheet</returns>
        TimesheetsAPITimesheet PutWorkspaceTimesheetsHandler (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);

        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>ApiResponse of TimesheetsAPITimesheet</returns>
        ApiResponse<TimesheetsAPITimesheet> PutWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteTimesheetSetupsAsync (int? workspaceId, int? setupId);

        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId);
        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of TimesheetsetupsGetPaginatedResponse</returns>
        System.Threading.Tasks.Task<TimesheetsetupsGetPaginatedResponse> GetTimesheetSetupsAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsGetPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsGetPaginatedResponse>> GetTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TimesheetsTimesheetHoursResponse>> GetWorkspaceTimesheetHoursHandlerAsync (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);

        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsTimesheetHoursResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimesheetsTimesheetHoursResponse>>> GetWorkspaceTimesheetHoursHandlerAsyncWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);
        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of List&lt;ModelsTimeEntry&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTimeEntry>> GetWorkspaceTimesheetTimeEntriesHandlerAsync (int? workspaceId, int? setupId, string startDate);

        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntry>>> GetWorkspaceTimesheetTimeEntriesHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate);
        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TimesheetsGetPaginatedResponse>> GetWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsGetPaginatedResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimesheetsGetPaginatedResponse>>> GetWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        System.Threading.Tasks.Task<List<TimesheetsetupsAPITimesheetSetup>> PostTimesheetSetupsAsync (int? workspaceId, TimesheetsetupsCreatePayload payload);

        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsetupsAPITimesheetSetup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>> PostTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload);
        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of TimesheetsetupsAPITimesheetSetup</returns>
        System.Threading.Tasks.Task<TimesheetsetupsAPITimesheetSetup> PutTimesheetSetupsAsync (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);

        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsAPITimesheetSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsAPITimesheetSetup>> PutTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);
        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of TimesheetsAPITimesheet</returns>
        System.Threading.Tasks.Task<TimesheetsAPITimesheet> PutWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);

        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of ApiResponse (TimesheetsAPITimesheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetsAPITimesheet>> PutWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApprovalsApi : IApprovalsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApprovalsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApprovalsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>string</returns>
        public string DeleteTimesheetSetups (int? workspaceId, int? setupId)
        {
             ApiResponse<string> localVarResponse = DeleteTimesheetSetupsWithHttpInfo(workspaceId, setupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->DeleteTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->DeleteTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteTimesheetSetupsAsync (int? workspaceId, int? setupId)
        {
             ApiResponse<string> localVarResponse = await DeleteTimesheetSetupsAsyncWithHttpInfo(workspaceId, setupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->DeleteTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->DeleteTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>TimesheetsetupsGetPaginatedResponse</returns>
        public TimesheetsetupsGetPaginatedResponse GetTimesheetSetups (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<TimesheetsetupsGetPaginatedResponse> localVarResponse = GetTimesheetSetupsWithHttpInfo(workspaceId, memberIds, approverIds, sortField, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of TimesheetsetupsGetPaginatedResponse</returns>
        public ApiResponse< TimesheetsetupsGetPaginatedResponse > GetTimesheetSetupsWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsGetPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsGetPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsGetPaginatedResponse)));
        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of TimesheetsetupsGetPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<TimesheetsetupsGetPaginatedResponse> GetTimesheetSetupsAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<TimesheetsetupsGetPaginatedResponse> localVarResponse = await GetTimesheetSetupsAsyncWithHttpInfo(workspaceId, memberIds, approverIds, sortField, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsGetPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsGetPaginatedResponse>> GetTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsGetPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsGetPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsGetPaginatedResponse)));
        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        public List<TimesheetsTimesheetHoursResponse> GetWorkspaceTimesheetHoursHandler (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
             ApiResponse<List<TimesheetsTimesheetHoursResponse>> localVarResponse = GetWorkspaceTimesheetHoursHandlerWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        public ApiResponse< List<TimesheetsTimesheetHoursResponse> > GetWorkspaceTimesheetHoursHandlerWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetWorkspaceTimesheetHoursHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->GetWorkspaceTimesheetHoursHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetHoursHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsTimesheetHoursResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsTimesheetHoursResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsTimesheetHoursResponse>)));
        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimesheetsTimesheetHoursResponse>> GetWorkspaceTimesheetHoursHandlerAsync (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
             ApiResponse<List<TimesheetsTimesheetHoursResponse>> localVarResponse = await GetWorkspaceTimesheetHoursHandlerAsyncWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsTimesheetHoursResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimesheetsTimesheetHoursResponse>>> GetWorkspaceTimesheetHoursHandlerAsyncWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetWorkspaceTimesheetHoursHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->GetWorkspaceTimesheetHoursHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetHoursHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsTimesheetHoursResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsTimesheetHoursResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsTimesheetHoursResponse>)));
        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>List&lt;ModelsTimeEntry&gt;</returns>
        public List<ModelsTimeEntry> GetWorkspaceTimesheetTimeEntriesHandler (int? workspaceId, int? setupId, string startDate)
        {
             ApiResponse<List<ModelsTimeEntry>> localVarResponse = GetWorkspaceTimesheetTimeEntriesHandlerWithHttpInfo(workspaceId, setupId, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntry&gt;</returns>
        public ApiResponse< List<ModelsTimeEntry> > GetWorkspaceTimesheetTimeEntriesHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApprovalsApi->GetWorkspaceTimesheetTimeEntriesHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetTimeEntriesHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntry>)));
        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of List&lt;ModelsTimeEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTimeEntry>> GetWorkspaceTimesheetTimeEntriesHandlerAsync (int? workspaceId, int? setupId, string startDate)
        {
             ApiResponse<List<ModelsTimeEntry>> localVarResponse = await GetWorkspaceTimesheetTimeEntriesHandlerAsyncWithHttpInfo(workspaceId, setupId, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntry>>> GetWorkspaceTimesheetTimeEntriesHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApprovalsApi->GetWorkspaceTimesheetTimeEntriesHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetTimeEntriesHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntry>)));
        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        public List<TimesheetsGetPaginatedResponse> GetWorkspaceTimesheetsHandler (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<List<TimesheetsGetPaginatedResponse>> localVarResponse = GetWorkspaceTimesheetsHandlerWithHttpInfo(workspaceId, memberIds, approverIds, timesheetSetupIds, statuses, before, after, page, perPage, sortField, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        public ApiResponse< List<TimesheetsGetPaginatedResponse> > GetWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (timesheetSetupIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timesheet_setup_ids", timesheetSetupIds)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsGetPaginatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsGetPaginatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsGetPaginatedResponse>)));
        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimesheetsGetPaginatedResponse>> GetWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<List<TimesheetsGetPaginatedResponse>> localVarResponse = await GetWorkspaceTimesheetsHandlerAsyncWithHttpInfo(workspaceId, memberIds, approverIds, timesheetSetupIds, statuses, before, after, page, perPage, sortField, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsGetPaginatedResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimesheetsGetPaginatedResponse>>> GetWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->GetWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (timesheetSetupIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timesheet_setup_ids", timesheetSetupIds)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsGetPaginatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsGetPaginatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsGetPaginatedResponse>)));
        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        public List<TimesheetsetupsAPITimesheetSetup> PostTimesheetSetups (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
             ApiResponse<List<TimesheetsetupsAPITimesheetSetup>> localVarResponse = PostTimesheetSetupsWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        public ApiResponse< List<TimesheetsetupsAPITimesheetSetup> > PostTimesheetSetupsWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->PostTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->PostTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsetupsAPITimesheetSetup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsetupsAPITimesheetSetup>)));
        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimesheetsetupsAPITimesheetSetup>> PostTimesheetSetupsAsync (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
             ApiResponse<List<TimesheetsetupsAPITimesheetSetup>> localVarResponse = await PostTimesheetSetupsAsyncWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsetupsAPITimesheetSetup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>> PostTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->PostTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->PostTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsetupsAPITimesheetSetup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsetupsAPITimesheetSetup>)));
        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>TimesheetsetupsAPITimesheetSetup</returns>
        public TimesheetsetupsAPITimesheetSetup PutTimesheetSetups (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
             ApiResponse<TimesheetsetupsAPITimesheetSetup> localVarResponse = PutTimesheetSetupsWithHttpInfo(workspaceId, setupId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>ApiResponse of TimesheetsetupsAPITimesheetSetup</returns>
        public ApiResponse< TimesheetsetupsAPITimesheetSetup > PutTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->PutTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->PutTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->PutTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsAPITimesheetSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsAPITimesheetSetup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsAPITimesheetSetup)));
        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of TimesheetsetupsAPITimesheetSetup</returns>
        public async System.Threading.Tasks.Task<TimesheetsetupsAPITimesheetSetup> PutTimesheetSetupsAsync (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
             ApiResponse<TimesheetsetupsAPITimesheetSetup> localVarResponse = await PutTimesheetSetupsAsyncWithHttpInfo(workspaceId, setupId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsAPITimesheetSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsAPITimesheetSetup>> PutTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->PutTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->PutTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->PutTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsAPITimesheetSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsAPITimesheetSetup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsAPITimesheetSetup)));
        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>TimesheetsAPITimesheet</returns>
        public TimesheetsAPITimesheet PutWorkspaceTimesheetsHandler (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
             ApiResponse<TimesheetsAPITimesheet> localVarResponse = PutWorkspaceTimesheetsHandlerWithHttpInfo(workspaceId, setupId, startDate, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>ApiResponse of TimesheetsAPITimesheet</returns>
        public ApiResponse< TimesheetsAPITimesheet > PutWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsAPITimesheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsAPITimesheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsAPITimesheet)));
        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of TimesheetsAPITimesheet</returns>
        public async System.Threading.Tasks.Task<TimesheetsAPITimesheet> PutWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
             ApiResponse<TimesheetsAPITimesheet> localVarResponse = await PutWorkspaceTimesheetsHandlerAsyncWithHttpInfo(workspaceId, setupId, startDate, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of ApiResponse (TimesheetsAPITimesheet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimesheetsAPITimesheet>> PutWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling ApprovalsApi->PutWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsAPITimesheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsAPITimesheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsAPITimesheet)));
        }

    }
}
