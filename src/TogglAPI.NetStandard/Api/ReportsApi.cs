/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Delete saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ModelsSavedReport</returns>
        ModelsSavedReport DeleteSavedReportResource (int? workspaceId, int? reportId);

        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Delete saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        ApiResponse<ModelsSavedReport> DeleteSavedReportResourceWithHttpInfo (int? workspaceId, int? reportId);
        /// <summary>
        /// ScheduledReport
        /// </summary>
        /// <remarks>
        /// Endpoint for delete a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>string</returns>
        string DeleteWorkspaceScheduledReports (int? workspaceId, int? reportId);

        /// <summary>
        /// ScheduledReport
        /// </summary>
        /// <remarks>
        /// Endpoint for delete a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteWorkspaceScheduledReportsWithHttpInfo (int? workspaceId, int? reportId);
        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Get saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ModelsSavedReport</returns>
        ModelsSavedReport GetSavedReportResource (int? workspaceId, int? reportId);

        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Get saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        ApiResponse<ModelsSavedReport> GetSavedReportResourceWithHttpInfo (int? workspaceId, int? reportId);
        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Get shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>List&lt;ModelsSavedReport&gt;</returns>
        List<ModelsSavedReport> GetSharedReport (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null);

        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Get shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsSavedReport&gt;</returns>
        ApiResponse<List<ModelsSavedReport>> GetSharedReportWithHttpInfo (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null);
        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Lists scheduled reports.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsScheduledReport&gt;</returns>
        List<ModelsScheduledReport> GetWorkspaceScheduledReports (int? workspaceId);

        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Lists scheduled reports.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsScheduledReport&gt;</returns>
        ApiResponse<List<ModelsScheduledReport>> GetWorkspaceScheduledReportsWithHttpInfo (int? workspaceId);
        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Add shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ModelsSavedReport</returns>
        ModelsSavedReport PostSharedReport (int? workspaceId, SavedPayload savedReportPayload);

        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Add shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        ApiResponse<ModelsSavedReport> PostSharedReportWithHttpInfo (int? workspaceId, SavedPayload savedReportPayload);
        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Endpoint for setting up a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>ModelsScheduledReport</returns>
        ModelsScheduledReport PostWorkspaceScheduledReports (int? workspaceId, ScheduledPayload workspaceId2);

        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Endpoint for setting up a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>ApiResponse of ModelsScheduledReport</returns>
        ApiResponse<ModelsScheduledReport> PostWorkspaceScheduledReportsWithHttpInfo (int? workspaceId, ScheduledPayload workspaceId2);
        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Change saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ModelsSavedReport</returns>
        ModelsSavedReport PutSavedReportResource (int? workspaceId, int? reportId, SavedPayload savedReportPayload);

        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Change saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        ApiResponse<ModelsSavedReport> PutSavedReportResourceWithHttpInfo (int? workspaceId, int? reportId, SavedPayload savedReportPayload);
        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Change shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ModelsSavedReport</returns>
        ModelsSavedReport PutSharedReport (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload);

        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Change shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        ApiResponse<ModelsSavedReport> PutSharedReportWithHttpInfo (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Delete saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ModelsSavedReport</returns>
        System.Threading.Tasks.Task<ModelsSavedReport> DeleteSavedReportResourceAsync (int? workspaceId, int? reportId);

        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Delete saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> DeleteSavedReportResourceAsyncWithHttpInfo (int? workspaceId, int? reportId);
        /// <summary>
        /// ScheduledReport
        /// </summary>
        /// <remarks>
        /// Endpoint for delete a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteWorkspaceScheduledReportsAsync (int? workspaceId, int? reportId);

        /// <summary>
        /// ScheduledReport
        /// </summary>
        /// <remarks>
        /// Endpoint for delete a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceScheduledReportsAsyncWithHttpInfo (int? workspaceId, int? reportId);
        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Get saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ModelsSavedReport</returns>
        System.Threading.Tasks.Task<ModelsSavedReport> GetSavedReportResourceAsync (int? workspaceId, int? reportId);

        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Get saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> GetSavedReportResourceAsyncWithHttpInfo (int? workspaceId, int? reportId);
        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Get shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>Task of List&lt;ModelsSavedReport&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsSavedReport>> GetSharedReportAsync (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null);

        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Get shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSavedReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsSavedReport>>> GetSharedReportAsyncWithHttpInfo (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null);
        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Lists scheduled reports.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsScheduledReport&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsScheduledReport>> GetWorkspaceScheduledReportsAsync (int? workspaceId);

        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Lists scheduled reports.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsScheduledReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsScheduledReport>>> GetWorkspaceScheduledReportsAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Add shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ModelsSavedReport</returns>
        System.Threading.Tasks.Task<ModelsSavedReport> PostSharedReportAsync (int? workspaceId, SavedPayload savedReportPayload);

        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Add shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> PostSharedReportAsyncWithHttpInfo (int? workspaceId, SavedPayload savedReportPayload);
        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Endpoint for setting up a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>Task of ModelsScheduledReport</returns>
        System.Threading.Tasks.Task<ModelsScheduledReport> PostWorkspaceScheduledReportsAsync (int? workspaceId, ScheduledPayload workspaceId2);

        /// <summary>
        /// ScheduledReports
        /// </summary>
        /// <remarks>
        /// Endpoint for setting up a scheduled report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>Task of ApiResponse (ModelsScheduledReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsScheduledReport>> PostWorkspaceScheduledReportsAsyncWithHttpInfo (int? workspaceId, ScheduledPayload workspaceId2);
        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Change saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ModelsSavedReport</returns>
        System.Threading.Tasks.Task<ModelsSavedReport> PutSavedReportResourceAsync (int? workspaceId, int? reportId, SavedPayload savedReportPayload);

        /// <summary>
        /// models.SavedReport
        /// </summary>
        /// <remarks>
        /// Change saved report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> PutSavedReportResourceAsyncWithHttpInfo (int? workspaceId, int? reportId, SavedPayload savedReportPayload);
        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Change shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ModelsSavedReport</returns>
        System.Threading.Tasks.Task<ModelsSavedReport> PutSharedReportAsync (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload);

        /// <summary>
        /// workspace.SharedReport
        /// </summary>
        /// <remarks>
        /// Change shared report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> PutSharedReportAsyncWithHttpInfo (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportsApi : IReportsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// models.SavedReport Delete saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ModelsSavedReport</returns>
        public ModelsSavedReport DeleteSavedReportResource (int? workspaceId, int? reportId)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = DeleteSavedReportResourceWithHttpInfo(workspaceId, reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// models.SavedReport Delete saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        public ApiResponse< ModelsSavedReport > DeleteSavedReportResourceWithHttpInfo (int? workspaceId, int? reportId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->DeleteSavedReportResource");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->DeleteSavedReportResource");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSavedReportResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// models.SavedReport Delete saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ModelsSavedReport</returns>
        public async System.Threading.Tasks.Task<ModelsSavedReport> DeleteSavedReportResourceAsync (int? workspaceId, int? reportId)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = await DeleteSavedReportResourceAsyncWithHttpInfo(workspaceId, reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// models.SavedReport Delete saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> DeleteSavedReportResourceAsyncWithHttpInfo (int? workspaceId, int? reportId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->DeleteSavedReportResource");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->DeleteSavedReportResource");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSavedReportResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// ScheduledReport Endpoint for delete a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>string</returns>
        public string DeleteWorkspaceScheduledReports (int? workspaceId, int? reportId)
        {
             ApiResponse<string> localVarResponse = DeleteWorkspaceScheduledReportsWithHttpInfo(workspaceId, reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ScheduledReport Endpoint for delete a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteWorkspaceScheduledReportsWithHttpInfo (int? workspaceId, int? reportId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->DeleteWorkspaceScheduledReports");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->DeleteWorkspaceScheduledReports");

            var localVarPath = "/workspaces/{workspace_id}/scheduled_reports/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceScheduledReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// ScheduledReport Endpoint for delete a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteWorkspaceScheduledReportsAsync (int? workspaceId, int? reportId)
        {
             ApiResponse<string> localVarResponse = await DeleteWorkspaceScheduledReportsAsyncWithHttpInfo(workspaceId, reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ScheduledReport Endpoint for delete a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reportId">Numeric ID of the report</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceScheduledReportsAsyncWithHttpInfo (int? workspaceId, int? reportId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->DeleteWorkspaceScheduledReports");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->DeleteWorkspaceScheduledReports");

            var localVarPath = "/workspaces/{workspace_id}/scheduled_reports/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceScheduledReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// models.SavedReport Get saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ModelsSavedReport</returns>
        public ModelsSavedReport GetSavedReportResource (int? workspaceId, int? reportId)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = GetSavedReportResourceWithHttpInfo(workspaceId, reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// models.SavedReport Get saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        public ApiResponse< ModelsSavedReport > GetSavedReportResourceWithHttpInfo (int? workspaceId, int? reportId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->GetSavedReportResource");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->GetSavedReportResource");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSavedReportResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// models.SavedReport Get saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ModelsSavedReport</returns>
        public async System.Threading.Tasks.Task<ModelsSavedReport> GetSavedReportResourceAsync (int? workspaceId, int? reportId)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = await GetSavedReportResourceAsyncWithHttpInfo(workspaceId, reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// models.SavedReport Get saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> GetSavedReportResourceAsyncWithHttpInfo (int? workspaceId, int? reportId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->GetSavedReportResource");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->GetSavedReportResource");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSavedReportResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// workspace.SharedReport Get shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>List&lt;ModelsSavedReport&gt;</returns>
        public List<ModelsSavedReport> GetSharedReport (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null)
        {
             ApiResponse<List<ModelsSavedReport>> localVarResponse = GetSharedReportWithHttpInfo(workspaceId, fixedDates, name, ownerID, page, perPage, _public, scheduled, sortDirection, sortField);
             return localVarResponse.Data;
        }

        /// <summary>
        /// workspace.SharedReport Get shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsSavedReport&gt;</returns>
        public ApiResponse< List<ModelsSavedReport> > GetSharedReportWithHttpInfo (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->GetSharedReport");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (fixedDates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fixed_dates", fixedDates)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ownerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerID", ownerID)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (scheduled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduled", scheduled)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_direction", sortDirection)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSharedReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSavedReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSavedReport>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSavedReport>)));
        }

        /// <summary>
        /// workspace.SharedReport Get shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>Task of List&lt;ModelsSavedReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsSavedReport>> GetSharedReportAsync (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null)
        {
             ApiResponse<List<ModelsSavedReport>> localVarResponse = await GetSharedReportAsyncWithHttpInfo(workspaceId, fixedDates, name, ownerID, page, perPage, _public, scheduled, sortDirection, sortField);
             return localVarResponse.Data;

        }

        /// <summary>
        /// workspace.SharedReport Get shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="fixedDates"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="ownerID"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="_public"> (optional)</param>
        /// <param name="scheduled"> (optional)</param>
        /// <param name="sortDirection"> (optional)</param>
        /// <param name="sortField"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSavedReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsSavedReport>>> GetSharedReportAsyncWithHttpInfo (int? workspaceId, bool? fixedDates = null, string name = null, int? ownerID = null, int? page = null, int? perPage = null, bool? _public = null, bool? scheduled = null, string sortDirection = null, string sortField = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->GetSharedReport");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (fixedDates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fixed_dates", fixedDates)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ownerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerID", ownerID)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (scheduled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduled", scheduled)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_direction", sortDirection)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSharedReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSavedReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSavedReport>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSavedReport>)));
        }

        /// <summary>
        /// ScheduledReports Lists scheduled reports.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsScheduledReport&gt;</returns>
        public List<ModelsScheduledReport> GetWorkspaceScheduledReports (int? workspaceId)
        {
             ApiResponse<List<ModelsScheduledReport>> localVarResponse = GetWorkspaceScheduledReportsWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ScheduledReports Lists scheduled reports.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsScheduledReport&gt;</returns>
        public ApiResponse< List<ModelsScheduledReport> > GetWorkspaceScheduledReportsWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->GetWorkspaceScheduledReports");

            var localVarPath = "/workspaces/{workspace_id}/scheduled_reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceScheduledReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsScheduledReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsScheduledReport>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsScheduledReport>)));
        }

        /// <summary>
        /// ScheduledReports Lists scheduled reports.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsScheduledReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsScheduledReport>> GetWorkspaceScheduledReportsAsync (int? workspaceId)
        {
             ApiResponse<List<ModelsScheduledReport>> localVarResponse = await GetWorkspaceScheduledReportsAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ScheduledReports Lists scheduled reports.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsScheduledReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsScheduledReport>>> GetWorkspaceScheduledReportsAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->GetWorkspaceScheduledReports");

            var localVarPath = "/workspaces/{workspace_id}/scheduled_reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceScheduledReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsScheduledReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsScheduledReport>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsScheduledReport>)));
        }

        /// <summary>
        /// workspace.SharedReport Add shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ModelsSavedReport</returns>
        public ModelsSavedReport PostSharedReport (int? workspaceId, SavedPayload savedReportPayload)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = PostSharedReportWithHttpInfo(workspaceId, savedReportPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// workspace.SharedReport Add shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        public ApiResponse< ModelsSavedReport > PostSharedReportWithHttpInfo (int? workspaceId, SavedPayload savedReportPayload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PostSharedReport");
            // verify the required parameter 'savedReportPayload' is set
            if (savedReportPayload == null)
                throw new ApiException(400, "Missing required parameter 'savedReportPayload' when calling ReportsApi->PostSharedReport");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (savedReportPayload != null && savedReportPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savedReportPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savedReportPayload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSharedReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// workspace.SharedReport Add shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ModelsSavedReport</returns>
        public async System.Threading.Tasks.Task<ModelsSavedReport> PostSharedReportAsync (int? workspaceId, SavedPayload savedReportPayload)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = await PostSharedReportAsyncWithHttpInfo(workspaceId, savedReportPayload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// workspace.SharedReport Add shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> PostSharedReportAsyncWithHttpInfo (int? workspaceId, SavedPayload savedReportPayload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PostSharedReport");
            // verify the required parameter 'savedReportPayload' is set
            if (savedReportPayload == null)
                throw new ApiException(400, "Missing required parameter 'savedReportPayload' when calling ReportsApi->PostSharedReport");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (savedReportPayload != null && savedReportPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savedReportPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savedReportPayload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSharedReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// ScheduledReports Endpoint for setting up a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>ModelsScheduledReport</returns>
        public ModelsScheduledReport PostWorkspaceScheduledReports (int? workspaceId, ScheduledPayload workspaceId2)
        {
             ApiResponse<ModelsScheduledReport> localVarResponse = PostWorkspaceScheduledReportsWithHttpInfo(workspaceId, workspaceId2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ScheduledReports Endpoint for setting up a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>ApiResponse of ModelsScheduledReport</returns>
        public ApiResponse< ModelsScheduledReport > PostWorkspaceScheduledReportsWithHttpInfo (int? workspaceId, ScheduledPayload workspaceId2)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PostWorkspaceScheduledReports");
            // verify the required parameter 'workspaceId2' is set
            if (workspaceId2 == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId2' when calling ReportsApi->PostWorkspaceScheduledReports");

            var localVarPath = "/workspaces/{workspace_id}/scheduled_reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceId2 != null && workspaceId2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceId2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceId2; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceScheduledReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsScheduledReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsScheduledReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsScheduledReport)));
        }

        /// <summary>
        /// ScheduledReports Endpoint for setting up a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>Task of ModelsScheduledReport</returns>
        public async System.Threading.Tasks.Task<ModelsScheduledReport> PostWorkspaceScheduledReportsAsync (int? workspaceId, ScheduledPayload workspaceId2)
        {
             ApiResponse<ModelsScheduledReport> localVarResponse = await PostWorkspaceScheduledReportsAsyncWithHttpInfo(workspaceId, workspaceId2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ScheduledReports Endpoint for setting up a scheduled report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceId2">Comment from the client on the pricing plan change</param>
        /// <returns>Task of ApiResponse (ModelsScheduledReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsScheduledReport>> PostWorkspaceScheduledReportsAsyncWithHttpInfo (int? workspaceId, ScheduledPayload workspaceId2)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PostWorkspaceScheduledReports");
            // verify the required parameter 'workspaceId2' is set
            if (workspaceId2 == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId2' when calling ReportsApi->PostWorkspaceScheduledReports");

            var localVarPath = "/workspaces/{workspace_id}/scheduled_reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceId2 != null && workspaceId2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceId2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceId2; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceScheduledReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsScheduledReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsScheduledReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsScheduledReport)));
        }

        /// <summary>
        /// models.SavedReport Change saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ModelsSavedReport</returns>
        public ModelsSavedReport PutSavedReportResource (int? workspaceId, int? reportId, SavedPayload savedReportPayload)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = PutSavedReportResourceWithHttpInfo(workspaceId, reportId, savedReportPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// models.SavedReport Change saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        public ApiResponse< ModelsSavedReport > PutSavedReportResourceWithHttpInfo (int? workspaceId, int? reportId, SavedPayload savedReportPayload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PutSavedReportResource");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->PutSavedReportResource");
            // verify the required parameter 'savedReportPayload' is set
            if (savedReportPayload == null)
                throw new ApiException(400, "Missing required parameter 'savedReportPayload' when calling ReportsApi->PutSavedReportResource");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter
            if (savedReportPayload != null && savedReportPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savedReportPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savedReportPayload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSavedReportResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// models.SavedReport Change saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ModelsSavedReport</returns>
        public async System.Threading.Tasks.Task<ModelsSavedReport> PutSavedReportResourceAsync (int? workspaceId, int? reportId, SavedPayload savedReportPayload)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = await PutSavedReportResourceAsyncWithHttpInfo(workspaceId, reportId, savedReportPayload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// models.SavedReport Change saved report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> PutSavedReportResourceAsyncWithHttpInfo (int? workspaceId, int? reportId, SavedPayload savedReportPayload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PutSavedReportResource");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->PutSavedReportResource");
            // verify the required parameter 'savedReportPayload' is set
            if (savedReportPayload == null)
                throw new ApiException(400, "Missing required parameter 'savedReportPayload' when calling ReportsApi->PutSavedReportResource");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared/{report_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter
            if (savedReportPayload != null && savedReportPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savedReportPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savedReportPayload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSavedReportResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// workspace.SharedReport Change shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ModelsSavedReport</returns>
        public ModelsSavedReport PutSharedReport (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = PutSharedReportWithHttpInfo(workspaceId, reportId, savedReportPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// workspace.SharedReport Change shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>ApiResponse of ModelsSavedReport</returns>
        public ApiResponse< ModelsSavedReport > PutSharedReportWithHttpInfo (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PutSharedReport");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->PutSharedReport");
            // verify the required parameter 'savedReportPayload' is set
            if (savedReportPayload == null)
                throw new ApiException(400, "Missing required parameter 'savedReportPayload' when calling ReportsApi->PutSharedReport");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter
            if (savedReportPayload != null && savedReportPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savedReportPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savedReportPayload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSharedReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

        /// <summary>
        /// workspace.SharedReport Change shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ModelsSavedReport</returns>
        public async System.Threading.Tasks.Task<ModelsSavedReport> PutSharedReportAsync (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload)
        {
             ApiResponse<ModelsSavedReport> localVarResponse = await PutSharedReportAsyncWithHttpInfo(workspaceId, reportId, savedReportPayload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// workspace.SharedReport Change shared report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="reportId">Numeric ID of the report.</param>
        /// <param name="savedReportPayload">Saved Report Payload</param>
        /// <returns>Task of ApiResponse (ModelsSavedReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSavedReport>> PutSharedReportAsyncWithHttpInfo (int? workspaceId, int? reportId, List<SavedPayload> savedReportPayload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ReportsApi->PutSharedReport");
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->PutSharedReport");
            // verify the required parameter 'savedReportPayload' is set
            if (savedReportPayload == null)
                throw new ApiException(400, "Missing required parameter 'savedReportPayload' when calling ReportsApi->PutSharedReport");

            var localVarPath = "/workspaces/{workspace_id}/reports/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reportId != null) localVarPathParams.Add("report_id", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter
            if (savedReportPayload != null && savedReportPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savedReportPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savedReportPayload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSharedReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSavedReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSavedReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSavedReport)));
        }

    }
}
