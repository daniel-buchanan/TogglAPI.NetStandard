/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Delete projects task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>string</returns>
        string DeleteWorkspaceProjectTask (int? workspaceId, int? projectId, int? taskId);

        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Delete projects task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteWorkspaceProjectTaskWithHttpInfo (int? workspaceId, int? projectId, int? taskId);
        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Get project task for given task id.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>ModelsTask</returns>
        ModelsTask GetWorkspaceProjectTask (int? workspaceId, int? projectId, int? taskId);

        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Get project task for given task id.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        ApiResponse<ModelsTask> GetWorkspaceProjectTaskWithHttpInfo (int? workspaceId, int? projectId, int? taskId);
        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Get project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ModelsTask</returns>
        ModelsTask GetWorkspaceProjectTasks (int? workspaceId, int? projectId);

        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Get project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        ApiResponse<ModelsTask> GetWorkspaceProjectTasksWithHttpInfo (int? workspaceId, int? projectId);
        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// List Workspace tasks.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>TaskResponse</returns>
        TaskResponse GetWorkspaceTasks (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// List Workspace tasks.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        ApiResponse<TaskResponse> GetWorkspaceTasksWithHttpInfo (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Patch project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>TaskPatchOutput</returns>
        TaskPatchOutput PatchWorkspaceProjectTasks (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput);

        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Patch project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>ApiResponse of TaskPatchOutput</returns>
        ApiResponse<TaskPatchOutput> PatchWorkspaceProjectTasksWithHttpInfo (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput);
        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Post project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ModelsTask</returns>
        ModelsTask PostWorkspaceProjectTasks (int? workspaceId, int? projectId, TaskPayload postInput);

        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Post project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        ApiResponse<ModelsTask> PostWorkspaceProjectTasksWithHttpInfo (int? workspaceId, int? projectId, TaskPayload postInput);
        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Put project task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>ModelsTask</returns>
        ModelsTask PutWorkspaceProjectTask (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput);

        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Put project task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        ApiResponse<ModelsTask> PutWorkspaceProjectTaskWithHttpInfo (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Delete projects task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteWorkspaceProjectTaskAsync (int? workspaceId, int? projectId, int? taskId);

        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Delete projects task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceProjectTaskAsyncWithHttpInfo (int? workspaceId, int? projectId, int? taskId);
        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Get project task for given task id.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of ModelsTask</returns>
        System.Threading.Tasks.Task<ModelsTask> GetWorkspaceProjectTaskAsync (int? workspaceId, int? projectId, int? taskId);

        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Get project task for given task id.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTask>> GetWorkspaceProjectTaskAsyncWithHttpInfo (int? workspaceId, int? projectId, int? taskId);
        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Get project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ModelsTask</returns>
        System.Threading.Tasks.Task<ModelsTask> GetWorkspaceProjectTasksAsync (int? workspaceId, int? projectId);

        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Get project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTask>> GetWorkspaceProjectTasksAsyncWithHttpInfo (int? workspaceId, int? projectId);
        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// List Workspace tasks.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of TaskResponse</returns>
        System.Threading.Tasks.Task<TaskResponse> GetWorkspaceTasksAsync (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// List Workspace tasks.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskResponse>> GetWorkspaceTasksAsyncWithHttpInfo (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Patch project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>Task of TaskPatchOutput</returns>
        System.Threading.Tasks.Task<TaskPatchOutput> PatchWorkspaceProjectTasksAsync (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput);

        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Patch project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>Task of ApiResponse (TaskPatchOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskPatchOutput>> PatchWorkspaceProjectTasksAsyncWithHttpInfo (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput);
        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Post project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ModelsTask</returns>
        System.Threading.Tasks.Task<ModelsTask> PostWorkspaceProjectTasksAsync (int? workspaceId, int? projectId, TaskPayload postInput);

        /// <summary>
        /// WorkspaceProjectTasks
        /// </summary>
        /// <remarks>
        /// Post project tasks for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTask>> PostWorkspaceProjectTasksAsyncWithHttpInfo (int? workspaceId, int? projectId, TaskPayload postInput);
        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Put project task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>Task of ModelsTask</returns>
        System.Threading.Tasks.Task<ModelsTask> PutWorkspaceProjectTaskAsync (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput);

        /// <summary>
        /// WorkspaceProjectTask
        /// </summary>
        /// <remarks>
        /// Put project task for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTask>> PutWorkspaceProjectTaskAsyncWithHttpInfo (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// WorkspaceProjectTask Delete projects task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>string</returns>
        public string DeleteWorkspaceProjectTask (int? workspaceId, int? projectId, int? taskId)
        {
             ApiResponse<string> localVarResponse = DeleteWorkspaceProjectTaskWithHttpInfo(workspaceId, projectId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjectTask Delete projects task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteWorkspaceProjectTaskWithHttpInfo (int? workspaceId, int? projectId, int? taskId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->DeleteWorkspaceProjectTask");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->DeleteWorkspaceProjectTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteWorkspaceProjectTask");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceProjectTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// WorkspaceProjectTask Delete projects task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteWorkspaceProjectTaskAsync (int? workspaceId, int? projectId, int? taskId)
        {
             ApiResponse<string> localVarResponse = await DeleteWorkspaceProjectTaskAsyncWithHttpInfo(workspaceId, projectId, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjectTask Delete projects task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceProjectTaskAsyncWithHttpInfo (int? workspaceId, int? projectId, int? taskId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->DeleteWorkspaceProjectTask");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->DeleteWorkspaceProjectTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteWorkspaceProjectTask");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceProjectTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// WorkspaceProjectTask Get project task for given task id.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>ModelsTask</returns>
        public ModelsTask GetWorkspaceProjectTask (int? workspaceId, int? projectId, int? taskId)
        {
             ApiResponse<ModelsTask> localVarResponse = GetWorkspaceProjectTaskWithHttpInfo(workspaceId, projectId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjectTask Get project task for given task id.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        public ApiResponse< ModelsTask > GetWorkspaceProjectTaskWithHttpInfo (int? workspaceId, int? projectId, int? taskId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->GetWorkspaceProjectTask");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->GetWorkspaceProjectTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetWorkspaceProjectTask");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

        /// <summary>
        /// WorkspaceProjectTask Get project task for given task id.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of ModelsTask</returns>
        public async System.Threading.Tasks.Task<ModelsTask> GetWorkspaceProjectTaskAsync (int? workspaceId, int? projectId, int? taskId)
        {
             ApiResponse<ModelsTask> localVarResponse = await GetWorkspaceProjectTaskAsyncWithHttpInfo(workspaceId, projectId, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjectTask Get project task for given task id.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of the task</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTask>> GetWorkspaceProjectTaskAsyncWithHttpInfo (int? workspaceId, int? projectId, int? taskId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->GetWorkspaceProjectTask");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->GetWorkspaceProjectTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetWorkspaceProjectTask");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

        /// <summary>
        /// WorkspaceProjectTasks Get project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ModelsTask</returns>
        public ModelsTask GetWorkspaceProjectTasks (int? workspaceId, int? projectId)
        {
             ApiResponse<ModelsTask> localVarResponse = GetWorkspaceProjectTasksWithHttpInfo(workspaceId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjectTasks Get project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        public ApiResponse< ModelsTask > GetWorkspaceProjectTasksWithHttpInfo (int? workspaceId, int? projectId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->GetWorkspaceProjectTasks");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->GetWorkspaceProjectTasks");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

        /// <summary>
        /// WorkspaceProjectTasks Get project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ModelsTask</returns>
        public async System.Threading.Tasks.Task<ModelsTask> GetWorkspaceProjectTasksAsync (int? workspaceId, int? projectId)
        {
             ApiResponse<ModelsTask> localVarResponse = await GetWorkspaceProjectTasksAsyncWithHttpInfo(workspaceId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjectTasks Get project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTask>> GetWorkspaceProjectTasksAsyncWithHttpInfo (int? workspaceId, int? projectId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->GetWorkspaceProjectTasks");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->GetWorkspaceProjectTasks");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

        /// <summary>
        /// Tasks List Workspace tasks.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>TaskResponse</returns>
        public TaskResponse GetWorkspaceTasks (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<TaskResponse> localVarResponse = GetWorkspaceTasksWithHttpInfo(workspaceId, since, page, perPage, sortOrder, sortField, active, pid, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tasks List Workspace tasks.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        public ApiResponse< TaskResponse > GetWorkspaceTasksWithHttpInfo (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->GetWorkspaceTasks");

            var localVarPath = "/workspaces/{workspace_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (pid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pid", pid)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        /// Tasks List Workspace tasks.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of TaskResponse</returns>
        public async System.Threading.Tasks.Task<TaskResponse> GetWorkspaceTasksAsync (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<TaskResponse> localVarResponse = await GetWorkspaceTasksAsyncWithHttpInfo(workspaceId, since, page, perPage, sortOrder, sortField, active, pid, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tasks List Workspace tasks.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortOrder">Sort order, default ASC (optional)</param>
        /// <param name="sortField">Field used for sorting. Default is name. Valid values are &#39;name&#39; and &#39;created_at&#39; (optional)</param>
        /// <param name="active">Filter by active state. You can also pass &#39;both&#39; to get both active and inactive tasks. (optional)</param>
        /// <param name="pid">Filter by project id (optional)</param>
        /// <param name="startDate">Smallest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Biggest boundary date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskResponse>> GetWorkspaceTasksAsyncWithHttpInfo (int? workspaceId, int? since = null, int? page = null, int? perPage = null, string sortOrder = null, string sortField = null, bool? active = null, int? pid = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->GetWorkspaceTasks");

            var localVarPath = "/workspaces/{workspace_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (pid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pid", pid)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        /// WorkspaceProjectTasks Patch project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>TaskPatchOutput</returns>
        public TaskPatchOutput PatchWorkspaceProjectTasks (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput)
        {
             ApiResponse<TaskPatchOutput> localVarResponse = PatchWorkspaceProjectTasksWithHttpInfo(workspaceId, projectId, taskIds, patchInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjectTasks Patch project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>ApiResponse of TaskPatchOutput</returns>
        public ApiResponse< TaskPatchOutput > PatchWorkspaceProjectTasksWithHttpInfo (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->PatchWorkspaceProjectTasks");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->PatchWorkspaceProjectTasks");
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TasksApi->PatchWorkspaceProjectTasks");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling TasksApi->PatchWorkspaceProjectTasks");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskIds != null) localVarPathParams.Add("task_ids", this.Configuration.ApiClient.ParameterToString(taskIds)); // path parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskPatchOutput)));
        }

        /// <summary>
        /// WorkspaceProjectTasks Patch project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>Task of TaskPatchOutput</returns>
        public async System.Threading.Tasks.Task<TaskPatchOutput> PatchWorkspaceProjectTasksAsync (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput)
        {
             ApiResponse<TaskPatchOutput> localVarResponse = await PatchWorkspaceProjectTasksAsyncWithHttpInfo(workspaceId, projectId, taskIds, patchInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjectTasks Patch project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskIds">Numeric IDs of project tasks separated by comma</param>
        /// <param name="patchInput">Patch operations</param>
        /// <returns>Task of ApiResponse (TaskPatchOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskPatchOutput>> PatchWorkspaceProjectTasksAsyncWithHttpInfo (int? workspaceId, int? projectId, string taskIds, List<TaskPatchInput> patchInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->PatchWorkspaceProjectTasks");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->PatchWorkspaceProjectTasks");
            // verify the required parameter 'taskIds' is set
            if (taskIds == null)
                throw new ApiException(400, "Missing required parameter 'taskIds' when calling TasksApi->PatchWorkspaceProjectTasks");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling TasksApi->PatchWorkspaceProjectTasks");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskIds != null) localVarPathParams.Add("task_ids", this.Configuration.ApiClient.ParameterToString(taskIds)); // path parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskPatchOutput)));
        }

        /// <summary>
        /// WorkspaceProjectTasks Post project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ModelsTask</returns>
        public ModelsTask PostWorkspaceProjectTasks (int? workspaceId, int? projectId, TaskPayload postInput)
        {
             ApiResponse<ModelsTask> localVarResponse = PostWorkspaceProjectTasksWithHttpInfo(workspaceId, projectId, postInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjectTasks Post project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        public ApiResponse< ModelsTask > PostWorkspaceProjectTasksWithHttpInfo (int? workspaceId, int? projectId, TaskPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->PostWorkspaceProjectTasks");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->PostWorkspaceProjectTasks");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling TasksApi->PostWorkspaceProjectTasks");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

        /// <summary>
        /// WorkspaceProjectTasks Post project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ModelsTask</returns>
        public async System.Threading.Tasks.Task<ModelsTask> PostWorkspaceProjectTasksAsync (int? workspaceId, int? projectId, TaskPayload postInput)
        {
             ApiResponse<ModelsTask> localVarResponse = await PostWorkspaceProjectTasksAsyncWithHttpInfo(workspaceId, projectId, postInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjectTasks Post project tasks for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTask>> PostWorkspaceProjectTasksAsyncWithHttpInfo (int? workspaceId, int? projectId, TaskPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->PostWorkspaceProjectTasks");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->PostWorkspaceProjectTasks");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling TasksApi->PostWorkspaceProjectTasks");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

        /// <summary>
        /// WorkspaceProjectTask Put project task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>ModelsTask</returns>
        public ModelsTask PutWorkspaceProjectTask (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput)
        {
             ApiResponse<ModelsTask> localVarResponse = PutWorkspaceProjectTaskWithHttpInfo(workspaceId, projectId, taskId, patchInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjectTask Put project task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>ApiResponse of ModelsTask</returns>
        public ApiResponse< ModelsTask > PutWorkspaceProjectTaskWithHttpInfo (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->PutWorkspaceProjectTask");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->PutWorkspaceProjectTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PutWorkspaceProjectTask");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling TasksApi->PutWorkspaceProjectTask");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProjectTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

        /// <summary>
        /// WorkspaceProjectTask Put project task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>Task of ModelsTask</returns>
        public async System.Threading.Tasks.Task<ModelsTask> PutWorkspaceProjectTaskAsync (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput)
        {
             ApiResponse<ModelsTask> localVarResponse = await PutWorkspaceProjectTaskAsyncWithHttpInfo(workspaceId, projectId, taskId, patchInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjectTask Put project task for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="taskId">Numeric ID of project task</param>
        /// <param name="patchInput">Put parameters</param>
        /// <returns>Task of ApiResponse (ModelsTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTask>> PutWorkspaceProjectTaskAsyncWithHttpInfo (int? workspaceId, int? projectId, string taskId, TaskPayload patchInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TasksApi->PutWorkspaceProjectTask");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling TasksApi->PutWorkspaceProjectTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PutWorkspaceProjectTask");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling TasksApi->PutWorkspaceProjectTask");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProjectTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTask)));
        }

    }
}
