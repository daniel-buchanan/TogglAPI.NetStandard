/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all calendars for a given user.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given user that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>HandlercalendarCalendarsResponse</returns>
        HandlercalendarCalendarsResponse IntegrationsCalendarCalendarsSelectedGet (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null);

        /// <summary>
        /// Get all calendars for a given user.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given user that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>ApiResponse of HandlercalendarCalendarsResponse</returns>
        ApiResponse<HandlercalendarCalendarsResponse> IntegrationsCalendarCalendarsSelectedGetWithHttpInfo (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null);
        /// <summary>
        /// Callback for provider OAuth setup.
        /// </summary>
        /// <remarks>
        /// Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns></returns>
        void IntegrationsCalendarCallbackProviderGet (string provider, string state, string code);

        /// <summary>
        /// Callback for provider OAuth setup.
        /// </summary>
        /// <remarks>
        /// Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IntegrationsCalendarCallbackProviderGetWithHttpInfo (string provider, string state, string code);
        /// <summary>
        /// Get details suggestion for given events.
        /// </summary>
        /// <remarks>
        /// Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>HandlercalendarPostDetailsSuggestionResponse</returns>
        HandlercalendarPostDetailsSuggestionResponse IntegrationsCalendarEventsDetailsSuggestionPost (HandlercalendarPostDetailsSuggestionRequest request);

        /// <summary>
        /// Get details suggestion for given events.
        /// </summary>
        /// <remarks>
        /// Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>ApiResponse of HandlercalendarPostDetailsSuggestionResponse</returns>
        ApiResponse<HandlercalendarPostDetailsSuggestionResponse> IntegrationsCalendarEventsDetailsSuggestionPostWithHttpInfo (HandlercalendarPostDetailsSuggestionRequest request);
        /// <summary>
        /// Get details suggestion for a given event.
        /// </summary>
        /// <remarks>
        /// Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>ModelsSuggestion</returns>
        ModelsSuggestion IntegrationsCalendarEventsEventIdDetailsSuggestionGet (int? eventId);

        /// <summary>
        /// Get details suggestion for a given event.
        /// </summary>
        /// <remarks>
        /// Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>ApiResponse of ModelsSuggestion</returns>
        ApiResponse<ModelsSuggestion> IntegrationsCalendarEventsEventIdDetailsSuggestionGetWithHttpInfo (int? eventId);
        /// <summary>
        /// Get all events for the caller user.
        /// </summary>
        /// <remarks>
        /// Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>HandlercalendarEventsResponse</returns>
        HandlercalendarEventsResponse IntegrationsCalendarEventsGet (string startDate, string endDate, string limit = null, string pageToken = null);

        /// <summary>
        /// Get all events for the caller user.
        /// </summary>
        /// <remarks>
        /// Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>ApiResponse of HandlercalendarEventsResponse</returns>
        ApiResponse<HandlercalendarEventsResponse> IntegrationsCalendarEventsGetWithHttpInfo (string startDate, string endDate, string limit = null, string pageToken = null);
        /// <summary>
        /// Update all events from selected calendars for a user.
        /// </summary>
        /// <remarks>
        /// Fetch all events from a user&#39;s selected calendars and save in database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HandlercalendarResponse</returns>
        HandlercalendarResponse IntegrationsCalendarEventsUpdatePost ();

        /// <summary>
        /// Update all events from selected calendars for a user.
        /// </summary>
        /// <remarks>
        /// Fetch all events from a user&#39;s selected calendars and save in database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HandlercalendarResponse</returns>
        ApiResponse<HandlercalendarResponse> IntegrationsCalendarEventsUpdatePostWithHttpInfo ();
        /// <summary>
        /// Get all integrations a user has.
        /// </summary>
        /// <remarks>
        /// Get all integrations a user has. Each user may have at most one integration per provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsIntegration&gt;</returns>
        List<ModelsIntegration> IntegrationsCalendarGet ();

        /// <summary>
        /// Get all integrations a user has.
        /// </summary>
        /// <remarks>
        /// Get all integrations a user has. Each user may have at most one integration per provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsIntegration&gt;</returns>
        ApiResponse<List<ModelsIntegration>> IntegrationsCalendarGetWithHttpInfo ();
        /// <summary>
        /// Sets whether a calendar is or not selected by the user.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to set updatable fields of a calendar like selected field.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>List&lt;ModelsCalendar&gt;</returns>
        List<ModelsCalendar> IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null);

        /// <summary>
        /// Sets whether a calendar is or not selected by the user.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to set updatable fields of a calendar like selected field.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsCalendar&gt;</returns>
        ApiResponse<List<ModelsCalendar>> IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchWithHttpInfo (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null);
        /// <summary>
        /// Get all calendars for a given integration.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given integration that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>HandlercalendarCalendarsResponse</returns>
        HandlercalendarCalendarsResponse IntegrationsCalendarIntegrationIdCalendarsGet (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null);

        /// <summary>
        /// Get all calendars for a given integration.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given integration that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>ApiResponse of HandlercalendarCalendarsResponse</returns>
        ApiResponse<HandlercalendarCalendarsResponse> IntegrationsCalendarIntegrationIdCalendarsGetWithHttpInfo (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null);
        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration.
        /// </summary>
        /// <remarks>
        /// Get all events for a given calendar in a given integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>HandlercalendarEventsResponse</returns>
        HandlercalendarEventsResponse IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null);

        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration.
        /// </summary>
        /// <remarks>
        /// Get all events for a given calendar in a given integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>ApiResponse of HandlercalendarEventsResponse</returns>
        ApiResponse<HandlercalendarEventsResponse> IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetWithHttpInfo (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null);
        /// <summary>
        /// Updates calendar data according to provider API.
        /// </summary>
        /// <remarks>
        /// This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>HandlercalendarFetchedCalendarsResponse</returns>
        HandlercalendarFetchedCalendarsResponse IntegrationsCalendarIntegrationIdCalendarsUpdatePost (int? integrationId);

        /// <summary>
        /// Updates calendar data according to provider API.
        /// </summary>
        /// <remarks>
        /// This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>ApiResponse of HandlercalendarFetchedCalendarsResponse</returns>
        ApiResponse<HandlercalendarFetchedCalendarsResponse> IntegrationsCalendarIntegrationIdCalendarsUpdatePostWithHttpInfo (int? integrationId);
        /// <summary>
        /// Delete a given integration.
        /// </summary>
        /// <remarks>
        /// Executes logic deletion of an integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>string</returns>
        string IntegrationsCalendarIntegrationIdDelete (int? integrationId);

        /// <summary>
        /// Delete a given integration.
        /// </summary>
        /// <remarks>
        /// Executes logic deletion of an integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IntegrationsCalendarIntegrationIdDeleteWithHttpInfo (int? integrationId);
        /// <summary>
        /// Get URL for setting up a calendar integration with given provider.
        /// </summary>
        /// <remarks>
        /// Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns></returns>
        void IntegrationsCalendarSetupGet (string provider, string returnTo = null);

        /// <summary>
        /// Get URL for setting up a calendar integration with given provider.
        /// </summary>
        /// <remarks>
        /// Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IntegrationsCalendarSetupGetWithHttpInfo (string provider, string returnTo = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all calendars for a given user.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given user that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>Task of HandlercalendarCalendarsResponse</returns>
        System.Threading.Tasks.Task<HandlercalendarCalendarsResponse> IntegrationsCalendarCalendarsSelectedGetAsync (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null);

        /// <summary>
        /// Get all calendars for a given user.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given user that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarCalendarsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlercalendarCalendarsResponse>> IntegrationsCalendarCalendarsSelectedGetAsyncWithHttpInfo (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null);
        /// <summary>
        /// Callback for provider OAuth setup.
        /// </summary>
        /// <remarks>
        /// Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IntegrationsCalendarCallbackProviderGetAsync (string provider, string state, string code);

        /// <summary>
        /// Callback for provider OAuth setup.
        /// </summary>
        /// <remarks>
        /// Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IntegrationsCalendarCallbackProviderGetAsyncWithHttpInfo (string provider, string state, string code);
        /// <summary>
        /// Get details suggestion for given events.
        /// </summary>
        /// <remarks>
        /// Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>Task of HandlercalendarPostDetailsSuggestionResponse</returns>
        System.Threading.Tasks.Task<HandlercalendarPostDetailsSuggestionResponse> IntegrationsCalendarEventsDetailsSuggestionPostAsync (HandlercalendarPostDetailsSuggestionRequest request);

        /// <summary>
        /// Get details suggestion for given events.
        /// </summary>
        /// <remarks>
        /// Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>Task of ApiResponse (HandlercalendarPostDetailsSuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlercalendarPostDetailsSuggestionResponse>> IntegrationsCalendarEventsDetailsSuggestionPostAsyncWithHttpInfo (HandlercalendarPostDetailsSuggestionRequest request);
        /// <summary>
        /// Get details suggestion for a given event.
        /// </summary>
        /// <remarks>
        /// Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>Task of ModelsSuggestion</returns>
        System.Threading.Tasks.Task<ModelsSuggestion> IntegrationsCalendarEventsEventIdDetailsSuggestionGetAsync (int? eventId);

        /// <summary>
        /// Get details suggestion for a given event.
        /// </summary>
        /// <remarks>
        /// Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>Task of ApiResponse (ModelsSuggestion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSuggestion>> IntegrationsCalendarEventsEventIdDetailsSuggestionGetAsyncWithHttpInfo (int? eventId);
        /// <summary>
        /// Get all events for the caller user.
        /// </summary>
        /// <remarks>
        /// Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of HandlercalendarEventsResponse</returns>
        System.Threading.Tasks.Task<HandlercalendarEventsResponse> IntegrationsCalendarEventsGetAsync (string startDate, string endDate, string limit = null, string pageToken = null);

        /// <summary>
        /// Get all events for the caller user.
        /// </summary>
        /// <remarks>
        /// Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlercalendarEventsResponse>> IntegrationsCalendarEventsGetAsyncWithHttpInfo (string startDate, string endDate, string limit = null, string pageToken = null);
        /// <summary>
        /// Update all events from selected calendars for a user.
        /// </summary>
        /// <remarks>
        /// Fetch all events from a user&#39;s selected calendars and save in database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HandlercalendarResponse</returns>
        System.Threading.Tasks.Task<HandlercalendarResponse> IntegrationsCalendarEventsUpdatePostAsync ();

        /// <summary>
        /// Update all events from selected calendars for a user.
        /// </summary>
        /// <remarks>
        /// Fetch all events from a user&#39;s selected calendars and save in database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HandlercalendarResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlercalendarResponse>> IntegrationsCalendarEventsUpdatePostAsyncWithHttpInfo ();
        /// <summary>
        /// Get all integrations a user has.
        /// </summary>
        /// <remarks>
        /// Get all integrations a user has. Each user may have at most one integration per provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsIntegration&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsIntegration>> IntegrationsCalendarGetAsync ();

        /// <summary>
        /// Get all integrations a user has.
        /// </summary>
        /// <remarks>
        /// Get all integrations a user has. Each user may have at most one integration per provider.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsIntegration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsIntegration>>> IntegrationsCalendarGetAsyncWithHttpInfo ();
        /// <summary>
        /// Sets whether a calendar is or not selected by the user.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to set updatable fields of a calendar like selected field.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>Task of List&lt;ModelsCalendar&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsCalendar>> IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchAsync (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null);

        /// <summary>
        /// Sets whether a calendar is or not selected by the user.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to set updatable fields of a calendar like selected field.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsCalendar&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsCalendar>>> IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchAsyncWithHttpInfo (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null);
        /// <summary>
        /// Get all calendars for a given integration.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given integration that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of HandlercalendarCalendarsResponse</returns>
        System.Threading.Tasks.Task<HandlercalendarCalendarsResponse> IntegrationsCalendarIntegrationIdCalendarsGetAsync (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null);

        /// <summary>
        /// Get all calendars for a given integration.
        /// </summary>
        /// <remarks>
        /// Get all calendars for a given integration that was previously saved in the database.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarCalendarsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlercalendarCalendarsResponse>> IntegrationsCalendarIntegrationIdCalendarsGetAsyncWithHttpInfo (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null);
        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration.
        /// </summary>
        /// <remarks>
        /// Get all events for a given calendar in a given integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of HandlercalendarEventsResponse</returns>
        System.Threading.Tasks.Task<HandlercalendarEventsResponse> IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetAsync (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null);

        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration.
        /// </summary>
        /// <remarks>
        /// Get all events for a given calendar in a given integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlercalendarEventsResponse>> IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetAsyncWithHttpInfo (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null);
        /// <summary>
        /// Updates calendar data according to provider API.
        /// </summary>
        /// <remarks>
        /// This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of HandlercalendarFetchedCalendarsResponse</returns>
        System.Threading.Tasks.Task<HandlercalendarFetchedCalendarsResponse> IntegrationsCalendarIntegrationIdCalendarsUpdatePostAsync (int? integrationId);

        /// <summary>
        /// Updates calendar data according to provider API.
        /// </summary>
        /// <remarks>
        /// This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of ApiResponse (HandlercalendarFetchedCalendarsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlercalendarFetchedCalendarsResponse>> IntegrationsCalendarIntegrationIdCalendarsUpdatePostAsyncWithHttpInfo (int? integrationId);
        /// <summary>
        /// Delete a given integration.
        /// </summary>
        /// <remarks>
        /// Executes logic deletion of an integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IntegrationsCalendarIntegrationIdDeleteAsync (int? integrationId);

        /// <summary>
        /// Delete a given integration.
        /// </summary>
        /// <remarks>
        /// Executes logic deletion of an integration.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IntegrationsCalendarIntegrationIdDeleteAsyncWithHttpInfo (int? integrationId);
        /// <summary>
        /// Get URL for setting up a calendar integration with given provider.
        /// </summary>
        /// <remarks>
        /// Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IntegrationsCalendarSetupGetAsync (string provider, string returnTo = null);

        /// <summary>
        /// Get URL for setting up a calendar integration with given provider.
        /// </summary>
        /// <remarks>
        /// Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IntegrationsCalendarSetupGetAsyncWithHttpInfo (string provider, string returnTo = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalendarApi : ICalendarApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalendarApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all calendars for a given user. Get all calendars for a given user that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>HandlercalendarCalendarsResponse</returns>
        public HandlercalendarCalendarsResponse IntegrationsCalendarCalendarsSelectedGet (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null)
        {
             ApiResponse<HandlercalendarCalendarsResponse> localVarResponse = IntegrationsCalendarCalendarsSelectedGetWithHttpInfo(limit, pageToken, integrationId, selected);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all calendars for a given user. Get all calendars for a given user that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>ApiResponse of HandlercalendarCalendarsResponse</returns>
        public ApiResponse< HandlercalendarCalendarsResponse > IntegrationsCalendarCalendarsSelectedGetWithHttpInfo (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null)
        {

            var localVarPath = "/integrations/calendar/calendars/selected";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_id", integrationId)); // query parameter
            if (selected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "selected", selected)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarCalendarsSelectedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarCalendarsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarCalendarsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarCalendarsResponse)));
        }

        /// <summary>
        /// Get all calendars for a given user. Get all calendars for a given user that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>Task of HandlercalendarCalendarsResponse</returns>
        public async System.Threading.Tasks.Task<HandlercalendarCalendarsResponse> IntegrationsCalendarCalendarsSelectedGetAsync (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null)
        {
             ApiResponse<HandlercalendarCalendarsResponse> localVarResponse = await IntegrationsCalendarCalendarsSelectedGetAsyncWithHttpInfo(limit, pageToken, integrationId, selected);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all calendars for a given user. Get all calendars for a given user that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <param name="integrationId">Filter calendars by the integration ID (optional)</param>
        /// <param name="selected">filter calendars by selected value (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarCalendarsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlercalendarCalendarsResponse>> IntegrationsCalendarCalendarsSelectedGetAsyncWithHttpInfo (string limit = null, string pageToken = null, int? integrationId = null, bool? selected = null)
        {

            var localVarPath = "/integrations/calendar/calendars/selected";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integration_id", integrationId)); // query parameter
            if (selected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "selected", selected)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarCalendarsSelectedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarCalendarsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarCalendarsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarCalendarsResponse)));
        }

        /// <summary>
        /// Callback for provider OAuth setup. Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns></returns>
        public void IntegrationsCalendarCallbackProviderGet (string provider, string state, string code)
        {
             IntegrationsCalendarCallbackProviderGetWithHttpInfo(provider, state, code);
        }

        /// <summary>
        /// Callback for provider OAuth setup. Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IntegrationsCalendarCallbackProviderGetWithHttpInfo (string provider, string state, string code)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling CalendarApi->IntegrationsCalendarCallbackProviderGet");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling CalendarApi->IntegrationsCalendarCallbackProviderGet");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarApi->IntegrationsCalendarCallbackProviderGet");

            var localVarPath = "/integrations/calendar/callback/{provider}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (provider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "provider", provider)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarCallbackProviderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Callback for provider OAuth setup. Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IntegrationsCalendarCallbackProviderGetAsync (string provider, string state, string code)
        {
             await IntegrationsCalendarCallbackProviderGetAsyncWithHttpInfo(provider, state, code);

        }

        /// <summary>
        /// Callback for provider OAuth setup. Callback endpoint used only by the Calendar Service Provider, which fetches the code
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider</param>
        /// <param name="state">state string to verify user authenticity</param>
        /// <param name="code">Temporary code which will be used to fetch credentials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IntegrationsCalendarCallbackProviderGetAsyncWithHttpInfo (string provider, string state, string code)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling CalendarApi->IntegrationsCalendarCallbackProviderGet");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling CalendarApi->IntegrationsCalendarCallbackProviderGet");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarApi->IntegrationsCalendarCallbackProviderGet");

            var localVarPath = "/integrations/calendar/callback/{provider}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (provider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "provider", provider)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarCallbackProviderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get details suggestion for given events. Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>HandlercalendarPostDetailsSuggestionResponse</returns>
        public HandlercalendarPostDetailsSuggestionResponse IntegrationsCalendarEventsDetailsSuggestionPost (HandlercalendarPostDetailsSuggestionRequest request)
        {
             ApiResponse<HandlercalendarPostDetailsSuggestionResponse> localVarResponse = IntegrationsCalendarEventsDetailsSuggestionPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details suggestion for given events. Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>ApiResponse of HandlercalendarPostDetailsSuggestionResponse</returns>
        public ApiResponse< HandlercalendarPostDetailsSuggestionResponse > IntegrationsCalendarEventsDetailsSuggestionPostWithHttpInfo (HandlercalendarPostDetailsSuggestionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CalendarApi->IntegrationsCalendarEventsDetailsSuggestionPost");

            var localVarPath = "/integrations/calendar/events/details-suggestion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsDetailsSuggestionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarPostDetailsSuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarPostDetailsSuggestionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarPostDetailsSuggestionResponse)));
        }

        /// <summary>
        /// Get details suggestion for given events. Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>Task of HandlercalendarPostDetailsSuggestionResponse</returns>
        public async System.Threading.Tasks.Task<HandlercalendarPostDetailsSuggestionResponse> IntegrationsCalendarEventsDetailsSuggestionPostAsync (HandlercalendarPostDetailsSuggestionRequest request)
        {
             ApiResponse<HandlercalendarPostDetailsSuggestionResponse> localVarResponse = await IntegrationsCalendarEventsDetailsSuggestionPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details suggestion for given events. Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request body containing the event IDs we want to get the suggestion for</param>
        /// <returns>Task of ApiResponse (HandlercalendarPostDetailsSuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlercalendarPostDetailsSuggestionResponse>> IntegrationsCalendarEventsDetailsSuggestionPostAsyncWithHttpInfo (HandlercalendarPostDetailsSuggestionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CalendarApi->IntegrationsCalendarEventsDetailsSuggestionPost");

            var localVarPath = "/integrations/calendar/events/details-suggestion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsDetailsSuggestionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarPostDetailsSuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarPostDetailsSuggestionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarPostDetailsSuggestionResponse)));
        }

        /// <summary>
        /// Get details suggestion for a given event. Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>ModelsSuggestion</returns>
        public ModelsSuggestion IntegrationsCalendarEventsEventIdDetailsSuggestionGet (int? eventId)
        {
             ApiResponse<ModelsSuggestion> localVarResponse = IntegrationsCalendarEventsEventIdDetailsSuggestionGetWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details suggestion for a given event. Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>ApiResponse of ModelsSuggestion</returns>
        public ApiResponse< ModelsSuggestion > IntegrationsCalendarEventsEventIdDetailsSuggestionGetWithHttpInfo (int? eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarApi->IntegrationsCalendarEventsEventIdDetailsSuggestionGet");

            var localVarPath = "/integrations/calendar/events/{event_id}/details-suggestion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("event_id", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsEventIdDetailsSuggestionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSuggestion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSuggestion)));
        }

        /// <summary>
        /// Get details suggestion for a given event. Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>Task of ModelsSuggestion</returns>
        public async System.Threading.Tasks.Task<ModelsSuggestion> IntegrationsCalendarEventsEventIdDetailsSuggestionGetAsync (int? eventId)
        {
             ApiResponse<ModelsSuggestion> localVarResponse = await IntegrationsCalendarEventsEventIdDetailsSuggestionGetAsyncWithHttpInfo(eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details suggestion for a given event. Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \&quot;null\&quot; string in case no suggestion was found.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Calendar event ID which we want to get a possible project to match</param>
        /// <returns>Task of ApiResponse (ModelsSuggestion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSuggestion>> IntegrationsCalendarEventsEventIdDetailsSuggestionGetAsyncWithHttpInfo (int? eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarApi->IntegrationsCalendarEventsEventIdDetailsSuggestionGet");

            var localVarPath = "/integrations/calendar/events/{event_id}/details-suggestion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("event_id", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsEventIdDetailsSuggestionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSuggestion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSuggestion)));
        }

        /// <summary>
        /// Get all events for the caller user. Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>HandlercalendarEventsResponse</returns>
        public HandlercalendarEventsResponse IntegrationsCalendarEventsGet (string startDate, string endDate, string limit = null, string pageToken = null)
        {
             ApiResponse<HandlercalendarEventsResponse> localVarResponse = IntegrationsCalendarEventsGetWithHttpInfo(startDate, endDate, limit, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all events for the caller user. Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>ApiResponse of HandlercalendarEventsResponse</returns>
        public ApiResponse< HandlercalendarEventsResponse > IntegrationsCalendarEventsGetWithHttpInfo (string startDate, string endDate, string limit = null, string pageToken = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling CalendarApi->IntegrationsCalendarEventsGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling CalendarApi->IntegrationsCalendarEventsGet");

            var localVarPath = "/integrations/calendar/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarEventsResponse)));
        }

        /// <summary>
        /// Get all events for the caller user. Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of HandlercalendarEventsResponse</returns>
        public async System.Threading.Tasks.Task<HandlercalendarEventsResponse> IntegrationsCalendarEventsGetAsync (string startDate, string endDate, string limit = null, string pageToken = null)
        {
             ApiResponse<HandlercalendarEventsResponse> localVarResponse = await IntegrationsCalendarEventsGetAsyncWithHttpInfo(startDate, endDate, limit, pageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all events for the caller user. Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarEventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlercalendarEventsResponse>> IntegrationsCalendarEventsGetAsyncWithHttpInfo (string startDate, string endDate, string limit = null, string pageToken = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling CalendarApi->IntegrationsCalendarEventsGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling CalendarApi->IntegrationsCalendarEventsGet");

            var localVarPath = "/integrations/calendar/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarEventsResponse)));
        }

        /// <summary>
        /// Update all events from selected calendars for a user. Fetch all events from a user&#39;s selected calendars and save in database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HandlercalendarResponse</returns>
        public HandlercalendarResponse IntegrationsCalendarEventsUpdatePost ()
        {
             ApiResponse<HandlercalendarResponse> localVarResponse = IntegrationsCalendarEventsUpdatePostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update all events from selected calendars for a user. Fetch all events from a user&#39;s selected calendars and save in database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HandlercalendarResponse</returns>
        public ApiResponse< HandlercalendarResponse > IntegrationsCalendarEventsUpdatePostWithHttpInfo ()
        {

            var localVarPath = "/integrations/calendar/events/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarResponse)));
        }

        /// <summary>
        /// Update all events from selected calendars for a user. Fetch all events from a user&#39;s selected calendars and save in database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HandlercalendarResponse</returns>
        public async System.Threading.Tasks.Task<HandlercalendarResponse> IntegrationsCalendarEventsUpdatePostAsync ()
        {
             ApiResponse<HandlercalendarResponse> localVarResponse = await IntegrationsCalendarEventsUpdatePostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update all events from selected calendars for a user. Fetch all events from a user&#39;s selected calendars and save in database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HandlercalendarResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlercalendarResponse>> IntegrationsCalendarEventsUpdatePostAsyncWithHttpInfo ()
        {

            var localVarPath = "/integrations/calendar/events/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarEventsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarResponse)));
        }

        /// <summary>
        /// Get all integrations a user has. Get all integrations a user has. Each user may have at most one integration per provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsIntegration&gt;</returns>
        public List<ModelsIntegration> IntegrationsCalendarGet ()
        {
             ApiResponse<List<ModelsIntegration>> localVarResponse = IntegrationsCalendarGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all integrations a user has. Get all integrations a user has. Each user may have at most one integration per provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsIntegration&gt;</returns>
        public ApiResponse< List<ModelsIntegration> > IntegrationsCalendarGetWithHttpInfo ()
        {

            var localVarPath = "/integrations/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsIntegration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsIntegration>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsIntegration>)));
        }

        /// <summary>
        /// Get all integrations a user has. Get all integrations a user has. Each user may have at most one integration per provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsIntegration&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsIntegration>> IntegrationsCalendarGetAsync ()
        {
             ApiResponse<List<ModelsIntegration>> localVarResponse = await IntegrationsCalendarGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all integrations a user has. Get all integrations a user has. Each user may have at most one integration per provider.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsIntegration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsIntegration>>> IntegrationsCalendarGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/integrations/calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsIntegration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsIntegration>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsIntegration>)));
        }

        /// <summary>
        /// Sets whether a calendar is or not selected by the user. This endpoint is used to set updatable fields of a calendar like selected field.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>List&lt;ModelsCalendar&gt;</returns>
        public List<ModelsCalendar> IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null)
        {
             ApiResponse<List<ModelsCalendar>> localVarResponse = IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchWithHttpInfo(integrationId, calendarId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets whether a calendar is or not selected by the user. This endpoint is used to set updatable fields of a calendar like selected field.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsCalendar&gt;</returns>
        public ApiResponse< List<ModelsCalendar> > IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchWithHttpInfo (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch");
            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
                throw new ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars/{calendar_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (calendarId != null) localVarPathParams.Add("calendar_id", this.Configuration.ApiClient.ParameterToString(calendarId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsCalendar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsCalendar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsCalendar>)));
        }

        /// <summary>
        /// Sets whether a calendar is or not selected by the user. This endpoint is used to set updatable fields of a calendar like selected field.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>Task of List&lt;ModelsCalendar&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsCalendar>> IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchAsync (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null)
        {
             ApiResponse<List<ModelsCalendar>> localVarResponse = await IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchAsyncWithHttpInfo(integrationId, calendarId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets whether a calendar is or not selected by the user. This endpoint is used to set updatable fields of a calendar like selected field.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="calendarId">Calendar ID as saved in the database</param>
        /// <param name="payload">Calendar fields to be updated (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsCalendar&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsCalendar>>> IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchAsyncWithHttpInfo (int? integrationId, int? calendarId, HandlercalendarPatchCalendar payload = null)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch");
            // verify the required parameter 'calendarId' is set
            if (calendarId == null)
                throw new ApiException(400, "Missing required parameter 'calendarId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars/{calendar_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (calendarId != null) localVarPathParams.Add("calendar_id", this.Configuration.ApiClient.ParameterToString(calendarId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsCalendar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsCalendar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsCalendar>)));
        }

        /// <summary>
        /// Get all calendars for a given integration. Get all calendars for a given integration that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>HandlercalendarCalendarsResponse</returns>
        public HandlercalendarCalendarsResponse IntegrationsCalendarIntegrationIdCalendarsGet (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null)
        {
             ApiResponse<HandlercalendarCalendarsResponse> localVarResponse = IntegrationsCalendarIntegrationIdCalendarsGetWithHttpInfo(integrationId, limit, selected, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all calendars for a given integration. Get all calendars for a given integration that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>ApiResponse of HandlercalendarCalendarsResponse</returns>
        public ApiResponse< HandlercalendarCalendarsResponse > IntegrationsCalendarIntegrationIdCalendarsGetWithHttpInfo (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsGet");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (selected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "selected", selected)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarCalendarsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarCalendarsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarCalendarsResponse)));
        }

        /// <summary>
        /// Get all calendars for a given integration. Get all calendars for a given integration that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of HandlercalendarCalendarsResponse</returns>
        public async System.Threading.Tasks.Task<HandlercalendarCalendarsResponse> IntegrationsCalendarIntegrationIdCalendarsGetAsync (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null)
        {
             ApiResponse<HandlercalendarCalendarsResponse> localVarResponse = await IntegrationsCalendarIntegrationIdCalendarsGetAsyncWithHttpInfo(integrationId, limit, selected, pageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all calendars for a given integration. Get all calendars for a given integration that was previously saved in the database.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="selected">if we should get the selected or not calendars, or all calendars, in case of omission (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarCalendarsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlercalendarCalendarsResponse>> IntegrationsCalendarIntegrationIdCalendarsGetAsyncWithHttpInfo (int? integrationId, int? limit = null, bool? selected = null, string pageToken = null)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsGet");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (selected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "selected", selected)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarCalendarsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarCalendarsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarCalendarsResponse)));
        }

        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration. Get all events for a given calendar in a given integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>HandlercalendarEventsResponse</returns>
        public HandlercalendarEventsResponse IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null)
        {
             ApiResponse<HandlercalendarEventsResponse> localVarResponse = IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetWithHttpInfo(integrationId, idCalendar, startDate, endDate, limit, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration. Get all events for a given calendar in a given integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>ApiResponse of HandlercalendarEventsResponse</returns>
        public ApiResponse< HandlercalendarEventsResponse > IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetWithHttpInfo (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");
            // verify the required parameter 'idCalendar' is set
            if (idCalendar == null)
                throw new ApiException(400, "Missing required parameter 'idCalendar' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars/{id_calendar}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (idCalendar != null) localVarPathParams.Add("id_calendar", this.Configuration.ApiClient.ParameterToString(idCalendar)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarEventsResponse)));
        }

        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration. Get all events for a given calendar in a given integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of HandlercalendarEventsResponse</returns>
        public async System.Threading.Tasks.Task<HandlercalendarEventsResponse> IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetAsync (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null)
        {
             ApiResponse<HandlercalendarEventsResponse> localVarResponse = await IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetAsyncWithHttpInfo(integrationId, idCalendar, startDate, endDate, limit, pageToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// (DEPRECATED) Get all events for a given calendar in a given integration. Get all events for a given calendar in a given integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <param name="idCalendar">Calendar ID as returned by the provider, it may be an e-mail address, for instance</param>
        /// <param name="startDate">Smallest boundary date to search for calendar events</param>
        /// <param name="endDate">Biggest boundary date to search for calendar events</param>
        /// <param name="limit">Max results per page (optional)</param>
        /// <param name="pageToken">Token for next page. Used in pagination when the number of results exceed &#39;limit&#39; (optional)</param>
        /// <returns>Task of ApiResponse (HandlercalendarEventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlercalendarEventsResponse>> IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetAsyncWithHttpInfo (int? integrationId, string idCalendar, string startDate, string endDate, string limit = null, string pageToken = null)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");
            // verify the required parameter 'idCalendar' is set
            if (idCalendar == null)
                throw new ApiException(400, "Missing required parameter 'idCalendar' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars/{id_calendar}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter
            if (idCalendar != null) localVarPathParams.Add("id_calendar", this.Configuration.ApiClient.ParameterToString(idCalendar)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_token", pageToken)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarEventsResponse)));
        }

        /// <summary>
        /// Updates calendar data according to provider API. This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>HandlercalendarFetchedCalendarsResponse</returns>
        public HandlercalendarFetchedCalendarsResponse IntegrationsCalendarIntegrationIdCalendarsUpdatePost (int? integrationId)
        {
             ApiResponse<HandlercalendarFetchedCalendarsResponse> localVarResponse = IntegrationsCalendarIntegrationIdCalendarsUpdatePostWithHttpInfo(integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates calendar data according to provider API. This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>ApiResponse of HandlercalendarFetchedCalendarsResponse</returns>
        public ApiResponse< HandlercalendarFetchedCalendarsResponse > IntegrationsCalendarIntegrationIdCalendarsUpdatePostWithHttpInfo (int? integrationId)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsUpdatePost");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarFetchedCalendarsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarFetchedCalendarsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarFetchedCalendarsResponse)));
        }

        /// <summary>
        /// Updates calendar data according to provider API. This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of HandlercalendarFetchedCalendarsResponse</returns>
        public async System.Threading.Tasks.Task<HandlercalendarFetchedCalendarsResponse> IntegrationsCalendarIntegrationIdCalendarsUpdatePostAsync (int? integrationId)
        {
             ApiResponse<HandlercalendarFetchedCalendarsResponse> localVarResponse = await IntegrationsCalendarIntegrationIdCalendarsUpdatePostAsyncWithHttpInfo(integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates calendar data according to provider API. This endpoint uses the passed integration to get a provider and update all the calendars from that
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of ApiResponse (HandlercalendarFetchedCalendarsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlercalendarFetchedCalendarsResponse>> IntegrationsCalendarIntegrationIdCalendarsUpdatePostAsyncWithHttpInfo (int? integrationId)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdCalendarsUpdatePost");

            var localVarPath = "/integrations/calendar/{integration_id}/calendars/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdCalendarsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlercalendarFetchedCalendarsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlercalendarFetchedCalendarsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlercalendarFetchedCalendarsResponse)));
        }

        /// <summary>
        /// Delete a given integration. Executes logic deletion of an integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>string</returns>
        public string IntegrationsCalendarIntegrationIdDelete (int? integrationId)
        {
             ApiResponse<string> localVarResponse = IntegrationsCalendarIntegrationIdDeleteWithHttpInfo(integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a given integration. Executes logic deletion of an integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IntegrationsCalendarIntegrationIdDeleteWithHttpInfo (int? integrationId)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdDelete");

            var localVarPath = "/integrations/calendar/{integration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a given integration. Executes logic deletion of an integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IntegrationsCalendarIntegrationIdDeleteAsync (int? integrationId)
        {
             ApiResponse<string> localVarResponse = await IntegrationsCalendarIntegrationIdDeleteAsyncWithHttpInfo(integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a given integration. Executes logic deletion of an integration.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationId">Integration ID as saved in the database</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IntegrationsCalendarIntegrationIdDeleteAsyncWithHttpInfo (int? integrationId)
        {
            // verify the required parameter 'integrationId' is set
            if (integrationId == null)
                throw new ApiException(400, "Missing required parameter 'integrationId' when calling CalendarApi->IntegrationsCalendarIntegrationIdDelete");

            var localVarPath = "/integrations/calendar/{integration_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationId != null) localVarPathParams.Add("integration_id", this.Configuration.ApiClient.ParameterToString(integrationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarIntegrationIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get URL for setting up a calendar integration with given provider. Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns></returns>
        public void IntegrationsCalendarSetupGet (string provider, string returnTo = null)
        {
             IntegrationsCalendarSetupGetWithHttpInfo(provider, returnTo);
        }

        /// <summary>
        /// Get URL for setting up a calendar integration with given provider. Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IntegrationsCalendarSetupGetWithHttpInfo (string provider, string returnTo = null)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling CalendarApi->IntegrationsCalendarSetupGet");

            var localVarPath = "/integrations/calendar/setup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (provider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "provider", provider)); // query parameter
            if (returnTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_to", returnTo)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarSetupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get URL for setting up a calendar integration with given provider. Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IntegrationsCalendarSetupGetAsync (string provider, string returnTo = null)
        {
             await IntegrationsCalendarSetupGetAsyncWithHttpInfo(provider, returnTo);

        }

        /// <summary>
        /// Get URL for setting up a calendar integration with given provider. Set up an integration with a given provider, returning a URL to the said provider in order to
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Calendar service provider which the calendars will be retrieved</param>
        /// <param name="returnTo">Page to which the user will be redirected after authenticating (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IntegrationsCalendarSetupGetAsyncWithHttpInfo (string provider, string returnTo = null)
        {
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling CalendarApi->IntegrationsCalendarSetupGet");

            var localVarPath = "/integrations/calendar/setup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (provider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "provider", provider)); // query parameter
            if (returnTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_to", returnTo)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntegrationsCalendarSetupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
