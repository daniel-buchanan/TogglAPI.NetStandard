/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get stats for a goal
        /// </summary>
        /// <remarks>
        /// Gets stats for a given goal that must belong to the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ModelsGoalStats</returns>
        ModelsGoalStats GoalsGoalIdStatsGet (int? goalId);

        /// <summary>
        /// Get stats for a goal
        /// </summary>
        /// <remarks>
        /// Gets stats for a given goal that must belong to the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ApiResponse of ModelsGoalStats</returns>
        ApiResponse<ModelsGoalStats> GoalsGoalIdStatsGetWithHttpInfo (int? goalId);
        /// <summary>
        /// Get a insight
        /// </summary>
        /// <remarks>
        /// Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>GoalsInsightResponse</returns>
        GoalsInsightResponse GoalsInsightPost (GoalsParamsInsight goal);

        /// <summary>
        /// Get a insight
        /// </summary>
        /// <remarks>
        /// Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>ApiResponse of GoalsInsightResponse</returns>
        ApiResponse<GoalsInsightResponse> GoalsInsightPostWithHttpInfo (GoalsParamsInsight goal);
        /// <summary>
        /// Get a list of user goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>List&lt;HandlergoalsAPIResponse&gt;</returns>
        List<HandlergoalsAPIResponse> MeGoalsGet (bool? active = null);

        /// <summary>
        /// Get a list of user goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>ApiResponse of List&lt;HandlergoalsAPIResponse&gt;</returns>
        ApiResponse<List<HandlergoalsAPIResponse>> MeGoalsGetWithHttpInfo (bool? active = null);
        /// <summary>
        /// Get a list of goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user in the workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>List&lt;HandlergoalsAPIResponse&gt;</returns>
        List<HandlergoalsAPIResponse> WorkspacesWorkspaceIdGoalsGet (bool? teamGoals = null, bool? active = null);

        /// <summary>
        /// Get a list of goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user in the workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>ApiResponse of List&lt;HandlergoalsAPIResponse&gt;</returns>
        ApiResponse<List<HandlergoalsAPIResponse>> WorkspacesWorkspaceIdGoalsGetWithHttpInfo (bool? teamGoals = null, bool? active = null);
        /// <summary>
        /// Delete one goal
        /// </summary>
        /// <remarks>
        /// Delete a goal that was created by the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns></returns>
        void WorkspacesWorkspaceIdGoalsGoalIdDelete (int? workspaceId, int? goalId);

        /// <summary>
        /// Delete one goal
        /// </summary>
        /// <remarks>
        /// Delete a goal that was created by the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspacesWorkspaceIdGoalsGoalIdDeleteWithHttpInfo (int? workspaceId, int? goalId);
        /// <summary>
        /// Get one goal
        /// </summary>
        /// <remarks>
        /// Gets a goal that relates to the calling user in the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>HandlergoalsAPIResponse</returns>
        HandlergoalsAPIResponse WorkspacesWorkspaceIdGoalsGoalIdGet (int? workspaceId, int? goalId);

        /// <summary>
        /// Get one goal
        /// </summary>
        /// <remarks>
        /// Gets a goal that relates to the calling user in the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ApiResponse of HandlergoalsAPIResponse</returns>
        ApiResponse<HandlergoalsAPIResponse> WorkspacesWorkspaceIdGoalsGoalIdGetWithHttpInfo (int? workspaceId, int? goalId);
        /// <summary>
        /// Update a Goal
        /// </summary>
        /// <remarks>
        /// Update a goal with the updatable parameters given by UpdatePayload
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ModelsGoal</returns>
        ModelsGoal WorkspacesWorkspaceIdGoalsGoalIdPut (HandlergoalsUpdatePayload goal);

        /// <summary>
        /// Update a Goal
        /// </summary>
        /// <remarks>
        /// Update a goal with the updatable parameters given by UpdatePayload
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ApiResponse of ModelsGoal</returns>
        ApiResponse<ModelsGoal> WorkspacesWorkspaceIdGoalsGoalIdPutWithHttpInfo (HandlergoalsUpdatePayload goal);
        /// <summary>
        /// Create a Goal
        /// </summary>
        /// <remarks>
        /// Create a Goal object with its parameters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ModelsGoal</returns>
        ModelsGoal WorkspacesWorkspaceIdGoalsPost (HandlergoalsCreatePayload goal);

        /// <summary>
        /// Create a Goal
        /// </summary>
        /// <remarks>
        /// Create a Goal object with its parameters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ApiResponse of ModelsGoal</returns>
        ApiResponse<ModelsGoal> WorkspacesWorkspaceIdGoalsPostWithHttpInfo (HandlergoalsCreatePayload goal);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get stats for a goal
        /// </summary>
        /// <remarks>
        /// Gets stats for a given goal that must belong to the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ModelsGoalStats</returns>
        System.Threading.Tasks.Task<ModelsGoalStats> GoalsGoalIdStatsGetAsync (int? goalId);

        /// <summary>
        /// Get stats for a goal
        /// </summary>
        /// <remarks>
        /// Gets stats for a given goal that must belong to the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ApiResponse (ModelsGoalStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsGoalStats>> GoalsGoalIdStatsGetAsyncWithHttpInfo (int? goalId);
        /// <summary>
        /// Get a insight
        /// </summary>
        /// <remarks>
        /// Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>Task of GoalsInsightResponse</returns>
        System.Threading.Tasks.Task<GoalsInsightResponse> GoalsInsightPostAsync (GoalsParamsInsight goal);

        /// <summary>
        /// Get a insight
        /// </summary>
        /// <remarks>
        /// Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>Task of ApiResponse (GoalsInsightResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalsInsightResponse>> GoalsInsightPostAsyncWithHttpInfo (GoalsParamsInsight goal);
        /// <summary>
        /// Get a list of user goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of List&lt;HandlergoalsAPIResponse&gt;</returns>
        System.Threading.Tasks.Task<List<HandlergoalsAPIResponse>> MeGoalsGetAsync (bool? active = null);

        /// <summary>
        /// Get a list of user goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HandlergoalsAPIResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HandlergoalsAPIResponse>>> MeGoalsGetAsyncWithHttpInfo (bool? active = null);
        /// <summary>
        /// Get a list of goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user in the workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of List&lt;HandlergoalsAPIResponse&gt;</returns>
        System.Threading.Tasks.Task<List<HandlergoalsAPIResponse>> WorkspacesWorkspaceIdGoalsGetAsync (bool? teamGoals = null, bool? active = null);

        /// <summary>
        /// Get a list of goals
        /// </summary>
        /// <remarks>
        /// Gets all goals for the requesting user in the workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HandlergoalsAPIResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HandlergoalsAPIResponse>>> WorkspacesWorkspaceIdGoalsGetAsyncWithHttpInfo (bool? teamGoals = null, bool? active = null);
        /// <summary>
        /// Delete one goal
        /// </summary>
        /// <remarks>
        /// Delete a goal that was created by the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspacesWorkspaceIdGoalsGoalIdDeleteAsync (int? workspaceId, int? goalId);

        /// <summary>
        /// Delete one goal
        /// </summary>
        /// <remarks>
        /// Delete a goal that was created by the calling user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspacesWorkspaceIdGoalsGoalIdDeleteAsyncWithHttpInfo (int? workspaceId, int? goalId);
        /// <summary>
        /// Get one goal
        /// </summary>
        /// <remarks>
        /// Gets a goal that relates to the calling user in the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of HandlergoalsAPIResponse</returns>
        System.Threading.Tasks.Task<HandlergoalsAPIResponse> WorkspacesWorkspaceIdGoalsGoalIdGetAsync (int? workspaceId, int? goalId);

        /// <summary>
        /// Get one goal
        /// </summary>
        /// <remarks>
        /// Gets a goal that relates to the calling user in the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ApiResponse (HandlergoalsAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HandlergoalsAPIResponse>> WorkspacesWorkspaceIdGoalsGoalIdGetAsyncWithHttpInfo (int? workspaceId, int? goalId);
        /// <summary>
        /// Update a Goal
        /// </summary>
        /// <remarks>
        /// Update a goal with the updatable parameters given by UpdatePayload
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ModelsGoal</returns>
        System.Threading.Tasks.Task<ModelsGoal> WorkspacesWorkspaceIdGoalsGoalIdPutAsync (HandlergoalsUpdatePayload goal);

        /// <summary>
        /// Update a Goal
        /// </summary>
        /// <remarks>
        /// Update a goal with the updatable parameters given by UpdatePayload
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ApiResponse (ModelsGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsGoal>> WorkspacesWorkspaceIdGoalsGoalIdPutAsyncWithHttpInfo (HandlergoalsUpdatePayload goal);
        /// <summary>
        /// Create a Goal
        /// </summary>
        /// <remarks>
        /// Create a Goal object with its parameters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ModelsGoal</returns>
        System.Threading.Tasks.Task<ModelsGoal> WorkspacesWorkspaceIdGoalsPostAsync (HandlergoalsCreatePayload goal);

        /// <summary>
        /// Create a Goal
        /// </summary>
        /// <remarks>
        /// Create a Goal object with its parameters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ApiResponse (ModelsGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsGoal>> WorkspacesWorkspaceIdGoalsPostAsyncWithHttpInfo (HandlergoalsCreatePayload goal);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GoalsApi : IGoalsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GoalsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get stats for a goal Gets stats for a given goal that must belong to the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ModelsGoalStats</returns>
        public ModelsGoalStats GoalsGoalIdStatsGet (int? goalId)
        {
             ApiResponse<ModelsGoalStats> localVarResponse = GoalsGoalIdStatsGetWithHttpInfo(goalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stats for a goal Gets stats for a given goal that must belong to the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ApiResponse of ModelsGoalStats</returns>
        public ApiResponse< ModelsGoalStats > GoalsGoalIdStatsGetWithHttpInfo (int? goalId)
        {
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalsApi->GoalsGoalIdStatsGet");

            var localVarPath = "/goals/{goal_id}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalsGoalIdStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGoalStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGoalStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGoalStats)));
        }

        /// <summary>
        /// Get stats for a goal Gets stats for a given goal that must belong to the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ModelsGoalStats</returns>
        public async System.Threading.Tasks.Task<ModelsGoalStats> GoalsGoalIdStatsGetAsync (int? goalId)
        {
             ApiResponse<ModelsGoalStats> localVarResponse = await GoalsGoalIdStatsGetAsyncWithHttpInfo(goalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stats for a goal Gets stats for a given goal that must belong to the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ApiResponse (ModelsGoalStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsGoalStats>> GoalsGoalIdStatsGetAsyncWithHttpInfo (int? goalId)
        {
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalsApi->GoalsGoalIdStatsGet");

            var localVarPath = "/goals/{goal_id}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalsGoalIdStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGoalStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGoalStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGoalStats)));
        }

        /// <summary>
        /// Get a insight Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>GoalsInsightResponse</returns>
        public GoalsInsightResponse GoalsInsightPost (GoalsParamsInsight goal)
        {
             ApiResponse<GoalsInsightResponse> localVarResponse = GoalsInsightPostWithHttpInfo(goal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a insight Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>ApiResponse of GoalsInsightResponse</returns>
        public ApiResponse< GoalsInsightResponse > GoalsInsightPostWithHttpInfo (GoalsParamsInsight goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->GoalsInsightPost");

            var localVarPath = "/goals/insight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalsInsightPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalsInsightResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalsInsightResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalsInsightResponse)));
        }

        /// <summary>
        /// Get a insight Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>Task of GoalsInsightResponse</returns>
        public async System.Threading.Tasks.Task<GoalsInsightResponse> GoalsInsightPostAsync (GoalsParamsInsight goal)
        {
             ApiResponse<GoalsInsightResponse> localVarResponse = await GoalsInsightPostAsyncWithHttpInfo(goal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a insight Get data insight for user simulating how much the user would accomplish for a given Goal
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Insight details</param>
        /// <returns>Task of ApiResponse (GoalsInsightResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GoalsInsightResponse>> GoalsInsightPostAsyncWithHttpInfo (GoalsParamsInsight goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->GoalsInsightPost");

            var localVarPath = "/goals/insight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalsInsightPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalsInsightResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalsInsightResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalsInsightResponse)));
        }

        /// <summary>
        /// Get a list of user goals Gets all goals for the requesting user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>List&lt;HandlergoalsAPIResponse&gt;</returns>
        public List<HandlergoalsAPIResponse> MeGoalsGet (bool? active = null)
        {
             ApiResponse<List<HandlergoalsAPIResponse>> localVarResponse = MeGoalsGetWithHttpInfo(active);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of user goals Gets all goals for the requesting user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>ApiResponse of List&lt;HandlergoalsAPIResponse&gt;</returns>
        public ApiResponse< List<HandlergoalsAPIResponse> > MeGoalsGetWithHttpInfo (bool? active = null)
        {

            var localVarPath = "/me/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeGoalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HandlergoalsAPIResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HandlergoalsAPIResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HandlergoalsAPIResponse>)));
        }

        /// <summary>
        /// Get a list of user goals Gets all goals for the requesting user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of List&lt;HandlergoalsAPIResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<HandlergoalsAPIResponse>> MeGoalsGetAsync (bool? active = null)
        {
             ApiResponse<List<HandlergoalsAPIResponse>> localVarResponse = await MeGoalsGetAsyncWithHttpInfo(active);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of user goals Gets all goals for the requesting user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HandlergoalsAPIResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HandlergoalsAPIResponse>>> MeGoalsGetAsyncWithHttpInfo (bool? active = null)
        {

            var localVarPath = "/me/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeGoalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HandlergoalsAPIResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HandlergoalsAPIResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HandlergoalsAPIResponse>)));
        }

        /// <summary>
        /// Get a list of goals Gets all goals for the requesting user in the workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>List&lt;HandlergoalsAPIResponse&gt;</returns>
        public List<HandlergoalsAPIResponse> WorkspacesWorkspaceIdGoalsGet (bool? teamGoals = null, bool? active = null)
        {
             ApiResponse<List<HandlergoalsAPIResponse>> localVarResponse = WorkspacesWorkspaceIdGoalsGetWithHttpInfo(teamGoals, active);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of goals Gets all goals for the requesting user in the workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>ApiResponse of List&lt;HandlergoalsAPIResponse&gt;</returns>
        public ApiResponse< List<HandlergoalsAPIResponse> > WorkspacesWorkspaceIdGoalsGetWithHttpInfo (bool? teamGoals = null, bool? active = null)
        {

            var localVarPath = "/workspaces/{workspace_id}/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamGoals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team_goals", teamGoals)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HandlergoalsAPIResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HandlergoalsAPIResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HandlergoalsAPIResponse>)));
        }

        /// <summary>
        /// Get a list of goals Gets all goals for the requesting user in the workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of List&lt;HandlergoalsAPIResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<HandlergoalsAPIResponse>> WorkspacesWorkspaceIdGoalsGetAsync (bool? teamGoals = null, bool? active = null)
        {
             ApiResponse<List<HandlergoalsAPIResponse>> localVarResponse = await WorkspacesWorkspaceIdGoalsGetAsyncWithHttpInfo(teamGoals, active);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of goals Gets all goals for the requesting user in the workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGoals">team goals (optional)</param>
        /// <param name="active">archived goals (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HandlergoalsAPIResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HandlergoalsAPIResponse>>> WorkspacesWorkspaceIdGoalsGetAsyncWithHttpInfo (bool? teamGoals = null, bool? active = null)
        {

            var localVarPath = "/workspaces/{workspace_id}/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamGoals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team_goals", teamGoals)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HandlergoalsAPIResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HandlergoalsAPIResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HandlergoalsAPIResponse>)));
        }

        /// <summary>
        /// Delete one goal Delete a goal that was created by the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns></returns>
        public void WorkspacesWorkspaceIdGoalsGoalIdDelete (int? workspaceId, int? goalId)
        {
             WorkspacesWorkspaceIdGoalsGoalIdDeleteWithHttpInfo(workspaceId, goalId);
        }

        /// <summary>
        /// Delete one goal Delete a goal that was created by the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspacesWorkspaceIdGoalsGoalIdDeleteWithHttpInfo (int? workspaceId, int? goalId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdDelete");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdDelete");

            var localVarPath = "/workspaces/{workspace_id}/goals/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGoalIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete one goal Delete a goal that was created by the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspacesWorkspaceIdGoalsGoalIdDeleteAsync (int? workspaceId, int? goalId)
        {
             await WorkspacesWorkspaceIdGoalsGoalIdDeleteAsyncWithHttpInfo(workspaceId, goalId);

        }

        /// <summary>
        /// Delete one goal Delete a goal that was created by the calling user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspacesWorkspaceIdGoalsGoalIdDeleteAsyncWithHttpInfo (int? workspaceId, int? goalId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdDelete");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdDelete");

            var localVarPath = "/workspaces/{workspace_id}/goals/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGoalIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get one goal Gets a goal that relates to the calling user in the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>HandlergoalsAPIResponse</returns>
        public HandlergoalsAPIResponse WorkspacesWorkspaceIdGoalsGoalIdGet (int? workspaceId, int? goalId)
        {
             ApiResponse<HandlergoalsAPIResponse> localVarResponse = WorkspacesWorkspaceIdGoalsGoalIdGetWithHttpInfo(workspaceId, goalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get one goal Gets a goal that relates to the calling user in the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>ApiResponse of HandlergoalsAPIResponse</returns>
        public ApiResponse< HandlergoalsAPIResponse > WorkspacesWorkspaceIdGoalsGoalIdGetWithHttpInfo (int? workspaceId, int? goalId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdGet");

            var localVarPath = "/workspaces/{workspace_id}/goals/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGoalIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlergoalsAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlergoalsAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlergoalsAPIResponse)));
        }

        /// <summary>
        /// Get one goal Gets a goal that relates to the calling user in the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of HandlergoalsAPIResponse</returns>
        public async System.Threading.Tasks.Task<HandlergoalsAPIResponse> WorkspacesWorkspaceIdGoalsGoalIdGetAsync (int? workspaceId, int? goalId)
        {
             ApiResponse<HandlergoalsAPIResponse> localVarResponse = await WorkspacesWorkspaceIdGoalsGoalIdGetAsyncWithHttpInfo(workspaceId, goalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get one goal Gets a goal that relates to the calling user in the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="goalId">Goal ID</param>
        /// <returns>Task of ApiResponse (HandlergoalsAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HandlergoalsAPIResponse>> WorkspacesWorkspaceIdGoalsGoalIdGetAsyncWithHttpInfo (int? workspaceId, int? goalId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdGet");

            var localVarPath = "/workspaces/{workspace_id}/goals/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGoalIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HandlergoalsAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HandlergoalsAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HandlergoalsAPIResponse)));
        }

        /// <summary>
        /// Update a Goal Update a goal with the updatable parameters given by UpdatePayload
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ModelsGoal</returns>
        public ModelsGoal WorkspacesWorkspaceIdGoalsGoalIdPut (HandlergoalsUpdatePayload goal)
        {
             ApiResponse<ModelsGoal> localVarResponse = WorkspacesWorkspaceIdGoalsGoalIdPutWithHttpInfo(goal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Goal Update a goal with the updatable parameters given by UpdatePayload
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ApiResponse of ModelsGoal</returns>
        public ApiResponse< ModelsGoal > WorkspacesWorkspaceIdGoalsGoalIdPutWithHttpInfo (HandlergoalsUpdatePayload goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdPut");

            var localVarPath = "/workspaces/{workspace_id}/goals/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGoalIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGoal)));
        }

        /// <summary>
        /// Update a Goal Update a goal with the updatable parameters given by UpdatePayload
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ModelsGoal</returns>
        public async System.Threading.Tasks.Task<ModelsGoal> WorkspacesWorkspaceIdGoalsGoalIdPutAsync (HandlergoalsUpdatePayload goal)
        {
             ApiResponse<ModelsGoal> localVarResponse = await WorkspacesWorkspaceIdGoalsGoalIdPutAsyncWithHttpInfo(goal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Goal Update a goal with the updatable parameters given by UpdatePayload
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ApiResponse (ModelsGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsGoal>> WorkspacesWorkspaceIdGoalsGoalIdPutAsyncWithHttpInfo (HandlergoalsUpdatePayload goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->WorkspacesWorkspaceIdGoalsGoalIdPut");

            var localVarPath = "/workspaces/{workspace_id}/goals/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsGoalIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGoal)));
        }

        /// <summary>
        /// Create a Goal Create a Goal object with its parameters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ModelsGoal</returns>
        public ModelsGoal WorkspacesWorkspaceIdGoalsPost (HandlergoalsCreatePayload goal)
        {
             ApiResponse<ModelsGoal> localVarResponse = WorkspacesWorkspaceIdGoalsPostWithHttpInfo(goal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Goal Create a Goal object with its parameters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>ApiResponse of ModelsGoal</returns>
        public ApiResponse< ModelsGoal > WorkspacesWorkspaceIdGoalsPostWithHttpInfo (HandlergoalsCreatePayload goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->WorkspacesWorkspaceIdGoalsPost");

            var localVarPath = "/workspaces/{workspace_id}/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGoal)));
        }

        /// <summary>
        /// Create a Goal Create a Goal object with its parameters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ModelsGoal</returns>
        public async System.Threading.Tasks.Task<ModelsGoal> WorkspacesWorkspaceIdGoalsPostAsync (HandlergoalsCreatePayload goal)
        {
             ApiResponse<ModelsGoal> localVarResponse = await WorkspacesWorkspaceIdGoalsPostAsyncWithHttpInfo(goal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Goal Create a Goal object with its parameters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">Goal details</param>
        /// <returns>Task of ApiResponse (ModelsGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsGoal>> WorkspacesWorkspaceIdGoalsPostAsyncWithHttpInfo (HandlergoalsCreatePayload goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->WorkspacesWorkspaceIdGoalsPost");

            var localVarPath = "/workspaces/{workspace_id}/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdGoalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGoal)));
        }

    }
}
