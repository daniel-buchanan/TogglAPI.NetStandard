/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of objects to be downloaded
        /// </summary>
        /// <remarks>
        /// List of objects to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsDownloadRequestRecord&gt;</returns>
        List<ModelsDownloadRequestRecord> GetMeExport ();

        /// <summary>
        /// Get a list of objects to be downloaded
        /// </summary>
        /// <remarks>
        /// List of objects to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        ApiResponse<List<ModelsDownloadRequestRecord>> GetMeExportWithHttpInfo ();
        /// <summary>
        /// Get the zip file with download requests
        /// </summary>
        /// <remarks>
        /// Get a zip file List of download requests from an user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetMeExportDataUuidZip ();

        /// <summary>
        /// Get the zip file with download requests
        /// </summary>
        /// <remarks>
        /// Get a zip file List of download requests from an user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetMeExportDataUuidZipWithHttpInfo ();
        /// <summary>
        /// Get a list with the workspace download requests
        /// </summary>
        /// <remarks>
        /// List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsDownloadRequestRecord&gt;</returns>
        List<ModelsDownloadRequestRecord> GetWorkspaceExports (int? workspaceId);

        /// <summary>
        /// Get a list with the workspace download requests
        /// </summary>
        /// <remarks>
        /// List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        ApiResponse<List<ModelsDownloadRequestRecord>> GetWorkspaceExportsWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get the zip file with workspace download requests
        /// </summary>
        /// <remarks>
        /// Send a zip file List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>string</returns>
        string GetWorkspaceExportsDataUuidZip (int? workspaceId);

        /// <summary>
        /// Get the zip file with workspace download requests
        /// </summary>
        /// <remarks>
        /// Send a zip file List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWorkspaceExportsDataUuidZipWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Export employee profitability insights
        /// </summary>
        /// <remarks>
        /// Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>string</returns>
        string InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPost (RequestsEmployeeProfitability parameters);

        /// <summary>
        /// Export employee profitability insights
        /// </summary>
        /// <remarks>
        /// Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostWithHttpInfo (RequestsEmployeeProfitability parameters);
        /// <summary>
        /// Export profitability project insights
        /// </summary>
        /// <remarks>
        /// Downloads profitability project insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>string</returns>
        string InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost (RequestsProjectProfitability parameters, string extension);

        /// <summary>
        /// Export profitability project insights
        /// </summary>
        /// <remarks>
        /// Downloads profitability project insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostWithHttpInfo (RequestsProjectProfitability parameters, string extension);
        /// <summary>
        /// Export projects data trends
        /// </summary>
        /// <remarks>
        /// Downloads projects data trends in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>List&lt;ProjectsProjectTrends&gt;</returns>
        List<ProjectsProjectTrends> InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null);

        /// <summary>
        /// Export projects data trends
        /// </summary>
        /// <remarks>
        /// Downloads projects data trends in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectsProjectTrends&gt;</returns>
        ApiResponse<List<ProjectsProjectTrends>> InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostWithHttpInfo (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null);
        /// <summary>
        /// Post an object which data to be downloaded
        /// </summary>
        /// <remarks>
        /// An object which data to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>string</returns>
        string PostMeExport (ExportPayload dataExportObject);

        /// <summary>
        /// Post an object which data to be downloaded
        /// </summary>
        /// <remarks>
        /// An object which data to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostMeExportWithHttpInfo (ExportPayload dataExportObject);
        /// <summary>
        /// Post a list with the workspace to be downloaded
        /// </summary>
        /// <remarks>
        /// List of workspaces downloaded from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>string</returns>
        string PostWorkspaceExports (int? workspaceId, List<string> tokensList);

        /// <summary>
        /// Post a list with the workspace to be downloaded
        /// </summary>
        /// <remarks>
        /// List of workspaces downloaded from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostWorkspaceExportsWithHttpInfo (int? workspaceId, List<string> tokensList);
        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        string ReportsApiV3SharedReportTokenCsvPost (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3SharedReportTokenCsvPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>string</returns>
        string ReportsApiV3SharedReportTokenPdfPost (string reportToken, string startDate = null, string endDate = null, string displayMode = null);

        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3SharedReportTokenPdfPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null);
        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        string ReportsApiV3SharedReportTokenXlsxPost (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3SharedReportTokenXlsxPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost (int? workspaceId, string extension, SummaryExportPost summaryExportPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost (int? workspaceId, WeeklyExportPost weeklyExportPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost);
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of objects to be downloaded
        /// </summary>
        /// <remarks>
        /// List of objects to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsDownloadRequestRecord>> GetMeExportAsync ();

        /// <summary>
        /// Get a list of objects to be downloaded
        /// </summary>
        /// <remarks>
        /// List of objects to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsDownloadRequestRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsDownloadRequestRecord>>> GetMeExportAsyncWithHttpInfo ();
        /// <summary>
        /// Get the zip file with download requests
        /// </summary>
        /// <remarks>
        /// Get a zip file List of download requests from an user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetMeExportDataUuidZipAsync ();

        /// <summary>
        /// Get the zip file with download requests
        /// </summary>
        /// <remarks>
        /// Get a zip file List of download requests from an user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetMeExportDataUuidZipAsyncWithHttpInfo ();
        /// <summary>
        /// Get a list with the workspace download requests
        /// </summary>
        /// <remarks>
        /// List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsDownloadRequestRecord>> GetWorkspaceExportsAsync (int? workspaceId);

        /// <summary>
        /// Get a list with the workspace download requests
        /// </summary>
        /// <remarks>
        /// List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsDownloadRequestRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsDownloadRequestRecord>>> GetWorkspaceExportsAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get the zip file with workspace download requests
        /// </summary>
        /// <remarks>
        /// Send a zip file List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWorkspaceExportsDataUuidZipAsync (int? workspaceId);

        /// <summary>
        /// Get the zip file with workspace download requests
        /// </summary>
        /// <remarks>
        /// Send a zip file List of workspace download requests from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspaceExportsDataUuidZipAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Export employee profitability insights
        /// </summary>
        /// <remarks>
        /// Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostAsync (RequestsEmployeeProfitability parameters);

        /// <summary>
        /// Export employee profitability insights
        /// </summary>
        /// <remarks>
        /// Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostAsyncWithHttpInfo (RequestsEmployeeProfitability parameters);
        /// <summary>
        /// Export profitability project insights
        /// </summary>
        /// <remarks>
        /// Downloads profitability project insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostAsync (RequestsProjectProfitability parameters, string extension);

        /// <summary>
        /// Export profitability project insights
        /// </summary>
        /// <remarks>
        /// Downloads profitability project insights in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostAsyncWithHttpInfo (RequestsProjectProfitability parameters, string extension);
        /// <summary>
        /// Export projects data trends
        /// </summary>
        /// <remarks>
        /// Downloads projects data trends in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>Task of List&lt;ProjectsProjectTrends&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectsProjectTrends>> InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostAsync (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null);

        /// <summary>
        /// Export projects data trends
        /// </summary>
        /// <remarks>
        /// Downloads projects data trends in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectsProjectTrends&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectsProjectTrends>>> InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null);
        /// <summary>
        /// Post an object which data to be downloaded
        /// </summary>
        /// <remarks>
        /// An object which data to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostMeExportAsync (ExportPayload dataExportObject);

        /// <summary>
        /// Post an object which data to be downloaded
        /// </summary>
        /// <remarks>
        /// An object which data to be downloaded for an user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostMeExportAsyncWithHttpInfo (ExportPayload dataExportObject);
        /// <summary>
        /// Post a list with the workspace to be downloaded
        /// </summary>
        /// <remarks>
        /// List of workspaces downloaded from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostWorkspaceExportsAsync (int? workspaceId, List<string> tokensList);

        /// <summary>
        /// Post a list with the workspace to be downloaded
        /// </summary>
        /// <remarks>
        /// List of workspaces downloaded from a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspaceExportsAsyncWithHttpInfo (int? workspaceId, List<string> tokensList);
        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenCsvPostAsync (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export CSV for saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenCsvPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenPdfPostAsync (string reportToken, string startDate = null, string endDate = null, string displayMode = null);

        /// <summary>
        /// Export saved report in pdf format
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenPdfPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null);
        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenXlsxPostAsync (string reportToken, string startDate = null, string endDate = null);

        /// <summary>
        /// Export XSLX saved report
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenXlsxPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null);
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsync (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsync (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsync (int? workspaceId, string extension, SummaryExportPost summaryExportPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsync (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsync (int? workspaceId, WeeklyExportPost weeklyExportPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost);
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsync (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExportsApi : IExportsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExportsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExportsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of objects to be downloaded List of objects to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsDownloadRequestRecord&gt;</returns>
        public List<ModelsDownloadRequestRecord> GetMeExport ()
        {
             ApiResponse<List<ModelsDownloadRequestRecord>> localVarResponse = GetMeExportWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of objects to be downloaded List of objects to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        public ApiResponse< List<ModelsDownloadRequestRecord> > GetMeExportWithHttpInfo ()
        {

            var localVarPath = "/me/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsDownloadRequestRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsDownloadRequestRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsDownloadRequestRecord>)));
        }

        /// <summary>
        /// Get a list of objects to be downloaded List of objects to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsDownloadRequestRecord>> GetMeExportAsync ()
        {
             ApiResponse<List<ModelsDownloadRequestRecord>> localVarResponse = await GetMeExportAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of objects to be downloaded List of objects to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsDownloadRequestRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsDownloadRequestRecord>>> GetMeExportAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsDownloadRequestRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsDownloadRequestRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsDownloadRequestRecord>)));
        }

        /// <summary>
        /// Get the zip file with download requests Get a zip file List of download requests from an user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetMeExportDataUuidZip ()
        {
             ApiResponse<string> localVarResponse = GetMeExportDataUuidZipWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the zip file with download requests Get a zip file List of download requests from an user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetMeExportDataUuidZipWithHttpInfo ()
        {

            var localVarPath = "/me/export/data/{uuid}.zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeExportDataUuidZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the zip file with download requests Get a zip file List of download requests from an user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetMeExportDataUuidZipAsync ()
        {
             ApiResponse<string> localVarResponse = await GetMeExportDataUuidZipAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the zip file with download requests Get a zip file List of download requests from an user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetMeExportDataUuidZipAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/export/data/{uuid}.zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeExportDataUuidZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a list with the workspace download requests List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsDownloadRequestRecord&gt;</returns>
        public List<ModelsDownloadRequestRecord> GetWorkspaceExports (int? workspaceId)
        {
             ApiResponse<List<ModelsDownloadRequestRecord>> localVarResponse = GetWorkspaceExportsWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list with the workspace download requests List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        public ApiResponse< List<ModelsDownloadRequestRecord> > GetWorkspaceExportsWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->GetWorkspaceExports");

            var localVarPath = "/workspaces/{workspace_id}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsDownloadRequestRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsDownloadRequestRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsDownloadRequestRecord>)));
        }

        /// <summary>
        /// Get a list with the workspace download requests List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsDownloadRequestRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsDownloadRequestRecord>> GetWorkspaceExportsAsync (int? workspaceId)
        {
             ApiResponse<List<ModelsDownloadRequestRecord>> localVarResponse = await GetWorkspaceExportsAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list with the workspace download requests List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsDownloadRequestRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsDownloadRequestRecord>>> GetWorkspaceExportsAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->GetWorkspaceExports");

            var localVarPath = "/workspaces/{workspace_id}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsDownloadRequestRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsDownloadRequestRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsDownloadRequestRecord>)));
        }

        /// <summary>
        /// Get the zip file with workspace download requests Send a zip file List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>string</returns>
        public string GetWorkspaceExportsDataUuidZip (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = GetWorkspaceExportsDataUuidZipWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the zip file with workspace download requests Send a zip file List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWorkspaceExportsDataUuidZipWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->GetWorkspaceExportsDataUuidZip");

            var localVarPath = "/workspaces/{workspace_id}/exports/data/{uuid}.zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceExportsDataUuidZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the zip file with workspace download requests Send a zip file List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWorkspaceExportsDataUuidZipAsync (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = await GetWorkspaceExportsDataUuidZipAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the zip file with workspace download requests Send a zip file List of workspace download requests from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspaceExportsDataUuidZipAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->GetWorkspaceExportsDataUuidZip");

            var localVarPath = "/workspaces/{workspace_id}/exports/data/{uuid}.zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceExportsDataUuidZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export employee profitability insights Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>string</returns>
        public string InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPost (RequestsEmployeeProfitability parameters)
        {
             ApiResponse<string> localVarResponse = InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export employee profitability insights Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostWithHttpInfo (RequestsEmployeeProfitability parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPost");

            var localVarPath = "/insights/api/v1/workspace/{workspace_id}/profitability/employees.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export employee profitability insights Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostAsync (RequestsEmployeeProfitability parameters)
        {
             ApiResponse<string> localVarResponse = await InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export employee profitability insights Downloads employee profitability insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPostAsyncWithHttpInfo (RequestsEmployeeProfitability parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPost");

            var localVarPath = "/insights/api/v1/workspace/{workspace_id}/profitability/employees.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsightsApiV1WorkspaceWorkspaceIdProfitabilityEmployeesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export profitability project insights Downloads profitability project insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>string</returns>
        public string InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost (RequestsProjectProfitability parameters, string extension)
        {
             ApiResponse<string> localVarResponse = InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostWithHttpInfo(parameters, extension);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export profitability project insights Downloads profitability project insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostWithHttpInfo (RequestsProjectProfitability parameters, string extension)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost");

            var localVarPath = "/insights/api/v1/workspace/{workspace_id}/profitability/projects.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export profitability project insights Downloads profitability project insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostAsync (RequestsProjectProfitability parameters, string extension)
        {
             ApiResponse<string> localVarResponse = await InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostAsyncWithHttpInfo(parameters, extension);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export profitability project insights Downloads profitability project insights in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters">Parameters for report</param>
        /// <param name="extension">csv,xlsx</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPostAsyncWithHttpInfo (RequestsProjectProfitability parameters, string extension)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost");

            var localVarPath = "/insights/api/v1/workspace/{workspace_id}/profitability/projects.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsightsApiV1WorkspaceWorkspaceIdProfitabilityProjectsExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export projects data trends Downloads projects data trends in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>List&lt;ProjectsProjectTrends&gt;</returns>
        public List<ProjectsProjectTrends> InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null)
        {
             ApiResponse<List<ProjectsProjectTrends>> localVarResponse = InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostWithHttpInfo(workspaceId, extension, projectTrend);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export projects data trends Downloads projects data trends in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectsProjectTrends&gt;</returns>
        public ApiResponse< List<ProjectsProjectTrends> > InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostWithHttpInfo (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost");

            var localVarPath = "/insights/api/v1/workspace/{workspace_id}/trends/projects.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (projectTrend != null && projectTrend.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectTrend); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectTrend; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectsProjectTrends>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProjectsProjectTrends>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectsProjectTrends>)));
        }

        /// <summary>
        /// Export projects data trends Downloads projects data trends in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>Task of List&lt;ProjectsProjectTrends&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectsProjectTrends>> InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostAsync (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null)
        {
             ApiResponse<List<ProjectsProjectTrends>> localVarResponse = await InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostAsyncWithHttpInfo(workspaceId, extension, projectTrend);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export projects data trends Downloads projects data trends in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="projectTrend">Projects filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectsProjectTrends&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectsProjectTrends>>> InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, ProjectsProjectTrend projectTrend = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost");

            var localVarPath = "/insights/api/v1/workspace/{workspace_id}/trends/projects.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (projectTrend != null && projectTrend.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectTrend); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectTrend; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsightsApiV1WorkspaceWorkspaceIdTrendsProjectsExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectsProjectTrends>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProjectsProjectTrends>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectsProjectTrends>)));
        }

        /// <summary>
        /// Post an object which data to be downloaded An object which data to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>string</returns>
        public string PostMeExport (ExportPayload dataExportObject)
        {
             ApiResponse<string> localVarResponse = PostMeExportWithHttpInfo(dataExportObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post an object which data to be downloaded An object which data to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostMeExportWithHttpInfo (ExportPayload dataExportObject)
        {
            // verify the required parameter 'dataExportObject' is set
            if (dataExportObject == null)
                throw new ApiException(400, "Missing required parameter 'dataExportObject' when calling ExportsApi->PostMeExport");

            var localVarPath = "/me/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataExportObject != null && dataExportObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataExportObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataExportObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Post an object which data to be downloaded An object which data to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostMeExportAsync (ExportPayload dataExportObject)
        {
             ApiResponse<string> localVarResponse = await PostMeExportAsyncWithHttpInfo(dataExportObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post an object which data to be downloaded An object which data to be downloaded for an user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataExportObject">Objects to export</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostMeExportAsyncWithHttpInfo (ExportPayload dataExportObject)
        {
            // verify the required parameter 'dataExportObject' is set
            if (dataExportObject == null)
                throw new ApiException(400, "Missing required parameter 'dataExportObject' when calling ExportsApi->PostMeExport");

            var localVarPath = "/me/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataExportObject != null && dataExportObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataExportObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataExportObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Post a list with the workspace to be downloaded List of workspaces downloaded from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>string</returns>
        public string PostWorkspaceExports (int? workspaceId, List<string> tokensList)
        {
             ApiResponse<string> localVarResponse = PostWorkspaceExportsWithHttpInfo(workspaceId, tokensList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a list with the workspace to be downloaded List of workspaces downloaded from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostWorkspaceExportsWithHttpInfo (int? workspaceId, List<string> tokensList)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->PostWorkspaceExports");
            // verify the required parameter 'tokensList' is set
            if (tokensList == null)
                throw new ApiException(400, "Missing required parameter 'tokensList' when calling ExportsApi->PostWorkspaceExports");

            var localVarPath = "/workspaces/{workspace_id}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (tokensList != null && tokensList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokensList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokensList; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Post a list with the workspace to be downloaded List of workspaces downloaded from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostWorkspaceExportsAsync (int? workspaceId, List<string> tokensList)
        {
             ApiResponse<string> localVarResponse = await PostWorkspaceExportsAsyncWithHttpInfo(workspaceId, tokensList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a list with the workspace to be downloaded List of workspaces downloaded from a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="tokensList">Objects to export</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspaceExportsAsyncWithHttpInfo (int? workspaceId, List<string> tokensList)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->PostWorkspaceExports");
            // verify the required parameter 'tokensList' is set
            if (tokensList == null)
                throw new ApiException(400, "Missing required parameter 'tokensList' when calling ExportsApi->PostWorkspaceExports");

            var localVarPath = "/workspaces/{workspace_id}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (tokensList != null && tokensList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokensList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokensList; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        public string ReportsApiV3SharedReportTokenCsvPost (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3SharedReportTokenCsvPostWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3SharedReportTokenCsvPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling ExportsApi->ReportsApiV3SharedReportTokenCsvPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenCsvPostAsync (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3SharedReportTokenCsvPostAsyncWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export CSV for saved report &lt;p&gt;Downloads a previously saved report in csv.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenCsvPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling ExportsApi->ReportsApiV3SharedReportTokenCsvPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>string</returns>
        public string ReportsApiV3SharedReportTokenPdfPost (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3SharedReportTokenPdfPostWithHttpInfo(reportToken, startDate, endDate, displayMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3SharedReportTokenPdfPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling ExportsApi->ReportsApiV3SharedReportTokenPdfPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (displayMode != null && displayMode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(displayMode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = displayMode; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenPdfPostAsync (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3SharedReportTokenPdfPostAsyncWithHttpInfo(reportToken, startDate, endDate, displayMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export saved report in pdf format &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <param name="displayMode">Display mode for time data, only for detailed reports. Possible values: &#39;date_only&#39;, &#39;time_only&#39;, &#39;date_time&#39;. Default value: &#39;date_and_time&#39; (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenPdfPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null, string displayMode = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling ExportsApi->ReportsApiV3SharedReportTokenPdfPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (displayMode != null && displayMode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(displayMode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = displayMode; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>string</returns>
        public string ReportsApiV3SharedReportTokenXlsxPost (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3SharedReportTokenXlsxPostWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3SharedReportTokenXlsxPostWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling ExportsApi->ReportsApiV3SharedReportTokenXlsxPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.xlsx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenXlsxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3SharedReportTokenXlsxPostAsync (string reportToken, string startDate = null, string endDate = null)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3SharedReportTokenXlsxPostAsyncWithHttpInfo(reportToken, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export XSLX saved report &lt;p&gt;Downloads a previously saved report in xlsx.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A public report is accessible by anyone, a private one is only accessible by the report&#39;s owner or workspace admin. If the criteria aren&#39;t met it returns 403 status code.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The report can be executed without parameters, and in this case the saved or default parameters will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportToken">Token for the saved report</param>
        /// <param name="startDate">Starting date in the format YYYY-MM-DD (optional)</param>
        /// <param name="endDate">End date in the format YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3SharedReportTokenXlsxPostAsyncWithHttpInfo (string reportToken, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'reportToken' is set
            if (reportToken == null)
                throw new ApiException(400, "Missing required parameter 'reportToken' when calling ExportsApi->ReportsApiV3SharedReportTokenXlsxPost");

            var localVarPath = "/reports/api/v3/shared/{report_token}.xlsx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportToken != null) localVarPathParams.Add("report_token", this.Configuration.ApiClient.ParameterToString(reportToken)); // path parameter
            if (endDate != null && endDate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(endDate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = endDate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3SharedReportTokenXlsxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostWithHttpInfo(workspaceId, extension, detailedExportPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'detailedExportPost' is set
            if (detailedExportPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (detailedExportPost != null && detailedExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsync (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsyncWithHttpInfo(workspaceId, extension, detailedExportPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'detailedExportPost' is set
            if (detailedExportPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (detailedExportPost != null && detailedExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostWithHttpInfo(workspaceId, detailedExportPdfPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");
            // verify the required parameter 'detailedExportPdfPost' is set
            if (detailedExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPdfPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (detailedExportPdfPost != null && detailedExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsync (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsyncWithHttpInfo(workspaceId, detailedExportPdfPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");
            // verify the required parameter 'detailedExportPdfPost' is set
            if (detailedExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPdfPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (detailedExportPdfPost != null && detailedExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostWithHttpInfo(workspaceId, extension, summaryExportPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'summaryExportPost' is set
            if (summaryExportPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (summaryExportPost != null && summaryExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPost; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsync (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsyncWithHttpInfo(workspaceId, extension, summaryExportPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'summaryExportPost' is set
            if (summaryExportPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (summaryExportPost != null && summaryExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPost; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostWithHttpInfo(workspaceId, summaryExportPdfPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");
            // verify the required parameter 'summaryExportPdfPost' is set
            if (summaryExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPdfPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (summaryExportPdfPost != null && summaryExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsync (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsyncWithHttpInfo(workspaceId, summaryExportPdfPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");
            // verify the required parameter 'summaryExportPdfPost' is set
            if (summaryExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPdfPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (summaryExportPdfPost != null && summaryExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostWithHttpInfo(workspaceId, weeklyExportPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");
            // verify the required parameter 'weeklyExportPost' is set
            if (weeklyExportPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPost != null && weeklyExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsync (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsyncWithHttpInfo(workspaceId, weeklyExportPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");
            // verify the required parameter 'weeklyExportPost' is set
            if (weeklyExportPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPost != null && weeklyExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostWithHttpInfo(workspaceId, weeklyExportPdfPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");
            // verify the required parameter 'weeklyExportPdfPost' is set
            if (weeklyExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPdfPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPdfPost != null && weeklyExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsync (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsyncWithHttpInfo(workspaceId, weeklyExportPdfPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");
            // verify the required parameter 'weeklyExportPdfPost' is set
            if (weeklyExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPdfPost' when calling ExportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPdfPost != null && weeklyExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
