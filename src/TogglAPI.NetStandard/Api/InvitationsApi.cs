/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an invitation
        /// </summary>
        /// <remarks>
        /// Returns an invitation data by code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>ModelsSSOInvitation</returns>
        ModelsSSOInvitation GetInvitations (string invitationCode);

        /// <summary>
        /// Get an invitation
        /// </summary>
        /// <remarks>
        /// Returns an invitation data by code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>ApiResponse of ModelsSSOInvitation</returns>
        ApiResponse<ModelsSSOInvitation> GetInvitationsWithHttpInfo (string invitationCode);
        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>string</returns>
        string PostOrganizationAcceptInvitation (string inviutationCode);

        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostOrganizationAcceptInvitationWithHttpInfo (string inviutationCode);
        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>InvitationResult</returns>
        InvitationResult PostOrganizationInvitation (int? organizationId, InvitationPost postInvitationRequest);

        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>ApiResponse of InvitationResult</returns>
        ApiResponse<InvitationResult> PostOrganizationInvitationWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest);
        /// <summary>
        /// Rejects invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as deleted.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>string</returns>
        string PostRejectInvitation (string inviutationCode);

        /// <summary>
        /// Rejects invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as deleted.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostRejectInvitationWithHttpInfo (string inviutationCode);
        /// <summary>
        /// Resends user their invitation
        /// </summary>
        /// <remarks>
        /// Resend invitation email to user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>string</returns>
        string PutInvitation (int? organizationId, string invitationCode);

        /// <summary>
        /// Resends user their invitation
        /// </summary>
        /// <remarks>
        /// Resend invitation email to user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutInvitationWithHttpInfo (int? organizationId, string invitationCode);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get an invitation
        /// </summary>
        /// <remarks>
        /// Returns an invitation data by code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of ModelsSSOInvitation</returns>
        System.Threading.Tasks.Task<ModelsSSOInvitation> GetInvitationsAsync (string invitationCode);

        /// <summary>
        /// Get an invitation
        /// </summary>
        /// <remarks>
        /// Returns an invitation data by code.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (ModelsSSOInvitation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSSOInvitation>> GetInvitationsAsyncWithHttpInfo (string invitationCode);
        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostOrganizationAcceptInvitationAsync (string inviutationCode);

        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostOrganizationAcceptInvitationAsyncWithHttpInfo (string inviutationCode);
        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of InvitationResult</returns>
        System.Threading.Tasks.Task<InvitationResult> PostOrganizationInvitationAsync (int? organizationId, InvitationPost postInvitationRequest);

        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of ApiResponse (InvitationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationResult>> PostOrganizationInvitationAsyncWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest);
        /// <summary>
        /// Rejects invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as deleted.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostRejectInvitationAsync (string inviutationCode);

        /// <summary>
        /// Rejects invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as deleted.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostRejectInvitationAsyncWithHttpInfo (string inviutationCode);
        /// <summary>
        /// Resends user their invitation
        /// </summary>
        /// <remarks>
        /// Resend invitation email to user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutInvitationAsync (int? organizationId, string invitationCode);

        /// <summary>
        /// Resends user their invitation
        /// </summary>
        /// <remarks>
        /// Resend invitation email to user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutInvitationAsyncWithHttpInfo (int? organizationId, string invitationCode);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvitationsApi : IInvitationsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvitationsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get an invitation Returns an invitation data by code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>ModelsSSOInvitation</returns>
        public ModelsSSOInvitation GetInvitations (string invitationCode)
        {
             ApiResponse<ModelsSSOInvitation> localVarResponse = GetInvitationsWithHttpInfo(invitationCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an invitation Returns an invitation data by code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>ApiResponse of ModelsSSOInvitation</returns>
        public ApiResponse< ModelsSSOInvitation > GetInvitationsWithHttpInfo (string invitationCode)
        {
            // verify the required parameter 'invitationCode' is set
            if (invitationCode == null)
                throw new ApiException(400, "Missing required parameter 'invitationCode' when calling InvitationsApi->GetInvitations");

            var localVarPath = "/invitations/{invitation_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationCode != null) localVarPathParams.Add("invitation_code", this.Configuration.ApiClient.ParameterToString(invitationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSSOInvitation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSSOInvitation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSSOInvitation)));
        }

        /// <summary>
        /// Get an invitation Returns an invitation data by code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of ModelsSSOInvitation</returns>
        public async System.Threading.Tasks.Task<ModelsSSOInvitation> GetInvitationsAsync (string invitationCode)
        {
             ApiResponse<ModelsSSOInvitation> localVarResponse = await GetInvitationsAsyncWithHttpInfo(invitationCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an invitation Returns an invitation data by code.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (ModelsSSOInvitation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSSOInvitation>> GetInvitationsAsyncWithHttpInfo (string invitationCode)
        {
            // verify the required parameter 'invitationCode' is set
            if (invitationCode == null)
                throw new ApiException(400, "Missing required parameter 'invitationCode' when calling InvitationsApi->GetInvitations");

            var localVarPath = "/invitations/{invitation_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationCode != null) localVarPathParams.Add("invitation_code", this.Configuration.ApiClient.ParameterToString(invitationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSSOInvitation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSSOInvitation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSSOInvitation)));
        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>string</returns>
        public string PostOrganizationAcceptInvitation (string inviutationCode)
        {
             ApiResponse<string> localVarResponse = PostOrganizationAcceptInvitationWithHttpInfo(inviutationCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostOrganizationAcceptInvitationWithHttpInfo (string inviutationCode)
        {
            // verify the required parameter 'inviutationCode' is set
            if (inviutationCode == null)
                throw new ApiException(400, "Missing required parameter 'inviutationCode' when calling InvitationsApi->PostOrganizationAcceptInvitation");

            var localVarPath = "/organizations/invitations/{invitation_code}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviutationCode != null) localVarPathParams.Add("inviutation_code", this.Configuration.ApiClient.ParameterToString(inviutationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostOrganizationAcceptInvitationAsync (string inviutationCode)
        {
             ApiResponse<string> localVarResponse = await PostOrganizationAcceptInvitationAsyncWithHttpInfo(inviutationCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostOrganizationAcceptInvitationAsyncWithHttpInfo (string inviutationCode)
        {
            // verify the required parameter 'inviutationCode' is set
            if (inviutationCode == null)
                throw new ApiException(400, "Missing required parameter 'inviutationCode' when calling InvitationsApi->PostOrganizationAcceptInvitation");

            var localVarPath = "/organizations/invitations/{invitation_code}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviutationCode != null) localVarPathParams.Add("inviutation_code", this.Configuration.ApiClient.ParameterToString(inviutationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>InvitationResult</returns>
        public InvitationResult PostOrganizationInvitation (int? organizationId, InvitationPost postInvitationRequest)
        {
             ApiResponse<InvitationResult> localVarResponse = PostOrganizationInvitationWithHttpInfo(organizationId, postInvitationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>ApiResponse of InvitationResult</returns>
        public ApiResponse< InvitationResult > PostOrganizationInvitationWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationsApi->PostOrganizationInvitation");
            // verify the required parameter 'postInvitationRequest' is set
            if (postInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'postInvitationRequest' when calling InvitationsApi->PostOrganizationInvitation");

            var localVarPath = "/organizations/{organization_id}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postInvitationRequest != null && postInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInvitationRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationResult)));
        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of InvitationResult</returns>
        public async System.Threading.Tasks.Task<InvitationResult> PostOrganizationInvitationAsync (int? organizationId, InvitationPost postInvitationRequest)
        {
             ApiResponse<InvitationResult> localVarResponse = await PostOrganizationInvitationAsyncWithHttpInfo(organizationId, postInvitationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of ApiResponse (InvitationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationResult>> PostOrganizationInvitationAsyncWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationsApi->PostOrganizationInvitation");
            // verify the required parameter 'postInvitationRequest' is set
            if (postInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'postInvitationRequest' when calling InvitationsApi->PostOrganizationInvitation");

            var localVarPath = "/organizations/{organization_id}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postInvitationRequest != null && postInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInvitationRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationResult)));
        }

        /// <summary>
        /// Rejects invitation User connected with invitation is marked as deleted.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>string</returns>
        public string PostRejectInvitation (string inviutationCode)
        {
             ApiResponse<string> localVarResponse = PostRejectInvitationWithHttpInfo(inviutationCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rejects invitation User connected with invitation is marked as deleted.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostRejectInvitationWithHttpInfo (string inviutationCode)
        {
            // verify the required parameter 'inviutationCode' is set
            if (inviutationCode == null)
                throw new ApiException(400, "Missing required parameter 'inviutationCode' when calling InvitationsApi->PostRejectInvitation");

            var localVarPath = "/organizations/invitations/{invitation_code}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviutationCode != null) localVarPathParams.Add("inviutation_code", this.Configuration.ApiClient.ParameterToString(inviutationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRejectInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Rejects invitation User connected with invitation is marked as deleted.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostRejectInvitationAsync (string inviutationCode)
        {
             ApiResponse<string> localVarResponse = await PostRejectInvitationAsyncWithHttpInfo(inviutationCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rejects invitation User connected with invitation is marked as deleted.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostRejectInvitationAsyncWithHttpInfo (string inviutationCode)
        {
            // verify the required parameter 'inviutationCode' is set
            if (inviutationCode == null)
                throw new ApiException(400, "Missing required parameter 'inviutationCode' when calling InvitationsApi->PostRejectInvitation");

            var localVarPath = "/organizations/invitations/{invitation_code}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviutationCode != null) localVarPathParams.Add("inviutation_code", this.Configuration.ApiClient.ParameterToString(inviutationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRejectInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Resends user their invitation Resend invitation email to user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>string</returns>
        public string PutInvitation (int? organizationId, string invitationCode)
        {
             ApiResponse<string> localVarResponse = PutInvitationWithHttpInfo(organizationId, invitationCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resends user their invitation Resend invitation email to user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutInvitationWithHttpInfo (int? organizationId, string invitationCode)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationsApi->PutInvitation");
            // verify the required parameter 'invitationCode' is set
            if (invitationCode == null)
                throw new ApiException(400, "Missing required parameter 'invitationCode' when calling InvitationsApi->PutInvitation");

            var localVarPath = "/organizations/{organization_id}/invitations/{invitation_code}/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (invitationCode != null) localVarPathParams.Add("invitation_code", this.Configuration.ApiClient.ParameterToString(invitationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Resends user their invitation Resend invitation email to user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutInvitationAsync (int? organizationId, string invitationCode)
        {
             ApiResponse<string> localVarResponse = await PutInvitationAsyncWithHttpInfo(organizationId, invitationCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resends user their invitation Resend invitation email to user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="invitationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutInvitationAsyncWithHttpInfo (int? organizationId, string invitationCode)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationsApi->PutInvitation");
            // verify the required parameter 'invitationCode' is set
            if (invitationCode == null)
                throw new ApiException(400, "Missing required parameter 'invitationCode' when calling InvitationsApi->PutInvitation");

            var localVarPath = "/organizations/{organization_id}/invitations/{invitation_code}/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (invitationCode != null) localVarPathParams.Add("invitation_code", this.Configuration.ApiClient.ParameterToString(invitationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
