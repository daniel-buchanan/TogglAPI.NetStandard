/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDetailedReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);
        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost (int? workspaceId, DetailedPost searchPost);

        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostWithHttpInfo (int? workspaceId, DetailedPost searchPost);
        /// <summary>
        /// Load totals detailed report
        /// </summary>
        /// <remarks>
        /// Returns totals sums for detailed report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost (int? workspaceId, TotalsReportPost totalsPost);

        /// <summary>
        /// Load totals detailed report
        /// </summary>
        /// <remarks>
        /// Returns totals sums for detailed report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostWithHttpInfo (int? workspaceId, TotalsReportPost totalsPost);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsync (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost);
        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsync (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);

        /// <summary>
        /// Export detailed report
        /// </summary>
        /// <remarks>
        /// Downloads detailed report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost);
        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostAsync (int? workspaceId, DetailedPost searchPost);

        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostAsyncWithHttpInfo (int? workspaceId, DetailedPost searchPost);
        /// <summary>
        /// Load totals detailed report
        /// </summary>
        /// <remarks>
        /// Returns totals sums for detailed report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostAsync (int? workspaceId, TotalsReportPost totalsPost);

        /// <summary>
        /// Load totals detailed report
        /// </summary>
        /// <remarks>
        /// Returns totals sums for detailed report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostAsyncWithHttpInfo (int? workspaceId, TotalsReportPost totalsPost);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DetailedReportsApi : IDetailedReportsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DetailedReportsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DetailedReportsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostWithHttpInfo(workspaceId, extension, detailedExportPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'detailedExportPost' is set
            if (detailedExportPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (detailedExportPost != null && detailedExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsync (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsyncWithHttpInfo(workspaceId, extension, detailedExportPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export detailed report Downloads detailed report in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="detailedExportPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, DetailedSearchExportPost detailedExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");
            // verify the required parameter 'detailedExportPost' is set
            if (detailedExportPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (detailedExportPost != null && detailedExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostWithHttpInfo(workspaceId, detailedExportPdfPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");
            // verify the required parameter 'detailedExportPdfPost' is set
            if (detailedExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPdfPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (detailedExportPdfPost != null && detailedExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsync (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsyncWithHttpInfo(workspaceId, detailedExportPdfPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export detailed report Downloads detailed report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="detailedExportPdfPost">Detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, DetailedExportPDFPost detailedExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");
            // verify the required parameter 'detailedExportPdfPost' is set
            if (detailedExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'detailedExportPdfPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (detailedExportPdfPost != null && detailedExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detailedExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detailedExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search time entries Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost (int? workspaceId, DetailedPost searchPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostWithHttpInfo(workspaceId, searchPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search time entries Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostWithHttpInfo (int? workspaceId, DetailedPost searchPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost");
            // verify the required parameter 'searchPost' is set
            if (searchPost == null)
                throw new ApiException(400, "Missing required parameter 'searchPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (searchPost != null && searchPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search time entries Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostAsync (int? workspaceId, DetailedPost searchPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostAsyncWithHttpInfo(workspaceId, searchPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search time entries Returns time entries for detailed report according to the given filters. Supports pagination via X-Next-ID and X-Next-Row-Number headers returned in the response. See [Overview](https://developers.track.toggl.com/docs/reports_start#detailed-reports)
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="searchPost">Search report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPostAsyncWithHttpInfo (int? workspaceId, DetailedPost searchPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost");
            // verify the required parameter 'searchPost' is set
            if (searchPost == null)
                throw new ApiException(400, "Missing required parameter 'searchPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (searchPost != null && searchPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Load totals detailed report Returns totals sums for detailed report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost (int? workspaceId, TotalsReportPost totalsPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostWithHttpInfo(workspaceId, totalsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load totals detailed report Returns totals sums for detailed report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostWithHttpInfo (int? workspaceId, TotalsReportPost totalsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost");
            // verify the required parameter 'totalsPost' is set
            if (totalsPost == null)
                throw new ApiException(400, "Missing required parameter 'totalsPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries/totals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (totalsPost != null && totalsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(totalsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = totalsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Load totals detailed report Returns totals sums for detailed report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostAsync (int? workspaceId, TotalsReportPost totalsPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostAsyncWithHttpInfo(workspaceId, totalsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load totals detailed report Returns totals sums for detailed report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="totalsPost">Totals detailed report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPostAsyncWithHttpInfo (int? workspaceId, TotalsReportPost totalsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost");
            // verify the required parameter 'totalsPost' is set
            if (totalsPost == null)
                throw new ApiException(400, "Missing required parameter 'totalsPost' when calling DetailedReportsApi->ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/time_entries/totals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (totalsPost != null && totalsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(totalsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = totalsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchTimeEntriesTotalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
