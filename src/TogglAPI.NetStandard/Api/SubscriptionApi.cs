/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels an existing subscription.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>string</returns>
        string DeleteOrganizationSubscription (int? organizationId, string immediateCancel);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels an existing subscription.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteOrganizationSubscriptionWithHttpInfo (int? organizationId, string immediateCancel);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the subscription and saves feedback if present.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>string</returns>
        string DeleteWorkspaceSubscription (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the subscription and saves feedback if present.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteWorkspaceSubscriptionWithHttpInfo (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData);
        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Returns a list of available currencies.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsCurrency&gt;</returns>
        List<ModelsCurrency> GetCurrencies ();

        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Returns a list of available currencies.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsCurrency&gt;</returns>
        ApiResponse<List<ModelsCurrency>> GetCurrenciesWithHttpInfo ();
        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns a Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>string</returns>
        string GetOrganizationInvoice (int? organizationId, string invoiceUid);

        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns a Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetOrganizationInvoiceWithHttpInfo (int? organizationId, string invoiceUid);
        /// <summary>
        /// Invoice Summary
        /// </summary>
        /// <remarks>
        /// Returns a summary of the next invoice for an Organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>string</returns>
        string GetOrganizationInvoiceSummary (int? organizationId, int? quantity = null, string pricingPlanTag = null);

        /// <summary>
        /// Invoice Summary
        /// </summary>
        /// <remarks>
        /// Returns a summary of the next invoice for an Organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetOrganizationInvoiceSummaryWithHttpInfo (int? organizationId, int? quantity = null, string pricingPlanTag = null);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>SubscriptionOutData</returns>
        SubscriptionOutData GetOrganizationSubscription (int? organizationId);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ApiResponse of SubscriptionOutData</returns>
        ApiResponse<SubscriptionOutData> GetOrganizationSubscriptionWithHttpInfo (int? organizationId);
        /// <summary>
        /// Public Subscription Plans
        /// </summary>
        /// <remarks>
        /// Lists Public subscription plans.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BillingFancyPlan&gt;</returns>
        List<BillingFancyPlan> GetPublicSubscriptionPlans ();

        /// <summary>
        /// Public Subscription Plans
        /// </summary>
        /// <remarks>
        /// Lists Public subscription plans.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BillingFancyPlan&gt;</returns>
        ApiResponse<List<BillingFancyPlan>> GetPublicSubscriptionPlansWithHttpInfo ();
        /// <summary>
        /// Get workspace currencies
        /// </summary>
        /// <remarks>
        /// Get the currencies for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetWorkspaceCurrencies (int? workspaceId);

        /// <summary>
        /// Get workspace currencies
        /// </summary>
        /// <remarks>
        /// Get the currencies for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetWorkspaceCurrenciesWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ModelsCustomer</returns>
        ModelsCustomer GetWorkspaceCustomer (int? workspaceId);

        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of ModelsCustomer</returns>
        ApiResponse<ModelsCustomer> GetWorkspaceCustomerWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Returns list of the features available for a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>SubscriptionFeatureReturn</returns>
        SubscriptionFeatureReturn GetWorkspaceFeatures (int? workspaceId);

        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Returns list of the features available for a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of SubscriptionFeatureReturn</returns>
        ApiResponse<SubscriptionFeatureReturn> GetWorkspaceFeaturesWithHttpInfo (int? workspaceId);
        /// <summary>
        /// SelectedFeatures
        /// </summary>
        /// <remarks>
        /// Returns list of the features assigned to the workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>SubscriptionFeatureReturn</returns>
        SubscriptionFeatureReturn GetWorkspaceFeaturesSelected (int? workspaceId);

        /// <summary>
        /// SelectedFeatures
        /// </summary>
        /// <remarks>
        /// Returns list of the features assigned to the workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of SubscriptionFeatureReturn</returns>
        ApiResponse<SubscriptionFeatureReturn> GetWorkspaceFeaturesSelectedWithHttpInfo (int? workspaceId);
        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns an Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>string</returns>
        string GetWorkspaceInvoices (int? workspaceId, int? invoiceId);

        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns an Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWorkspaceInvoicesWithHttpInfo (int? workspaceId, int? invoiceId);
        /// <summary>
        /// PaymentReceipts
        /// </summary>
        /// <remarks>
        /// Returns payment receipt pdf file.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>string</returns>
        string GetWorkspacePaymentReceipts (int? workspaceId, int? paymentId);

        /// <summary>
        /// PaymentReceipts
        /// </summary>
        /// <remarks>
        /// Returns payment receipt pdf file.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWorkspacePaymentReceiptsWithHttpInfo (int? workspaceId, int? paymentId);
        /// <summary>
        /// PaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns payment records.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsPaymentRecord&gt;</returns>
        List<ModelsPaymentRecord> GetWorkspacePaymentRecords (int? workspaceId);

        /// <summary>
        /// PaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns payment records.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsPaymentRecord&gt;</returns>
        ApiResponse<List<ModelsPaymentRecord>> GetWorkspacePaymentRecordsWithHttpInfo (int? workspaceId);
        /// <summary>
        /// WorkspacePlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>string</returns>
        string GetWorkspacePlans (int? workspaceId);

        /// <summary>
        /// WorkspacePlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWorkspacePlansWithHttpInfo (int? workspaceId);
        /// <summary>
        /// WorkspacePlan
        /// </summary>
        /// <remarks>
        /// Returns plans fitered by plan ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>List&lt;BillingFancyPlan&gt;</returns>
        List<BillingFancyPlan> GetWorkspacePlansPricing (int? workspaceId, int? planId);

        /// <summary>
        /// WorkspacePlan
        /// </summary>
        /// <remarks>
        /// Returns plans fitered by plan ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>ApiResponse of List&lt;BillingFancyPlan&gt;</returns>
        ApiResponse<List<BillingFancyPlan>> GetWorkspacePlansPricingWithHttpInfo (int? workspaceId, int? planId);
        /// <summary>
        /// PurchaseOrderPdf
        /// </summary>
        /// <remarks>
        /// Returns a Purchase Order document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>string</returns>
        string GetWorkspacePurchaseOrderPdf (int? workspaceId, int? purchaseOrderId);

        /// <summary>
        /// PurchaseOrderPdf
        /// </summary>
        /// <remarks>
        /// Returns a Purchase Order document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWorkspacePurchaseOrderPdfWithHttpInfo (int? workspaceId, int? purchaseOrderId);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>SubscriptionOutData</returns>
        SubscriptionOutData GetWorkspaceSubscription (int? workspaceId);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of SubscriptionOutData</returns>
        ApiResponse<SubscriptionOutData> GetWorkspaceSubscriptionWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>string</returns>
        string PostOrganizationPlansPricingFeedback (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);

        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostOrganizationPlansPricingFeedbackWithHttpInfo (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);
        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>AccountingPurchaseOrderListItem</returns>
        AccountingPurchaseOrderListItem PostOrganizationPurchaseOrder (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest);

        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>ApiResponse of AccountingPurchaseOrderListItem</returns>
        ApiResponse<AccountingPurchaseOrderListItem> PostOrganizationPurchaseOrderWithHttpInfo (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns></returns>
        void PostOrganizationSubscription (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOrganizationSubscriptionWithHttpInfo (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns></returns>
        void PostOrganizationSubscription_0 (int? organizationId);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOrganizationSubscription_0WithHttpInfo (int? organizationId);
        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ModelsContactDetail</returns>
        ModelsContactDetail PostWorkspaceCustomer (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest);

        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ApiResponse of ModelsContactDetail</returns>
        ApiResponse<ModelsContactDetail> PostWorkspaceCustomerWithHttpInfo (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest);
        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>string</returns>
        string PostWorkspacePlansPricingFeedback (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);

        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostWorkspacePlansPricingFeedbackWithHttpInfo (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);
        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>AccountingPurchaseOrderListItem</returns>
        AccountingPurchaseOrderListItem PostWorkspacePurchaseOrder (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest);

        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>ApiResponse of AccountingPurchaseOrderListItem</returns>
        ApiResponse<AccountingPurchaseOrderListItem> PostWorkspacePurchaseOrderWithHttpInfo (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>ModelsSubscription</returns>
        ModelsSubscription PostWorkspaceSubscription (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>ApiResponse of ModelsSubscription</returns>
        ApiResponse<ModelsSubscription> PostWorkspaceSubscriptionWithHttpInfo (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest);
        /// <summary>
        /// SubscriptionCalculation
        /// </summary>
        /// <remarks>
        /// Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>SubscriptionCalculatedData</returns>
        SubscriptionCalculatedData PostWorkspaceSubscriptionCalculate (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest);

        /// <summary>
        /// SubscriptionCalculation
        /// </summary>
        /// <remarks>
        /// Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>ApiResponse of SubscriptionCalculatedData</returns>
        ApiResponse<SubscriptionCalculatedData> PostWorkspaceSubscriptionCalculateWithHttpInfo (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest);
        /// <summary>
        /// IncAccept
        /// </summary>
        /// <remarks>
        /// Records user acceptance of Terms of Service.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>string</returns>
        string PostWorkspaceSubscriptionIncAccept (int? workspaceId);

        /// <summary>
        /// IncAccept
        /// </summary>
        /// <remarks>
        /// Records user acceptance of Terms of Service.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostWorkspaceSubscriptionIncAcceptWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to update existing unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns></returns>
        void PutOrganizationSubscription (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to update existing unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutOrganizationSubscriptionWithHttpInfo (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest);
        /// <summary>
        /// Profile
        /// </summary>
        /// <remarks>
        /// Allows to change profile (subscription). This endpoint will be deprecated.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>string</returns>
        string PutWorkspaceProfile (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null);

        /// <summary>
        /// Profile
        /// </summary>
        /// <remarks>
        /// Allows to change profile (subscription). This endpoint will be deprecated.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutWorkspaceProfileWithHttpInfo (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels an existing subscription.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteOrganizationSubscriptionAsync (int? organizationId, string immediateCancel);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels an existing subscription.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId, string immediateCancel);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the subscription and saves feedback if present.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteWorkspaceSubscriptionAsync (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the subscription and saves feedback if present.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceSubscriptionAsyncWithHttpInfo (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData);
        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Returns a list of available currencies.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsCurrency&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsCurrency>> GetCurrenciesAsync ();

        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Returns a list of available currencies.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsCurrency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsCurrency>>> GetCurrenciesAsyncWithHttpInfo ();
        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns a Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetOrganizationInvoiceAsync (int? organizationId, string invoiceUid);

        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns a Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetOrganizationInvoiceAsyncWithHttpInfo (int? organizationId, string invoiceUid);
        /// <summary>
        /// Invoice Summary
        /// </summary>
        /// <remarks>
        /// Returns a summary of the next invoice for an Organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetOrganizationInvoiceSummaryAsync (int? organizationId, int? quantity = null, string pricingPlanTag = null);

        /// <summary>
        /// Invoice Summary
        /// </summary>
        /// <remarks>
        /// Returns a summary of the next invoice for an Organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetOrganizationInvoiceSummaryAsyncWithHttpInfo (int? organizationId, int? quantity = null, string pricingPlanTag = null);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of SubscriptionOutData</returns>
        System.Threading.Tasks.Task<SubscriptionOutData> GetOrganizationSubscriptionAsync (int? organizationId);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ApiResponse (SubscriptionOutData)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOutData>> GetOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Public Subscription Plans
        /// </summary>
        /// <remarks>
        /// Lists Public subscription plans.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BillingFancyPlan&gt;</returns>
        System.Threading.Tasks.Task<List<BillingFancyPlan>> GetPublicSubscriptionPlansAsync ();

        /// <summary>
        /// Public Subscription Plans
        /// </summary>
        /// <remarks>
        /// Lists Public subscription plans.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BillingFancyPlan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BillingFancyPlan>>> GetPublicSubscriptionPlansAsyncWithHttpInfo ();
        /// <summary>
        /// Get workspace currencies
        /// </summary>
        /// <remarks>
        /// Get the currencies for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetWorkspaceCurrenciesAsync (int? workspaceId);

        /// <summary>
        /// Get workspace currencies
        /// </summary>
        /// <remarks>
        /// Get the currencies for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetWorkspaceCurrenciesAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ModelsCustomer</returns>
        System.Threading.Tasks.Task<ModelsCustomer> GetWorkspaceCustomerAsync (int? workspaceId);

        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (ModelsCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsCustomer>> GetWorkspaceCustomerAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Returns list of the features available for a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of SubscriptionFeatureReturn</returns>
        System.Threading.Tasks.Task<SubscriptionFeatureReturn> GetWorkspaceFeaturesAsync (int? workspaceId);

        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Returns list of the features available for a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (SubscriptionFeatureReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionFeatureReturn>> GetWorkspaceFeaturesAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// SelectedFeatures
        /// </summary>
        /// <remarks>
        /// Returns list of the features assigned to the workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of SubscriptionFeatureReturn</returns>
        System.Threading.Tasks.Task<SubscriptionFeatureReturn> GetWorkspaceFeaturesSelectedAsync (int? workspaceId);

        /// <summary>
        /// SelectedFeatures
        /// </summary>
        /// <remarks>
        /// Returns list of the features assigned to the workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (SubscriptionFeatureReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionFeatureReturn>> GetWorkspaceFeaturesSelectedAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns an Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWorkspaceInvoicesAsync (int? workspaceId, int? invoiceId);

        /// <summary>
        /// InvoicePdf
        /// </summary>
        /// <remarks>
        /// Returns an Invoice document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspaceInvoicesAsyncWithHttpInfo (int? workspaceId, int? invoiceId);
        /// <summary>
        /// PaymentReceipts
        /// </summary>
        /// <remarks>
        /// Returns payment receipt pdf file.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWorkspacePaymentReceiptsAsync (int? workspaceId, int? paymentId);

        /// <summary>
        /// PaymentReceipts
        /// </summary>
        /// <remarks>
        /// Returns payment receipt pdf file.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspacePaymentReceiptsAsyncWithHttpInfo (int? workspaceId, int? paymentId);
        /// <summary>
        /// PaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns payment records.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsPaymentRecord&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsPaymentRecord>> GetWorkspacePaymentRecordsAsync (int? workspaceId);

        /// <summary>
        /// PaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns payment records.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsPaymentRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsPaymentRecord>>> GetWorkspacePaymentRecordsAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// WorkspacePlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWorkspacePlansAsync (int? workspaceId);

        /// <summary>
        /// WorkspacePlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspacePlansAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// WorkspacePlan
        /// </summary>
        /// <remarks>
        /// Returns plans fitered by plan ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>Task of List&lt;BillingFancyPlan&gt;</returns>
        System.Threading.Tasks.Task<List<BillingFancyPlan>> GetWorkspacePlansPricingAsync (int? workspaceId, int? planId);

        /// <summary>
        /// WorkspacePlan
        /// </summary>
        /// <remarks>
        /// Returns plans fitered by plan ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>Task of ApiResponse (List&lt;BillingFancyPlan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BillingFancyPlan>>> GetWorkspacePlansPricingAsyncWithHttpInfo (int? workspaceId, int? planId);
        /// <summary>
        /// PurchaseOrderPdf
        /// </summary>
        /// <remarks>
        /// Returns a Purchase Order document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWorkspacePurchaseOrderPdfAsync (int? workspaceId, int? purchaseOrderId);

        /// <summary>
        /// PurchaseOrderPdf
        /// </summary>
        /// <remarks>
        /// Returns a Purchase Order document in PDF form.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspacePurchaseOrderPdfAsyncWithHttpInfo (int? workspaceId, int? purchaseOrderId);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of SubscriptionOutData</returns>
        System.Threading.Tasks.Task<SubscriptionOutData> GetWorkspaceSubscriptionAsync (int? workspaceId);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Returns subscription data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (SubscriptionOutData)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOutData>> GetWorkspaceSubscriptionAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostOrganizationPlansPricingFeedbackAsync (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);

        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostOrganizationPlansPricingFeedbackAsyncWithHttpInfo (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);
        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of AccountingPurchaseOrderListItem</returns>
        System.Threading.Tasks.Task<AccountingPurchaseOrderListItem> PostOrganizationPurchaseOrderAsync (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest);

        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ApiResponse (AccountingPurchaseOrderListItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingPurchaseOrderListItem>> PostOrganizationPurchaseOrderAsyncWithHttpInfo (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostOrganizationSubscriptionAsync (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostOrganizationSubscription_0Async (int? organizationId);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostOrganizationSubscription_0AsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ModelsContactDetail</returns>
        System.Threading.Tasks.Task<ModelsContactDetail> PostWorkspaceCustomerAsync (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest);

        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ApiResponse (ModelsContactDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsContactDetail>> PostWorkspaceCustomerAsyncWithHttpInfo (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest);
        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostWorkspacePlansPricingFeedbackAsync (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);

        /// <summary>
        /// Feedback
        /// </summary>
        /// <remarks>
        /// Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspacePlansPricingFeedbackAsyncWithHttpInfo (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null);
        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of AccountingPurchaseOrderListItem</returns>
        System.Threading.Tasks.Task<AccountingPurchaseOrderListItem> PostWorkspacePurchaseOrderAsync (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest);

        /// <summary>
        /// PurchaseOrders
        /// </summary>
        /// <remarks>
        /// Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ApiResponse (AccountingPurchaseOrderListItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingPurchaseOrderListItem>> PostWorkspacePurchaseOrderAsyncWithHttpInfo (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ModelsSubscription</returns>
        System.Threading.Tasks.Task<ModelsSubscription> PostWorkspaceSubscriptionAsync (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ApiResponse (ModelsSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsSubscription>> PostWorkspaceSubscriptionAsyncWithHttpInfo (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest);
        /// <summary>
        /// SubscriptionCalculation
        /// </summary>
        /// <remarks>
        /// Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>Task of SubscriptionCalculatedData</returns>
        System.Threading.Tasks.Task<SubscriptionCalculatedData> PostWorkspaceSubscriptionCalculateAsync (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest);

        /// <summary>
        /// SubscriptionCalculation
        /// </summary>
        /// <remarks>
        /// Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>Task of ApiResponse (SubscriptionCalculatedData)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCalculatedData>> PostWorkspaceSubscriptionCalculateAsyncWithHttpInfo (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest);
        /// <summary>
        /// IncAccept
        /// </summary>
        /// <remarks>
        /// Records user acceptance of Terms of Service.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostWorkspaceSubscriptionIncAcceptAsync (int? workspaceId);

        /// <summary>
        /// IncAccept
        /// </summary>
        /// <remarks>
        /// Records user acceptance of Terms of Service.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspaceSubscriptionIncAcceptAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to update existing unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutOrganizationSubscriptionAsync (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest);

        /// <summary>
        /// Subscription
        /// </summary>
        /// <remarks>
        /// Allows to update existing unified subscription for an organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest);
        /// <summary>
        /// Profile
        /// </summary>
        /// <remarks>
        /// Allows to change profile (subscription). This endpoint will be deprecated.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutWorkspaceProfileAsync (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null);

        /// <summary>
        /// Profile
        /// </summary>
        /// <remarks>
        /// Allows to change profile (subscription). This endpoint will be deprecated.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceProfileAsyncWithHttpInfo (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionApi : ISubscriptionApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Subscription Cancels an existing subscription.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>string</returns>
        public string DeleteOrganizationSubscription (int? organizationId, string immediateCancel)
        {
             ApiResponse<string> localVarResponse = DeleteOrganizationSubscriptionWithHttpInfo(organizationId, immediateCancel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscription Cancels an existing subscription.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteOrganizationSubscriptionWithHttpInfo (int? organizationId, string immediateCancel)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->DeleteOrganizationSubscription");
            // verify the required parameter 'immediateCancel' is set
            if (immediateCancel == null)
                throw new ApiException(400, "Missing required parameter 'immediateCancel' when calling SubscriptionApi->DeleteOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (immediateCancel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "immediateCancel", immediateCancel)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Subscription Cancels an existing subscription.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteOrganizationSubscriptionAsync (int? organizationId, string immediateCancel)
        {
             ApiResponse<string> localVarResponse = await DeleteOrganizationSubscriptionAsyncWithHttpInfo(organizationId, immediateCancel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscription Cancels an existing subscription.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="immediateCancel">If true, the subscription is canceled immediately otherwise canceled at period end</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId, string immediateCancel)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->DeleteOrganizationSubscription");
            // verify the required parameter 'immediateCancel' is set
            if (immediateCancel == null)
                throw new ApiException(400, "Missing required parameter 'immediateCancel' when calling SubscriptionApi->DeleteOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (immediateCancel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "immediateCancel", immediateCancel)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Subscription Cancels the subscription and saves feedback if present.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>string</returns>
        public string DeleteWorkspaceSubscription (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData)
        {
             ApiResponse<string> localVarResponse = DeleteWorkspaceSubscriptionWithHttpInfo(workspaceId, subscriptionId, feedbackData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscription Cancels the subscription and saves feedback if present.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteWorkspaceSubscriptionWithHttpInfo (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->DeleteWorkspaceSubscription");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->DeleteWorkspaceSubscription");
            // verify the required parameter 'feedbackData' is set
            if (feedbackData == null)
                throw new ApiException(400, "Missing required parameter 'feedbackData' when calling SubscriptionApi->DeleteWorkspaceSubscription");

            var localVarPath = "/workspaces/{workspace_id}/subscription/{subscription_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription_id", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (feedbackData != null && feedbackData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feedbackData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feedbackData; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Subscription Cancels the subscription and saves feedback if present.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteWorkspaceSubscriptionAsync (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData)
        {
             ApiResponse<string> localVarResponse = await DeleteWorkspaceSubscriptionAsyncWithHttpInfo(workspaceId, subscriptionId, feedbackData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscription Cancels the subscription and saves feedback if present.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="subscriptionId">Numeric ID of the subscription.</param>
        /// <param name="feedbackData">Feedback data.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceSubscriptionAsyncWithHttpInfo (int? workspaceId, int? subscriptionId, ModelsPlanChangeFeedback feedbackData)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->DeleteWorkspaceSubscription");
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->DeleteWorkspaceSubscription");
            // verify the required parameter 'feedbackData' is set
            if (feedbackData == null)
                throw new ApiException(400, "Missing required parameter 'feedbackData' when calling SubscriptionApi->DeleteWorkspaceSubscription");

            var localVarPath = "/workspaces/{workspace_id}/subscription/{subscription_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (subscriptionId != null) localVarPathParams.Add("subscription_id", this.Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter
            if (feedbackData != null && feedbackData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feedbackData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feedbackData; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Currencies Returns a list of available currencies.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsCurrency&gt;</returns>
        public List<ModelsCurrency> GetCurrencies ()
        {
             ApiResponse<List<ModelsCurrency>> localVarResponse = GetCurrenciesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Currencies Returns a list of available currencies.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsCurrency&gt;</returns>
        public ApiResponse< List<ModelsCurrency> > GetCurrenciesWithHttpInfo ()
        {

            var localVarPath = "/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsCurrency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsCurrency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsCurrency>)));
        }

        /// <summary>
        /// Currencies Returns a list of available currencies.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsCurrency&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsCurrency>> GetCurrenciesAsync ()
        {
             ApiResponse<List<ModelsCurrency>> localVarResponse = await GetCurrenciesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Currencies Returns a list of available currencies.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsCurrency&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsCurrency>>> GetCurrenciesAsyncWithHttpInfo ()
        {

            var localVarPath = "/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsCurrency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsCurrency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsCurrency>)));
        }

        /// <summary>
        /// InvoicePdf Returns a Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>string</returns>
        public string GetOrganizationInvoice (int? organizationId, string invoiceUid)
        {
             ApiResponse<string> localVarResponse = GetOrganizationInvoiceWithHttpInfo(organizationId, invoiceUid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// InvoicePdf Returns a Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetOrganizationInvoiceWithHttpInfo (int? organizationId, string invoiceUid)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->GetOrganizationInvoice");
            // verify the required parameter 'invoiceUid' is set
            if (invoiceUid == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUid' when calling SubscriptionApi->GetOrganizationInvoice");

            var localVarPath = "/organizations/{organization_id}/invoices/{invoice_uid}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (invoiceUid != null) localVarPathParams.Add("invoice_uid", this.Configuration.ApiClient.ParameterToString(invoiceUid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// InvoicePdf Returns a Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetOrganizationInvoiceAsync (int? organizationId, string invoiceUid)
        {
             ApiResponse<string> localVarResponse = await GetOrganizationInvoiceAsyncWithHttpInfo(organizationId, invoiceUid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// InvoicePdf Returns a Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="invoiceUid">Numeric ID or string ID of the invoice.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetOrganizationInvoiceAsyncWithHttpInfo (int? organizationId, string invoiceUid)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->GetOrganizationInvoice");
            // verify the required parameter 'invoiceUid' is set
            if (invoiceUid == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUid' when calling SubscriptionApi->GetOrganizationInvoice");

            var localVarPath = "/organizations/{organization_id}/invoices/{invoice_uid}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (invoiceUid != null) localVarPathParams.Add("invoice_uid", this.Configuration.ApiClient.ParameterToString(invoiceUid)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Invoice Summary Returns a summary of the next invoice for an Organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>string</returns>
        public string GetOrganizationInvoiceSummary (int? organizationId, int? quantity = null, string pricingPlanTag = null)
        {
             ApiResponse<string> localVarResponse = GetOrganizationInvoiceSummaryWithHttpInfo(organizationId, quantity, pricingPlanTag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invoice Summary Returns a summary of the next invoice for an Organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetOrganizationInvoiceSummaryWithHttpInfo (int? organizationId, int? quantity = null, string pricingPlanTag = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->GetOrganizationInvoiceSummary");

            var localVarPath = "/organizations/{organization_id}/subscription/invoice_summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (quantity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quantity", quantity)); // query parameter
            if (pricingPlanTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pricing_plan_tag", pricingPlanTag)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationInvoiceSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Invoice Summary Returns a summary of the next invoice for an Organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetOrganizationInvoiceSummaryAsync (int? organizationId, int? quantity = null, string pricingPlanTag = null)
        {
             ApiResponse<string> localVarResponse = await GetOrganizationInvoiceSummaryAsyncWithHttpInfo(organizationId, quantity, pricingPlanTag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invoice Summary Returns a summary of the next invoice for an Organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="quantity">Quantity of the subscription (optional)</param>
        /// <param name="pricingPlanTag">Pricing plan tag (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetOrganizationInvoiceSummaryAsyncWithHttpInfo (int? organizationId, int? quantity = null, string pricingPlanTag = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->GetOrganizationInvoiceSummary");

            var localVarPath = "/organizations/{organization_id}/subscription/invoice_summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (quantity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quantity", quantity)); // query parameter
            if (pricingPlanTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pricing_plan_tag", pricingPlanTag)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationInvoiceSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>SubscriptionOutData</returns>
        public SubscriptionOutData GetOrganizationSubscription (int? organizationId)
        {
             ApiResponse<SubscriptionOutData> localVarResponse = GetOrganizationSubscriptionWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ApiResponse of SubscriptionOutData</returns>
        public ApiResponse< SubscriptionOutData > GetOrganizationSubscriptionWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->GetOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionOutData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionOutData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionOutData)));
        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of SubscriptionOutData</returns>
        public async System.Threading.Tasks.Task<SubscriptionOutData> GetOrganizationSubscriptionAsync (int? organizationId)
        {
             ApiResponse<SubscriptionOutData> localVarResponse = await GetOrganizationSubscriptionAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ApiResponse (SubscriptionOutData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionOutData>> GetOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->GetOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionOutData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionOutData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionOutData)));
        }

        /// <summary>
        /// Public Subscription Plans Lists Public subscription plans.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BillingFancyPlan&gt;</returns>
        public List<BillingFancyPlan> GetPublicSubscriptionPlans ()
        {
             ApiResponse<List<BillingFancyPlan>> localVarResponse = GetPublicSubscriptionPlansWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Public Subscription Plans Lists Public subscription plans.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BillingFancyPlan&gt;</returns>
        public ApiResponse< List<BillingFancyPlan> > GetPublicSubscriptionPlansWithHttpInfo ()
        {

            var localVarPath = "/workspaces/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicSubscriptionPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BillingFancyPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BillingFancyPlan>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BillingFancyPlan>)));
        }

        /// <summary>
        /// Public Subscription Plans Lists Public subscription plans.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BillingFancyPlan&gt;</returns>
        public async System.Threading.Tasks.Task<List<BillingFancyPlan>> GetPublicSubscriptionPlansAsync ()
        {
             ApiResponse<List<BillingFancyPlan>> localVarResponse = await GetPublicSubscriptionPlansAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Public Subscription Plans Lists Public subscription plans.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BillingFancyPlan&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BillingFancyPlan>>> GetPublicSubscriptionPlansAsyncWithHttpInfo ()
        {

            var localVarPath = "/workspaces/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicSubscriptionPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BillingFancyPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BillingFancyPlan>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BillingFancyPlan>)));
        }

        /// <summary>
        /// Get workspace currencies Get the currencies for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetWorkspaceCurrencies (int? workspaceId)
        {
             ApiResponse<List<string>> localVarResponse = GetWorkspaceCurrenciesWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace currencies Get the currencies for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetWorkspaceCurrenciesWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceCurrencies");

            var localVarPath = "/workspaces/{workspace_id}/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get workspace currencies Get the currencies for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetWorkspaceCurrenciesAsync (int? workspaceId)
        {
             ApiResponse<List<string>> localVarResponse = await GetWorkspaceCurrenciesAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace currencies Get the currencies for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetWorkspaceCurrenciesAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceCurrencies");

            var localVarPath = "/workspaces/{workspace_id}/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ModelsCustomer</returns>
        public ModelsCustomer GetWorkspaceCustomer (int? workspaceId)
        {
             ApiResponse<ModelsCustomer> localVarResponse = GetWorkspaceCustomerWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of ModelsCustomer</returns>
        public ApiResponse< ModelsCustomer > GetWorkspaceCustomerWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceCustomer");

            var localVarPath = "/workspaces/{workspace_id}/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsCustomer)));
        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ModelsCustomer</returns>
        public async System.Threading.Tasks.Task<ModelsCustomer> GetWorkspaceCustomerAsync (int? workspaceId)
        {
             ApiResponse<ModelsCustomer> localVarResponse = await GetWorkspaceCustomerAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (ModelsCustomer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsCustomer>> GetWorkspaceCustomerAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceCustomer");

            var localVarPath = "/workspaces/{workspace_id}/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsCustomer)));
        }

        /// <summary>
        /// Features Returns list of the features available for a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>SubscriptionFeatureReturn</returns>
        public SubscriptionFeatureReturn GetWorkspaceFeatures (int? workspaceId)
        {
             ApiResponse<SubscriptionFeatureReturn> localVarResponse = GetWorkspaceFeaturesWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Features Returns list of the features available for a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of SubscriptionFeatureReturn</returns>
        public ApiResponse< SubscriptionFeatureReturn > GetWorkspaceFeaturesWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceFeatures");

            var localVarPath = "/workspaces/{workspace_id}/subscription/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionFeatureReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionFeatureReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionFeatureReturn)));
        }

        /// <summary>
        /// Features Returns list of the features available for a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of SubscriptionFeatureReturn</returns>
        public async System.Threading.Tasks.Task<SubscriptionFeatureReturn> GetWorkspaceFeaturesAsync (int? workspaceId)
        {
             ApiResponse<SubscriptionFeatureReturn> localVarResponse = await GetWorkspaceFeaturesAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Features Returns list of the features available for a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (SubscriptionFeatureReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionFeatureReturn>> GetWorkspaceFeaturesAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceFeatures");

            var localVarPath = "/workspaces/{workspace_id}/subscription/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionFeatureReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionFeatureReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionFeatureReturn)));
        }

        /// <summary>
        /// SelectedFeatures Returns list of the features assigned to the workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>SubscriptionFeatureReturn</returns>
        public SubscriptionFeatureReturn GetWorkspaceFeaturesSelected (int? workspaceId)
        {
             ApiResponse<SubscriptionFeatureReturn> localVarResponse = GetWorkspaceFeaturesSelectedWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// SelectedFeatures Returns list of the features assigned to the workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of SubscriptionFeatureReturn</returns>
        public ApiResponse< SubscriptionFeatureReturn > GetWorkspaceFeaturesSelectedWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceFeaturesSelected");

            var localVarPath = "/workspaces/{workspace_id}/subscription/selected_features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceFeaturesSelected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionFeatureReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionFeatureReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionFeatureReturn)));
        }

        /// <summary>
        /// SelectedFeatures Returns list of the features assigned to the workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of SubscriptionFeatureReturn</returns>
        public async System.Threading.Tasks.Task<SubscriptionFeatureReturn> GetWorkspaceFeaturesSelectedAsync (int? workspaceId)
        {
             ApiResponse<SubscriptionFeatureReturn> localVarResponse = await GetWorkspaceFeaturesSelectedAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// SelectedFeatures Returns list of the features assigned to the workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (SubscriptionFeatureReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionFeatureReturn>> GetWorkspaceFeaturesSelectedAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceFeaturesSelected");

            var localVarPath = "/workspaces/{workspace_id}/subscription/selected_features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceFeaturesSelected", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionFeatureReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionFeatureReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionFeatureReturn)));
        }

        /// <summary>
        /// InvoicePdf Returns an Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>string</returns>
        public string GetWorkspaceInvoices (int? workspaceId, int? invoiceId)
        {
             ApiResponse<string> localVarResponse = GetWorkspaceInvoicesWithHttpInfo(workspaceId, invoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// InvoicePdf Returns an Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWorkspaceInvoicesWithHttpInfo (int? workspaceId, int? invoiceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceInvoices");
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceId' when calling SubscriptionApi->GetWorkspaceInvoices");

            var localVarPath = "/workspaces/{workspace_id}/invoices/{invoice_id}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (invoiceId != null) localVarPathParams.Add("invoice_id", this.Configuration.ApiClient.ParameterToString(invoiceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// InvoicePdf Returns an Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWorkspaceInvoicesAsync (int? workspaceId, int? invoiceId)
        {
             ApiResponse<string> localVarResponse = await GetWorkspaceInvoicesAsyncWithHttpInfo(workspaceId, invoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// InvoicePdf Returns an Invoice document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="invoiceId">Numeric ID of the invoice.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspaceInvoicesAsyncWithHttpInfo (int? workspaceId, int? invoiceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceInvoices");
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceId' when calling SubscriptionApi->GetWorkspaceInvoices");

            var localVarPath = "/workspaces/{workspace_id}/invoices/{invoice_id}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (invoiceId != null) localVarPathParams.Add("invoice_id", this.Configuration.ApiClient.ParameterToString(invoiceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PaymentReceipts Returns payment receipt pdf file.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>string</returns>
        public string GetWorkspacePaymentReceipts (int? workspaceId, int? paymentId)
        {
             ApiResponse<string> localVarResponse = GetWorkspacePaymentReceiptsWithHttpInfo(workspaceId, paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PaymentReceipts Returns payment receipt pdf file.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWorkspacePaymentReceiptsWithHttpInfo (int? workspaceId, int? paymentId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePaymentReceipts");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SubscriptionApi->GetWorkspacePaymentReceipts");

            var localVarPath = "/workspaces/{workspace_id}/payment_receipts/{payment_id}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment_id", this.Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePaymentReceipts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PaymentReceipts Returns payment receipt pdf file.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWorkspacePaymentReceiptsAsync (int? workspaceId, int? paymentId)
        {
             ApiResponse<string> localVarResponse = await GetWorkspacePaymentReceiptsAsyncWithHttpInfo(workspaceId, paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PaymentReceipts Returns payment receipt pdf file.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="paymentId">Numeric ID of the receipt</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspacePaymentReceiptsAsyncWithHttpInfo (int? workspaceId, int? paymentId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePaymentReceipts");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling SubscriptionApi->GetWorkspacePaymentReceipts");

            var localVarPath = "/workspaces/{workspace_id}/payment_receipts/{payment_id}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment_id", this.Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePaymentReceipts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PaymentRecords Returns payment records.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsPaymentRecord&gt;</returns>
        public List<ModelsPaymentRecord> GetWorkspacePaymentRecords (int? workspaceId)
        {
             ApiResponse<List<ModelsPaymentRecord>> localVarResponse = GetWorkspacePaymentRecordsWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PaymentRecords Returns payment records.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsPaymentRecord&gt;</returns>
        public ApiResponse< List<ModelsPaymentRecord> > GetWorkspacePaymentRecordsWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePaymentRecords");

            var localVarPath = "/workspaces/{workspace_id}/payment_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePaymentRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsPaymentRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsPaymentRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsPaymentRecord>)));
        }

        /// <summary>
        /// PaymentRecords Returns payment records.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsPaymentRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsPaymentRecord>> GetWorkspacePaymentRecordsAsync (int? workspaceId)
        {
             ApiResponse<List<ModelsPaymentRecord>> localVarResponse = await GetWorkspacePaymentRecordsAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PaymentRecords Returns payment records.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsPaymentRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsPaymentRecord>>> GetWorkspacePaymentRecordsAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePaymentRecords");

            var localVarPath = "/workspaces/{workspace_id}/payment_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePaymentRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsPaymentRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsPaymentRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsPaymentRecord>)));
        }

        /// <summary>
        /// WorkspacePlans Returns pricing plans for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>string</returns>
        public string GetWorkspacePlans (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = GetWorkspacePlansWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspacePlans Returns pricing plans for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWorkspacePlansWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePlans");

            var localVarPath = "/workspaces/{workspace_id}/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// WorkspacePlans Returns pricing plans for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWorkspacePlansAsync (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = await GetWorkspacePlansAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspacePlans Returns pricing plans for a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspacePlansAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePlans");

            var localVarPath = "/workspaces/{workspace_id}/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// WorkspacePlan Returns plans fitered by plan ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>List&lt;BillingFancyPlan&gt;</returns>
        public List<BillingFancyPlan> GetWorkspacePlansPricing (int? workspaceId, int? planId)
        {
             ApiResponse<List<BillingFancyPlan>> localVarResponse = GetWorkspacePlansPricingWithHttpInfo(workspaceId, planId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspacePlan Returns plans fitered by plan ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>ApiResponse of List&lt;BillingFancyPlan&gt;</returns>
        public ApiResponse< List<BillingFancyPlan> > GetWorkspacePlansPricingWithHttpInfo (int? workspaceId, int? planId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePlansPricing");
            // verify the required parameter 'planId' is set
            if (planId == null)
                throw new ApiException(400, "Missing required parameter 'planId' when calling SubscriptionApi->GetWorkspacePlansPricing");

            var localVarPath = "/workspaces/{workspace_id}/plans/{plan_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (planId != null) localVarPathParams.Add("plan_id", this.Configuration.ApiClient.ParameterToString(planId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePlansPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BillingFancyPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BillingFancyPlan>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BillingFancyPlan>)));
        }

        /// <summary>
        /// WorkspacePlan Returns plans fitered by plan ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>Task of List&lt;BillingFancyPlan&gt;</returns>
        public async System.Threading.Tasks.Task<List<BillingFancyPlan>> GetWorkspacePlansPricingAsync (int? workspaceId, int? planId)
        {
             ApiResponse<List<BillingFancyPlan>> localVarResponse = await GetWorkspacePlansPricingAsyncWithHttpInfo(workspaceId, planId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspacePlan Returns plans fitered by plan ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="planId">Numeric ID of the plan to get</param>
        /// <returns>Task of ApiResponse (List&lt;BillingFancyPlan&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BillingFancyPlan>>> GetWorkspacePlansPricingAsyncWithHttpInfo (int? workspaceId, int? planId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePlansPricing");
            // verify the required parameter 'planId' is set
            if (planId == null)
                throw new ApiException(400, "Missing required parameter 'planId' when calling SubscriptionApi->GetWorkspacePlansPricing");

            var localVarPath = "/workspaces/{workspace_id}/plans/{plan_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (planId != null) localVarPathParams.Add("plan_id", this.Configuration.ApiClient.ParameterToString(planId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePlansPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BillingFancyPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BillingFancyPlan>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BillingFancyPlan>)));
        }

        /// <summary>
        /// PurchaseOrderPdf Returns a Purchase Order document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>string</returns>
        public string GetWorkspacePurchaseOrderPdf (int? workspaceId, int? purchaseOrderId)
        {
             ApiResponse<string> localVarResponse = GetWorkspacePurchaseOrderPdfWithHttpInfo(workspaceId, purchaseOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PurchaseOrderPdf Returns a Purchase Order document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWorkspacePurchaseOrderPdfWithHttpInfo (int? workspaceId, int? purchaseOrderId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePurchaseOrderPdf");
            // verify the required parameter 'purchaseOrderId' is set
            if (purchaseOrderId == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderId' when calling SubscriptionApi->GetWorkspacePurchaseOrderPdf");

            var localVarPath = "/workspaces/{workspace_id}/subscription/purchase_orders/{purchase_order_id}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (purchaseOrderId != null) localVarPathParams.Add("purchase_order_id", this.Configuration.ApiClient.ParameterToString(purchaseOrderId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePurchaseOrderPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PurchaseOrderPdf Returns a Purchase Order document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWorkspacePurchaseOrderPdfAsync (int? workspaceId, int? purchaseOrderId)
        {
             ApiResponse<string> localVarResponse = await GetWorkspacePurchaseOrderPdfAsyncWithHttpInfo(workspaceId, purchaseOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PurchaseOrderPdf Returns a Purchase Order document in PDF form.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="purchaseOrderId">Numeric ID of the purchase order.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWorkspacePurchaseOrderPdfAsyncWithHttpInfo (int? workspaceId, int? purchaseOrderId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspacePurchaseOrderPdf");
            // verify the required parameter 'purchaseOrderId' is set
            if (purchaseOrderId == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderId' when calling SubscriptionApi->GetWorkspacePurchaseOrderPdf");

            var localVarPath = "/workspaces/{workspace_id}/subscription/purchase_orders/{purchase_order_id}.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (purchaseOrderId != null) localVarPathParams.Add("purchase_order_id", this.Configuration.ApiClient.ParameterToString(purchaseOrderId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePurchaseOrderPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>SubscriptionOutData</returns>
        public SubscriptionOutData GetWorkspaceSubscription (int? workspaceId)
        {
             ApiResponse<SubscriptionOutData> localVarResponse = GetWorkspaceSubscriptionWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of SubscriptionOutData</returns>
        public ApiResponse< SubscriptionOutData > GetWorkspaceSubscriptionWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceSubscription");

            var localVarPath = "/workspaces/{workspace_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionOutData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionOutData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionOutData)));
        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of SubscriptionOutData</returns>
        public async System.Threading.Tasks.Task<SubscriptionOutData> GetWorkspaceSubscriptionAsync (int? workspaceId)
        {
             ApiResponse<SubscriptionOutData> localVarResponse = await GetWorkspaceSubscriptionAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscription Returns subscription data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (SubscriptionOutData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionOutData>> GetWorkspaceSubscriptionAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->GetWorkspaceSubscription");

            var localVarPath = "/workspaces/{workspace_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionOutData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionOutData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionOutData)));
        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>string</returns>
        public string PostOrganizationPlansPricingFeedback (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
             ApiResponse<string> localVarResponse = PostOrganizationPlansPricingFeedbackWithHttpInfo(organizationId, pricingPlanId, comment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostOrganizationPlansPricingFeedbackWithHttpInfo (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationPlansPricingFeedback");
            // verify the required parameter 'pricingPlanId' is set
            if (pricingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'pricingPlanId' when calling SubscriptionApi->PostOrganizationPlansPricingFeedback");

            var localVarPath = "/organizations/{organization_id}/pricing_plans/{pricing_plan_id}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (pricingPlanId != null) localVarPathParams.Add("pricing_plan_id", this.Configuration.ApiClient.ParameterToString(pricingPlanId)); // path parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationPlansPricingFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostOrganizationPlansPricingFeedbackAsync (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
             ApiResponse<string> localVarResponse = await PostOrganizationPlansPricingFeedbackAsyncWithHttpInfo(organizationId, pricingPlanId, comment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostOrganizationPlansPricingFeedbackAsyncWithHttpInfo (int? organizationId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationPlansPricingFeedback");
            // verify the required parameter 'pricingPlanId' is set
            if (pricingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'pricingPlanId' when calling SubscriptionApi->PostOrganizationPlansPricingFeedback");

            var localVarPath = "/organizations/{organization_id}/pricing_plans/{pricing_plan_id}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (pricingPlanId != null) localVarPathParams.Add("pricing_plan_id", this.Configuration.ApiClient.ParameterToString(pricingPlanId)); // path parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationPlansPricingFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>AccountingPurchaseOrderListItem</returns>
        public AccountingPurchaseOrderListItem PostOrganizationPurchaseOrder (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest)
        {
             ApiResponse<AccountingPurchaseOrderListItem> localVarResponse = PostOrganizationPurchaseOrderWithHttpInfo(organizationId, organizationPurchaseOrderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>ApiResponse of AccountingPurchaseOrderListItem</returns>
        public ApiResponse< AccountingPurchaseOrderListItem > PostOrganizationPurchaseOrderWithHttpInfo (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationPurchaseOrder");
            // verify the required parameter 'organizationPurchaseOrderRequest' is set
            if (organizationPurchaseOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'organizationPurchaseOrderRequest' when calling SubscriptionApi->PostOrganizationPurchaseOrder");

            var localVarPath = "/organizations/{organization_id}/subscription/purchase_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationPurchaseOrderRequest != null && organizationPurchaseOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationPurchaseOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationPurchaseOrderRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingPurchaseOrderListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingPurchaseOrderListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingPurchaseOrderListItem)));
        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of AccountingPurchaseOrderListItem</returns>
        public async System.Threading.Tasks.Task<AccountingPurchaseOrderListItem> PostOrganizationPurchaseOrderAsync (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest)
        {
             ApiResponse<AccountingPurchaseOrderListItem> localVarResponse = await PostOrganizationPurchaseOrderAsyncWithHttpInfo(organizationId, organizationPurchaseOrderRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationPurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ApiResponse (AccountingPurchaseOrderListItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingPurchaseOrderListItem>> PostOrganizationPurchaseOrderAsyncWithHttpInfo (int? organizationId, PurchaseordersPayload organizationPurchaseOrderRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationPurchaseOrder");
            // verify the required parameter 'organizationPurchaseOrderRequest' is set
            if (organizationPurchaseOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'organizationPurchaseOrderRequest' when calling SubscriptionApi->PostOrganizationPurchaseOrder");

            var localVarPath = "/organizations/{organization_id}/subscription/purchase_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationPurchaseOrderRequest != null && organizationPurchaseOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationPurchaseOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationPurchaseOrderRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingPurchaseOrderListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingPurchaseOrderListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingPurchaseOrderListItem)));
        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns></returns>
        public void PostOrganizationSubscription (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest)
        {
             PostOrganizationSubscriptionWithHttpInfo(organizationId, organizationSubscriptionRequest);
        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostOrganizationSubscriptionWithHttpInfo (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationSubscription");
            // verify the required parameter 'organizationSubscriptionRequest' is set
            if (organizationSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'organizationSubscriptionRequest' when calling SubscriptionApi->PostOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationSubscriptionRequest != null && organizationSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationSubscriptionRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostOrganizationSubscriptionAsync (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest)
        {
             await PostOrganizationSubscriptionAsyncWithHttpInfo(organizationId, organizationSubscriptionRequest);

        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for subscription creation.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId, SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationSubscription");
            // verify the required parameter 'organizationSubscriptionRequest' is set
            if (organizationSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'organizationSubscriptionRequest' when calling SubscriptionApi->PostOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationSubscriptionRequest != null && organizationSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationSubscriptionRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns></returns>
        public void PostOrganizationSubscription_0 (int? organizationId)
        {
             PostOrganizationSubscription_0WithHttpInfo(organizationId);
        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostOrganizationSubscription_0WithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationSubscription_0");

            var localVarPath = "/organizations/{organization_id}/subscription/trial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationSubscription_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostOrganizationSubscription_0Async (int? organizationId)
        {
             await PostOrganizationSubscription_0AsyncWithHttpInfo(organizationId);

        }

        /// <summary>
        /// Subscription Allows to create a new unified subscription on initial 30-day trial for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostOrganizationSubscription_0AsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PostOrganizationSubscription_0");

            var localVarPath = "/organizations/{organization_id}/subscription/trial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationSubscription_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ModelsContactDetail</returns>
        public ModelsContactDetail PostWorkspaceCustomer (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest)
        {
             ApiResponse<ModelsContactDetail> localVarResponse = PostWorkspaceCustomerWithHttpInfo(workspaceId, contactDetailRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ApiResponse of ModelsContactDetail</returns>
        public ApiResponse< ModelsContactDetail > PostWorkspaceCustomerWithHttpInfo (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceCustomer");
            // verify the required parameter 'contactDetailRequest' is set
            if (contactDetailRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactDetailRequest' when calling SubscriptionApi->PostWorkspaceCustomer");

            var localVarPath = "/workspaces/{workspace_id}/customer/contact_detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (contactDetailRequest != null && contactDetailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactDetailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactDetailRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsContactDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsContactDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsContactDetail)));
        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ModelsContactDetail</returns>
        public async System.Threading.Tasks.Task<ModelsContactDetail> PostWorkspaceCustomerAsync (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest)
        {
             ApiResponse<ModelsContactDetail> localVarResponse = await PostWorkspaceCustomerAsyncWithHttpInfo(workspaceId, contactDetailRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ApiResponse (ModelsContactDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsContactDetail>> PostWorkspaceCustomerAsyncWithHttpInfo (int? workspaceId, SubscriptionContactDetailRequest contactDetailRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceCustomer");
            // verify the required parameter 'contactDetailRequest' is set
            if (contactDetailRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactDetailRequest' when calling SubscriptionApi->PostWorkspaceCustomer");

            var localVarPath = "/workspaces/{workspace_id}/customer/contact_detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (contactDetailRequest != null && contactDetailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactDetailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactDetailRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsContactDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsContactDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsContactDetail)));
        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>string</returns>
        public string PostWorkspacePlansPricingFeedback (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
             ApiResponse<string> localVarResponse = PostWorkspacePlansPricingFeedbackWithHttpInfo(workspaceId, pricingPlanId, comment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostWorkspacePlansPricingFeedbackWithHttpInfo (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspacePlansPricingFeedback");
            // verify the required parameter 'pricingPlanId' is set
            if (pricingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'pricingPlanId' when calling SubscriptionApi->PostWorkspacePlansPricingFeedback");

            var localVarPath = "/workspaces/{workspace_id}/pricing_plans/{pricing_plan_id}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (pricingPlanId != null) localVarPathParams.Add("pricing_plan_id", this.Configuration.ApiClient.ParameterToString(pricingPlanId)); // path parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspacePlansPricingFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostWorkspacePlansPricingFeedbackAsync (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
             ApiResponse<string> localVarResponse = await PostWorkspacePlansPricingFeedbackAsyncWithHttpInfo(workspaceId, pricingPlanId, comment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Feedback Endpoint for client&#39;s feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="pricingPlanId">Numeric ID of the old pricing_plan_id</param>
        /// <param name="comment">Comment from the client on the pricing plan change (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspacePlansPricingFeedbackAsyncWithHttpInfo (int? workspaceId, int? pricingPlanId, ModelsPlanChangeFeedback comment = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspacePlansPricingFeedback");
            // verify the required parameter 'pricingPlanId' is set
            if (pricingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'pricingPlanId' when calling SubscriptionApi->PostWorkspacePlansPricingFeedback");

            var localVarPath = "/workspaces/{workspace_id}/pricing_plans/{pricing_plan_id}/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (pricingPlanId != null) localVarPathParams.Add("pricing_plan_id", this.Configuration.ApiClient.ParameterToString(pricingPlanId)); // path parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspacePlansPricingFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>AccountingPurchaseOrderListItem</returns>
        public AccountingPurchaseOrderListItem PostWorkspacePurchaseOrder (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest)
        {
             ApiResponse<AccountingPurchaseOrderListItem> localVarResponse = PostWorkspacePurchaseOrderWithHttpInfo(workspaceId, workspacePurchaseOrderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>ApiResponse of AccountingPurchaseOrderListItem</returns>
        public ApiResponse< AccountingPurchaseOrderListItem > PostWorkspacePurchaseOrderWithHttpInfo (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspacePurchaseOrder");
            // verify the required parameter 'workspacePurchaseOrderRequest' is set
            if (workspacePurchaseOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'workspacePurchaseOrderRequest' when calling SubscriptionApi->PostWorkspacePurchaseOrder");

            var localVarPath = "/workspaces/{workspace_id}/subscription/purchase_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspacePurchaseOrderRequest != null && workspacePurchaseOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspacePurchaseOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspacePurchaseOrderRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspacePurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingPurchaseOrderListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingPurchaseOrderListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingPurchaseOrderListItem)));
        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of AccountingPurchaseOrderListItem</returns>
        public async System.Threading.Tasks.Task<AccountingPurchaseOrderListItem> PostWorkspacePurchaseOrderAsync (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest)
        {
             ApiResponse<AccountingPurchaseOrderListItem> localVarResponse = await PostWorkspacePurchaseOrderAsyncWithHttpInfo(workspaceId, workspacePurchaseOrderRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PurchaseOrders Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspacePurchaseOrderRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ApiResponse (AccountingPurchaseOrderListItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountingPurchaseOrderListItem>> PostWorkspacePurchaseOrderAsyncWithHttpInfo (int? workspaceId, PurchaseordersPayload workspacePurchaseOrderRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspacePurchaseOrder");
            // verify the required parameter 'workspacePurchaseOrderRequest' is set
            if (workspacePurchaseOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'workspacePurchaseOrderRequest' when calling SubscriptionApi->PostWorkspacePurchaseOrder");

            var localVarPath = "/workspaces/{workspace_id}/subscription/purchase_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspacePurchaseOrderRequest != null && workspacePurchaseOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspacePurchaseOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspacePurchaseOrderRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspacePurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountingPurchaseOrderListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountingPurchaseOrderListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountingPurchaseOrderListItem)));
        }

        /// <summary>
        /// Subscription Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>ModelsSubscription</returns>
        public ModelsSubscription PostWorkspaceSubscription (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest)
        {
             ApiResponse<ModelsSubscription> localVarResponse = PostWorkspaceSubscriptionWithHttpInfo(workspaceId, workspaceSubscriptionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscription Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>ApiResponse of ModelsSubscription</returns>
        public ApiResponse< ModelsSubscription > PostWorkspaceSubscriptionWithHttpInfo (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceSubscription");
            // verify the required parameter 'workspaceSubscriptionRequest' is set
            if (workspaceSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSubscriptionRequest' when calling SubscriptionApi->PostWorkspaceSubscription");

            var localVarPath = "/workspaces/{workspace_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceSubscriptionRequest != null && workspaceSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceSubscriptionRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSubscription)));
        }

        /// <summary>
        /// Subscription Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ModelsSubscription</returns>
        public async System.Threading.Tasks.Task<ModelsSubscription> PostWorkspaceSubscriptionAsync (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest)
        {
             ApiResponse<ModelsSubscription> localVarResponse = await PostWorkspaceSubscriptionAsyncWithHttpInfo(workspaceId, workspaceSubscriptionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscription Allows to create a new subscription, cancel existing one or change the pricing plan.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceSubscriptionRequest">Input data for purchase order creation.</param>
        /// <returns>Task of ApiResponse (ModelsSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsSubscription>> PostWorkspaceSubscriptionAsyncWithHttpInfo (int? workspaceId, SubscriptionPayload workspaceSubscriptionRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceSubscription");
            // verify the required parameter 'workspaceSubscriptionRequest' is set
            if (workspaceSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSubscriptionRequest' when calling SubscriptionApi->PostWorkspaceSubscription");

            var localVarPath = "/workspaces/{workspace_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceSubscriptionRequest != null && workspaceSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceSubscriptionRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsSubscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsSubscription)));
        }

        /// <summary>
        /// SubscriptionCalculation Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>SubscriptionCalculatedData</returns>
        public SubscriptionCalculatedData PostWorkspaceSubscriptionCalculate (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest)
        {
             ApiResponse<SubscriptionCalculatedData> localVarResponse = PostWorkspaceSubscriptionCalculateWithHttpInfo(workspaceId, calculationDataRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// SubscriptionCalculation Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>ApiResponse of SubscriptionCalculatedData</returns>
        public ApiResponse< SubscriptionCalculatedData > PostWorkspaceSubscriptionCalculateWithHttpInfo (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceSubscriptionCalculate");
            // verify the required parameter 'calculationDataRequest' is set
            if (calculationDataRequest == null)
                throw new ApiException(400, "Missing required parameter 'calculationDataRequest' when calling SubscriptionApi->PostWorkspaceSubscriptionCalculate");

            var localVarPath = "/workspaces/{workspace_id}/subscription/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (calculationDataRequest != null && calculationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculationDataRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceSubscriptionCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionCalculatedData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionCalculatedData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionCalculatedData)));
        }

        /// <summary>
        /// SubscriptionCalculation Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>Task of SubscriptionCalculatedData</returns>
        public async System.Threading.Tasks.Task<SubscriptionCalculatedData> PostWorkspaceSubscriptionCalculateAsync (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest)
        {
             ApiResponse<SubscriptionCalculatedData> localVarResponse = await PostWorkspaceSubscriptionCalculateAsyncWithHttpInfo(workspaceId, calculationDataRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// SubscriptionCalculation Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="calculationDataRequest">Input data for calculation.</param>
        /// <returns>Task of ApiResponse (SubscriptionCalculatedData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionCalculatedData>> PostWorkspaceSubscriptionCalculateAsyncWithHttpInfo (int? workspaceId, SubscriptionCalculateRequest calculationDataRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceSubscriptionCalculate");
            // verify the required parameter 'calculationDataRequest' is set
            if (calculationDataRequest == null)
                throw new ApiException(400, "Missing required parameter 'calculationDataRequest' when calling SubscriptionApi->PostWorkspaceSubscriptionCalculate");

            var localVarPath = "/workspaces/{workspace_id}/subscription/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (calculationDataRequest != null && calculationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculationDataRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceSubscriptionCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionCalculatedData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionCalculatedData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionCalculatedData)));
        }

        /// <summary>
        /// IncAccept Records user acceptance of Terms of Service.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>string</returns>
        public string PostWorkspaceSubscriptionIncAccept (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = PostWorkspaceSubscriptionIncAcceptWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// IncAccept Records user acceptance of Terms of Service.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostWorkspaceSubscriptionIncAcceptWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceSubscriptionIncAccept");

            var localVarPath = "/workspaces/{workspace_id}/subscription/inc_accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceSubscriptionIncAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// IncAccept Records user acceptance of Terms of Service.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostWorkspaceSubscriptionIncAcceptAsync (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = await PostWorkspaceSubscriptionIncAcceptAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// IncAccept Records user acceptance of Terms of Service.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspaceSubscriptionIncAcceptAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PostWorkspaceSubscriptionIncAccept");

            var localVarPath = "/workspaces/{workspace_id}/subscription/inc_accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceSubscriptionIncAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Subscription Allows to update existing unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns></returns>
        public void PutOrganizationSubscription (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest)
        {
             PutOrganizationSubscriptionWithHttpInfo(organizationId, organizationSubscriptionRequest);
        }

        /// <summary>
        /// Subscription Allows to update existing unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutOrganizationSubscriptionWithHttpInfo (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PutOrganizationSubscription");
            // verify the required parameter 'organizationSubscriptionRequest' is set
            if (organizationSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'organizationSubscriptionRequest' when calling SubscriptionApi->PutOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationSubscriptionRequest != null && organizationSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationSubscriptionRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscription Allows to update existing unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutOrganizationSubscriptionAsync (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest)
        {
             await PutOrganizationSubscriptionAsyncWithHttpInfo(organizationId, organizationSubscriptionRequest);

        }

        /// <summary>
        /// Subscription Allows to update existing unified subscription for an organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="organizationSubscriptionRequest">Input data for updating subscription.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutOrganizationSubscriptionAsyncWithHttpInfo (int? organizationId, SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling SubscriptionApi->PutOrganizationSubscription");
            // verify the required parameter 'organizationSubscriptionRequest' is set
            if (organizationSubscriptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'organizationSubscriptionRequest' when calling SubscriptionApi->PutOrganizationSubscription");

            var localVarPath = "/organizations/{organization_id}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationSubscriptionRequest != null && organizationSubscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationSubscriptionRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Profile Allows to change profile (subscription). This endpoint will be deprecated.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>string</returns>
        public string PutWorkspaceProfile (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null)
        {
             ApiResponse<string> localVarResponse = PutWorkspaceProfileWithHttpInfo(workspaceId, profileId, feedbackData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Profile Allows to change profile (subscription). This endpoint will be deprecated.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutWorkspaceProfileWithHttpInfo (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PutWorkspaceProfile");
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling SubscriptionApi->PutWorkspaceProfile");

            var localVarPath = "/workspaces/{workspace_id}/profile/{profile_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (profileId != null) localVarPathParams.Add("profile_id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (feedbackData != null && feedbackData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feedbackData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feedbackData; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Profile Allows to change profile (subscription). This endpoint will be deprecated.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutWorkspaceProfileAsync (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null)
        {
             ApiResponse<string> localVarResponse = await PutWorkspaceProfileAsyncWithHttpInfo(workspaceId, profileId, feedbackData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Profile Allows to change profile (subscription). This endpoint will be deprecated.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="profileId">Numeric ID of the profile (pricing plan).</param>
        /// <param name="feedbackData">Feedback data. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceProfileAsyncWithHttpInfo (int? workspaceId, int? profileId, ModelsPlanChangeFeedback feedbackData = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SubscriptionApi->PutWorkspaceProfile");
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling SubscriptionApi->PutWorkspaceProfile");

            var localVarPath = "/workspaces/{workspace_id}/profile/{profile_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (profileId != null) localVarPathParams.Add("profile_id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (feedbackData != null && feedbackData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feedbackData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feedbackData; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
