/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeEntriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Deletes a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>string</returns>
        string DeleteWorkspaceTimeEntries (int? workspaceId, int? timeEntryId);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Deletes a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteWorkspaceTimeEntriesWithHttpInfo (int? workspaceId, int? timeEntryId);
        /// <summary>
        /// Get current time entry
        /// </summary>
        /// <remarks>
        /// Load running time entry for user ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelsTimeEntry</returns>
        ModelsTimeEntry GetCurrentTimeEntry ();

        /// <summary>
        /// Get current time entry
        /// </summary>
        /// <remarks>
        /// Load running time entry for user ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        ApiResponse<ModelsTimeEntry> GetCurrentTimeEntryWithHttpInfo ();
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Lists latest time entries.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>List&lt;ModelsTimeEntry&gt;</returns>
        List<ModelsTimeEntry> GetTimeEntries (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Lists latest time entries.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntry&gt;</returns>
        ApiResponse<List<ModelsTimeEntry>> GetTimeEntriesWithHttpInfo (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null);
        /// <summary>
        /// Get a time entry by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>ModelsTimeEntry</returns>
        ModelsTimeEntry GetTimeEntryById (int? timeEntryId, bool? meta = null, bool? includeSharing = null);

        /// <summary>
        /// Get a time entry by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        ApiResponse<ModelsTimeEntry> GetTimeEntryByIdWithHttpInfo (int? timeEntryId, bool? meta = null, bool? includeSharing = null);
        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ModelsTimeEntryNotes</returns>
        ModelsTimeEntryNotes GetTimeNotesEntryNotesById (int? timeEntryId);

        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of ModelsTimeEntryNotes</returns>
        ApiResponse<ModelsTimeEntryNotes> GetTimeNotesEntryNotesByIdWithHttpInfo (int? timeEntryId);
        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>List&lt;ModelsTimeEntryNotes&gt;</returns>
        List<ModelsTimeEntryNotes> GetTimeNotesEntryNotesById_0 (int? timeEntryId);

        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntryNotes&gt;</returns>
        ApiResponse<List<ModelsTimeEntryNotes>> GetTimeNotesEntryNotesById_0WithHttpInfo (int? timeEntryId);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get invitations for time entries
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;</returns>
        List<TimeentriesGetTimEntryInvitationsResponse> GetWorkspaceTimeEntryInvitations (int? workspaceId);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get invitations for time entries
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;</returns>
        ApiResponse<List<TimeentriesGetTimEntryInvitationsResponse>> GetWorkspaceTimeEntryInvitationsWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Bulk editing time entries
        /// </summary>
        /// <remarks>
        /// In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>TimeentryPatchOutput</returns>
        TimeentryPatchOutput PatchTimeEntries (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null);

        /// <summary>
        /// Bulk editing time entries
        /// </summary>
        /// <remarks>
        /// In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of TimeentryPatchOutput</returns>
        ApiResponse<TimeentryPatchOutput> PatchTimeEntriesWithHttpInfo (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null);
        /// <summary>
        /// Stop TimeEntry
        /// </summary>
        /// <remarks>
        /// Stops a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ModelsTimeEntry</returns>
        ModelsTimeEntry PatchWorkspaceStopTimeEntryHandler (int? workspaceId, int? timeEntryId);

        /// <summary>
        /// Stop TimeEntry
        /// </summary>
        /// <remarks>
        /// Stops a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        ApiResponse<ModelsTimeEntry> PatchWorkspaceStopTimeEntryHandlerWithHttpInfo (int? workspaceId, int? timeEntryId);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get the sharing details of the specified time entries in bulk
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>List&lt;TimeentriesBulkGetSharingResponse&gt;</returns>
        List<TimeentriesBulkGetSharingResponse> PostMeTimeEntriesSharedWith (List<TimeentriesBulkGetSharingRequest> request);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get the sharing details of the specified time entries in bulk
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>ApiResponse of List&lt;TimeentriesBulkGetSharingResponse&gt;</returns>
        ApiResponse<List<TimeentriesBulkGetSharingResponse>> PostMeTimeEntriesSharedWithWithHttpInfo (List<TimeentriesBulkGetSharingRequest> request);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Creates a new workspace TimeEntry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ModelsTimeEntry</returns>
        ModelsTimeEntry PostWorkspaceTimeEntries (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Creates a new workspace TimeEntry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        ApiResponse<ModelsTimeEntry> PostWorkspaceTimeEntriesWithHttpInfo (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Accept or reject an invitation for a time entry
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>string</returns>
        string PostWorkspaceTimeEntryInvitationAction (int? workspaceId, int? timeEntryInvitationId);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Accept or reject an invitation for a time entry
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostWorkspaceTimeEntryInvitationActionWithHttpInfo (int? workspaceId, int? timeEntryInvitationId);
        /// <summary>
        /// Put a time entry notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry notes by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ModelsTimeEntryNotes</returns>
        ModelsTimeEntryNotes PutTimeEntryNotesById (int? timeEntryId);

        /// <summary>
        /// Put a time entry notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry notes by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of ModelsTimeEntryNotes</returns>
        ApiResponse<ModelsTimeEntryNotes> PutTimeEntryNotesByIdWithHttpInfo (int? timeEntryId);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Updates a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>ModelsTimeEntry</returns>
        ModelsTimeEntry PutWorkspaceTimeEntryHandler (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Updates a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        ApiResponse<ModelsTimeEntry> PutWorkspaceTimeEntryHandlerWithHttpInfo (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Deletes a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteWorkspaceTimeEntriesAsync (int? workspaceId, int? timeEntryId);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Deletes a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceTimeEntriesAsyncWithHttpInfo (int? workspaceId, int? timeEntryId);
        /// <summary>
        /// Get current time entry
        /// </summary>
        /// <remarks>
        /// Load running time entry for user ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelsTimeEntry</returns>
        System.Threading.Tasks.Task<ModelsTimeEntry> GetCurrentTimeEntryAsync ();

        /// <summary>
        /// Get current time entry
        /// </summary>
        /// <remarks>
        /// Load running time entry for user ID.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> GetCurrentTimeEntryAsyncWithHttpInfo ();
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Lists latest time entries.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of List&lt;ModelsTimeEntry&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTimeEntry>> GetTimeEntriesAsync (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Lists latest time entries.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntry>>> GetTimeEntriesAsyncWithHttpInfo (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null);
        /// <summary>
        /// Get a time entry by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        System.Threading.Tasks.Task<ModelsTimeEntry> GetTimeEntryByIdAsync (int? timeEntryId, bool? meta = null, bool? includeSharing = null);

        /// <summary>
        /// Get a time entry by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> GetTimeEntryByIdAsyncWithHttpInfo (int? timeEntryId, bool? meta = null, bool? includeSharing = null);
        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ModelsTimeEntryNotes</returns>
        System.Threading.Tasks.Task<ModelsTimeEntryNotes> GetTimeNotesEntryNotesByIdAsync (int? timeEntryId);

        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntryNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntryNotes>> GetTimeNotesEntryNotesByIdAsyncWithHttpInfo (int? timeEntryId);
        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of List&lt;ModelsTimeEntryNotes&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTimeEntryNotes>> GetTimeNotesEntryNotesById_0Async (int? timeEntryId);

        /// <summary>
        /// Get a time entries&#39; notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntryNotes&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntryNotes>>> GetTimeNotesEntryNotesById_0AsyncWithHttpInfo (int? timeEntryId);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get invitations for time entries
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TimeentriesGetTimEntryInvitationsResponse>> GetWorkspaceTimeEntryInvitationsAsync (int? workspaceId);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get invitations for time entries
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimeentriesGetTimEntryInvitationsResponse>>> GetWorkspaceTimeEntryInvitationsAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Bulk editing time entries
        /// </summary>
        /// <remarks>
        /// In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of TimeentryPatchOutput</returns>
        System.Threading.Tasks.Task<TimeentryPatchOutput> PatchTimeEntriesAsync (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null);

        /// <summary>
        /// Bulk editing time entries
        /// </summary>
        /// <remarks>
        /// In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (TimeentryPatchOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeentryPatchOutput>> PatchTimeEntriesAsyncWithHttpInfo (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null);
        /// <summary>
        /// Stop TimeEntry
        /// </summary>
        /// <remarks>
        /// Stops a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        System.Threading.Tasks.Task<ModelsTimeEntry> PatchWorkspaceStopTimeEntryHandlerAsync (int? workspaceId, int? timeEntryId);

        /// <summary>
        /// Stop TimeEntry
        /// </summary>
        /// <remarks>
        /// Stops a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PatchWorkspaceStopTimeEntryHandlerAsyncWithHttpInfo (int? workspaceId, int? timeEntryId);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get the sharing details of the specified time entries in bulk
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>Task of List&lt;TimeentriesBulkGetSharingResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TimeentriesBulkGetSharingResponse>> PostMeTimeEntriesSharedWithAsync (List<TimeentriesBulkGetSharingRequest> request);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Get the sharing details of the specified time entries in bulk
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeentriesBulkGetSharingResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimeentriesBulkGetSharingResponse>>> PostMeTimeEntriesSharedWithAsyncWithHttpInfo (List<TimeentriesBulkGetSharingRequest> request);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Creates a new workspace TimeEntry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        System.Threading.Tasks.Task<ModelsTimeEntry> PostWorkspaceTimeEntriesAsync (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Creates a new workspace TimeEntry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PostWorkspaceTimeEntriesAsyncWithHttpInfo (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Accept or reject an invitation for a time entry
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostWorkspaceTimeEntryInvitationActionAsync (int? workspaceId, int? timeEntryInvitationId);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Accept or reject an invitation for a time entry
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspaceTimeEntryInvitationActionAsyncWithHttpInfo (int? workspaceId, int? timeEntryInvitationId);
        /// <summary>
        /// Put a time entry notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry notes by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ModelsTimeEntryNotes</returns>
        System.Threading.Tasks.Task<ModelsTimeEntryNotes> PutTimeEntryNotesByIdAsync (int? timeEntryId);

        /// <summary>
        /// Put a time entry notes by ID.
        /// </summary>
        /// <remarks>
        /// Load time entry notes by ID that is accessible by the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntryNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntryNotes>> PutTimeEntryNotesByIdAsyncWithHttpInfo (int? timeEntryId);
        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Updates a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        System.Threading.Tasks.Task<ModelsTimeEntry> PutWorkspaceTimeEntryHandlerAsync (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null);

        /// <summary>
        /// TimeEntries
        /// </summary>
        /// <remarks>
        /// Updates a workspace time entry.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PutWorkspaceTimeEntryHandlerAsyncWithHttpInfo (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimeEntriesApi : ITimeEntriesApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeEntriesApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEntriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimeEntriesApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// TimeEntries Deletes a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>string</returns>
        public string DeleteWorkspaceTimeEntries (int? workspaceId, int? timeEntryId)
        {
             ApiResponse<string> localVarResponse = DeleteWorkspaceTimeEntriesWithHttpInfo(workspaceId, timeEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TimeEntries Deletes a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteWorkspaceTimeEntriesWithHttpInfo (int? workspaceId, int? timeEntryId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->DeleteWorkspaceTimeEntries");
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->DeleteWorkspaceTimeEntries");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// TimeEntries Deletes a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteWorkspaceTimeEntriesAsync (int? workspaceId, int? timeEntryId)
        {
             ApiResponse<string> localVarResponse = await DeleteWorkspaceTimeEntriesAsyncWithHttpInfo(workspaceId, timeEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TimeEntries Deletes a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceTimeEntriesAsyncWithHttpInfo (int? workspaceId, int? timeEntryId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->DeleteWorkspaceTimeEntries");
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->DeleteWorkspaceTimeEntries");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get current time entry Load running time entry for user ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelsTimeEntry</returns>
        public ModelsTimeEntry GetCurrentTimeEntry ()
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = GetCurrentTimeEntryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current time entry Load running time entry for user ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        public ApiResponse< ModelsTimeEntry > GetCurrentTimeEntryWithHttpInfo ()
        {

            var localVarPath = "/me/time_entries/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// Get current time entry Load running time entry for user ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelsTimeEntry</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntry> GetCurrentTimeEntryAsync ()
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = await GetCurrentTimeEntryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current time entry Load running time entry for user ID.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> GetCurrentTimeEntryAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/time_entries/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// TimeEntries Lists latest time entries.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>List&lt;ModelsTimeEntry&gt;</returns>
        public List<ModelsTimeEntry> GetTimeEntries (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null)
        {
             ApiResponse<List<ModelsTimeEntry>> localVarResponse = GetTimeEntriesWithHttpInfo(since, before, startDate, endDate, meta, includeSharing);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TimeEntries Lists latest time entries.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntry&gt;</returns>
        public ApiResponse< List<ModelsTimeEntry> > GetTimeEntriesWithHttpInfo (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null)
        {

            var localVarPath = "/me/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (includeSharing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sharing", includeSharing)); // query parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (before != null) localVarFormParams.Add("before", this.Configuration.ApiClient.ParameterToString(before)); // form parameter
            if (startDate != null) localVarFormParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // form parameter
            if (endDate != null) localVarFormParams.Add("end_date", this.Configuration.ApiClient.ParameterToString(endDate)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntry>)));
        }

        /// <summary>
        /// TimeEntries Lists latest time entries.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of List&lt;ModelsTimeEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTimeEntry>> GetTimeEntriesAsync (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null)
        {
             ApiResponse<List<ModelsTimeEntry>> localVarResponse = await GetTimeEntriesAsyncWithHttpInfo(since, before, startDate, endDate, meta, includeSharing);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TimeEntries Lists latest time entries.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Get entries modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <param name="before">Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format. (optional)</param>
        /// <param name="startDate">Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date. (optional)</param>
        /// <param name="endDate">Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntry>>> GetTimeEntriesAsyncWithHttpInfo (int? since = null, string before = null, string startDate = null, string endDate = null, bool? meta = null, bool? includeSharing = null)
        {

            var localVarPath = "/me/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (includeSharing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sharing", includeSharing)); // query parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (before != null) localVarFormParams.Add("before", this.Configuration.ApiClient.ParameterToString(before)); // form parameter
            if (startDate != null) localVarFormParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // form parameter
            if (endDate != null) localVarFormParams.Add("end_date", this.Configuration.ApiClient.ParameterToString(endDate)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntry>)));
        }

        /// <summary>
        /// Get a time entry by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>ModelsTimeEntry</returns>
        public ModelsTimeEntry GetTimeEntryById (int? timeEntryId, bool? meta = null, bool? includeSharing = null)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = GetTimeEntryByIdWithHttpInfo(timeEntryId, meta, includeSharing);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a time entry by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        public ApiResponse< ModelsTimeEntry > GetTimeEntryByIdWithHttpInfo (int? timeEntryId, bool? meta = null, bool? includeSharing = null)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->GetTimeEntryById");

            var localVarPath = "/me/time_entries/{time_entry_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (includeSharing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sharing", includeSharing)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// Get a time entry by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntry> GetTimeEntryByIdAsync (int? timeEntryId, bool? meta = null, bool? includeSharing = null)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = await GetTimeEntryByIdAsyncWithHttpInfo(timeEntryId, meta, includeSharing);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a time entry by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Include sharing details in the response (optional)</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> GetTimeEntryByIdAsyncWithHttpInfo (int? timeEntryId, bool? meta = null, bool? includeSharing = null)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->GetTimeEntryById");

            var localVarPath = "/me/time_entries/{time_entry_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (includeSharing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sharing", includeSharing)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ModelsTimeEntryNotes</returns>
        public ModelsTimeEntryNotes GetTimeNotesEntryNotesById (int? timeEntryId)
        {
             ApiResponse<ModelsTimeEntryNotes> localVarResponse = GetTimeNotesEntryNotesByIdWithHttpInfo(timeEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of ModelsTimeEntryNotes</returns>
        public ApiResponse< ModelsTimeEntryNotes > GetTimeNotesEntryNotesByIdWithHttpInfo (int? timeEntryId)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->GetTimeNotesEntryNotesById");

            var localVarPath = "/me/time_entries/{time_entry_id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeNotesEntryNotesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntryNotes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntryNotes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntryNotes)));
        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ModelsTimeEntryNotes</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntryNotes> GetTimeNotesEntryNotesByIdAsync (int? timeEntryId)
        {
             ApiResponse<ModelsTimeEntryNotes> localVarResponse = await GetTimeNotesEntryNotesByIdAsyncWithHttpInfo(timeEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntryNotes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntryNotes>> GetTimeNotesEntryNotesByIdAsyncWithHttpInfo (int? timeEntryId)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->GetTimeNotesEntryNotesById");

            var localVarPath = "/me/time_entries/{time_entry_id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeNotesEntryNotesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntryNotes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntryNotes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntryNotes)));
        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>List&lt;ModelsTimeEntryNotes&gt;</returns>
        public List<ModelsTimeEntryNotes> GetTimeNotesEntryNotesById_0 (int? timeEntryId)
        {
             ApiResponse<List<ModelsTimeEntryNotes>> localVarResponse = GetTimeNotesEntryNotesById_0WithHttpInfo(timeEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntryNotes&gt;</returns>
        public ApiResponse< List<ModelsTimeEntryNotes> > GetTimeNotesEntryNotesById_0WithHttpInfo (int? timeEntryId)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->GetTimeNotesEntryNotesById_0");

            var localVarPath = "/me/time_entries/{time_entry_id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeNotesEntryNotesById_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntryNotes>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntryNotes>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntryNotes>)));
        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of List&lt;ModelsTimeEntryNotes&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTimeEntryNotes>> GetTimeNotesEntryNotesById_0Async (int? timeEntryId)
        {
             ApiResponse<List<ModelsTimeEntryNotes>> localVarResponse = await GetTimeNotesEntryNotesById_0AsyncWithHttpInfo(timeEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a time entries&#39; notes by ID. Load time entry by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntryNotes&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntryNotes>>> GetTimeNotesEntryNotesById_0AsyncWithHttpInfo (int? timeEntryId)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->GetTimeNotesEntryNotesById_0");

            var localVarPath = "/me/time_entries/{time_entry_id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeNotesEntryNotesById_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntryNotes>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntryNotes>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntryNotes>)));
        }

        /// <summary>
        /// TimeEntries Get invitations for time entries
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;</returns>
        public List<TimeentriesGetTimEntryInvitationsResponse> GetWorkspaceTimeEntryInvitations (int? workspaceId)
        {
             ApiResponse<List<TimeentriesGetTimEntryInvitationsResponse>> localVarResponse = GetWorkspaceTimeEntryInvitationsWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TimeEntries Get invitations for time entries
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;</returns>
        public ApiResponse< List<TimeentriesGetTimEntryInvitationsResponse> > GetWorkspaceTimeEntryInvitationsWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->GetWorkspaceTimeEntryInvitations");

            var localVarPath = "/workspaces/{workspace_id}/time_entry_invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimeEntryInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimeentriesGetTimEntryInvitationsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimeentriesGetTimEntryInvitationsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimeentriesGetTimEntryInvitationsResponse>)));
        }

        /// <summary>
        /// TimeEntries Get invitations for time entries
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimeentriesGetTimEntryInvitationsResponse>> GetWorkspaceTimeEntryInvitationsAsync (int? workspaceId)
        {
             ApiResponse<List<TimeentriesGetTimEntryInvitationsResponse>> localVarResponse = await GetWorkspaceTimeEntryInvitationsAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TimeEntries Get invitations for time entries
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;TimeentriesGetTimEntryInvitationsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimeentriesGetTimEntryInvitationsResponse>>> GetWorkspaceTimeEntryInvitationsAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->GetWorkspaceTimeEntryInvitations");

            var localVarPath = "/workspaces/{workspace_id}/time_entry_invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimeEntryInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimeentriesGetTimEntryInvitationsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimeentriesGetTimEntryInvitationsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimeentriesGetTimEntryInvitationsResponse>)));
        }

        /// <summary>
        /// Bulk editing time entries In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>TimeentryPatchOutput</returns>
        public TimeentryPatchOutput PatchTimeEntries (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null)
        {
             ApiResponse<TimeentryPatchOutput> localVarResponse = PatchTimeEntriesWithHttpInfo(workspaceId, timeEntryIds, patchInput, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk editing time entries In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of TimeentryPatchOutput</returns>
        public ApiResponse< TimeentryPatchOutput > PatchTimeEntriesWithHttpInfo (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PatchTimeEntries");
            // verify the required parameter 'timeEntryIds' is set
            if (timeEntryIds == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryIds' when calling TimeEntriesApi->PatchTimeEntries");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling TimeEntriesApi->PatchTimeEntries");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryIds != null) localVarPathParams.Add("time_entry_ids", this.Configuration.ApiClient.ParameterToString(timeEntryIds)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeentryPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimeentryPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeentryPatchOutput)));
        }

        /// <summary>
        /// Bulk editing time entries In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of TimeentryPatchOutput</returns>
        public async System.Threading.Tasks.Task<TimeentryPatchOutput> PatchTimeEntriesAsync (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null)
        {
             ApiResponse<TimeentryPatchOutput> localVarResponse = await PatchTimeEntriesAsyncWithHttpInfo(workspaceId, timeEntryIds, patchInput, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk editing time entries In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryIds">Numeric IDs of time_entries, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;. The limit is 100 IDs per request.</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (TimeentryPatchOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeentryPatchOutput>> PatchTimeEntriesAsyncWithHttpInfo (int? workspaceId, string timeEntryIds, TimeentriesPatchPost patchInput, bool? meta = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PatchTimeEntries");
            // verify the required parameter 'timeEntryIds' is set
            if (timeEntryIds == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryIds' when calling TimeEntriesApi->PatchTimeEntries");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling TimeEntriesApi->PatchTimeEntries");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryIds != null) localVarPathParams.Add("time_entry_ids", this.Configuration.ApiClient.ParameterToString(timeEntryIds)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeentryPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimeentryPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeentryPatchOutput)));
        }

        /// <summary>
        /// Stop TimeEntry Stops a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ModelsTimeEntry</returns>
        public ModelsTimeEntry PatchWorkspaceStopTimeEntryHandler (int? workspaceId, int? timeEntryId)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = PatchWorkspaceStopTimeEntryHandlerWithHttpInfo(workspaceId, timeEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop TimeEntry Stops a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        public ApiResponse< ModelsTimeEntry > PatchWorkspaceStopTimeEntryHandlerWithHttpInfo (int? workspaceId, int? timeEntryId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PatchWorkspaceStopTimeEntryHandler");
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->PatchWorkspaceStopTimeEntryHandler");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceStopTimeEntryHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// Stop TimeEntry Stops a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntry> PatchWorkspaceStopTimeEntryHandlerAsync (int? workspaceId, int? timeEntryId)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = await PatchWorkspaceStopTimeEntryHandlerAsyncWithHttpInfo(workspaceId, timeEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop TimeEntry Stops a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PatchWorkspaceStopTimeEntryHandlerAsyncWithHttpInfo (int? workspaceId, int? timeEntryId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PatchWorkspaceStopTimeEntryHandler");
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->PatchWorkspaceStopTimeEntryHandler");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceStopTimeEntryHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// TimeEntries Get the sharing details of the specified time entries in bulk
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>List&lt;TimeentriesBulkGetSharingResponse&gt;</returns>
        public List<TimeentriesBulkGetSharingResponse> PostMeTimeEntriesSharedWith (List<TimeentriesBulkGetSharingRequest> request)
        {
             ApiResponse<List<TimeentriesBulkGetSharingResponse>> localVarResponse = PostMeTimeEntriesSharedWithWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TimeEntries Get the sharing details of the specified time entries in bulk
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>ApiResponse of List&lt;TimeentriesBulkGetSharingResponse&gt;</returns>
        public ApiResponse< List<TimeentriesBulkGetSharingResponse> > PostMeTimeEntriesSharedWithWithHttpInfo (List<TimeentriesBulkGetSharingRequest> request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimeEntriesApi->PostMeTimeEntriesSharedWith");

            var localVarPath = "/me/time_entries_shared_with";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeTimeEntriesSharedWith", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimeentriesBulkGetSharingResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimeentriesBulkGetSharingResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimeentriesBulkGetSharingResponse>)));
        }

        /// <summary>
        /// TimeEntries Get the sharing details of the specified time entries in bulk
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>Task of List&lt;TimeentriesBulkGetSharingResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimeentriesBulkGetSharingResponse>> PostMeTimeEntriesSharedWithAsync (List<TimeentriesBulkGetSharingRequest> request)
        {
             ApiResponse<List<TimeentriesBulkGetSharingResponse>> localVarResponse = await PostMeTimeEntriesSharedWithAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TimeEntries Get the sharing details of the specified time entries in bulk
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">List of time entries to get the sharing details of.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeentriesBulkGetSharingResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimeentriesBulkGetSharingResponse>>> PostMeTimeEntriesSharedWithAsyncWithHttpInfo (List<TimeentriesBulkGetSharingRequest> request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimeEntriesApi->PostMeTimeEntriesSharedWith");

            var localVarPath = "/me/time_entries_shared_with";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeTimeEntriesSharedWith", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimeentriesBulkGetSharingResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimeentriesBulkGetSharingResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimeentriesBulkGetSharingResponse>)));
        }

        /// <summary>
        /// TimeEntries Creates a new workspace TimeEntry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ModelsTimeEntry</returns>
        public ModelsTimeEntry PostWorkspaceTimeEntries (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = PostWorkspaceTimeEntriesWithHttpInfo(workspaceId, workspaceTimeEntryPost, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TimeEntries Creates a new workspace TimeEntry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        public ApiResponse< ModelsTimeEntry > PostWorkspaceTimeEntriesWithHttpInfo (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PostWorkspaceTimeEntries");
            // verify the required parameter 'workspaceTimeEntryPost' is set
            if (workspaceTimeEntryPost == null)
                throw new ApiException(400, "Missing required parameter 'workspaceTimeEntryPost' when calling TimeEntriesApi->PostWorkspaceTimeEntries");

            var localVarPath = "/workspaces/{workspace_id}/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (workspaceTimeEntryPost != null && workspaceTimeEntryPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceTimeEntryPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceTimeEntryPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// TimeEntries Creates a new workspace TimeEntry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntry> PostWorkspaceTimeEntriesAsync (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = await PostWorkspaceTimeEntriesAsyncWithHttpInfo(workspaceId, workspaceTimeEntryPost, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TimeEntries Creates a new workspace TimeEntry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PostWorkspaceTimeEntriesAsyncWithHttpInfo (int? workspaceId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PostWorkspaceTimeEntries");
            // verify the required parameter 'workspaceTimeEntryPost' is set
            if (workspaceTimeEntryPost == null)
                throw new ApiException(400, "Missing required parameter 'workspaceTimeEntryPost' when calling TimeEntriesApi->PostWorkspaceTimeEntries");

            var localVarPath = "/workspaces/{workspace_id}/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (workspaceTimeEntryPost != null && workspaceTimeEntryPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceTimeEntryPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceTimeEntryPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// TimeEntries Accept or reject an invitation for a time entry
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>string</returns>
        public string PostWorkspaceTimeEntryInvitationAction (int? workspaceId, int? timeEntryInvitationId)
        {
             ApiResponse<string> localVarResponse = PostWorkspaceTimeEntryInvitationActionWithHttpInfo(workspaceId, timeEntryInvitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TimeEntries Accept or reject an invitation for a time entry
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostWorkspaceTimeEntryInvitationActionWithHttpInfo (int? workspaceId, int? timeEntryInvitationId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PostWorkspaceTimeEntryInvitationAction");
            // verify the required parameter 'timeEntryInvitationId' is set
            if (timeEntryInvitationId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryInvitationId' when calling TimeEntriesApi->PostWorkspaceTimeEntryInvitationAction");

            var localVarPath = "/workspaces/{workspace_id}/time_entry_invitations/{time_entry_invitation_id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryInvitationId != null) localVarPathParams.Add("time_entry_invitation_id", this.Configuration.ApiClient.ParameterToString(timeEntryInvitationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceTimeEntryInvitationAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// TimeEntries Accept or reject an invitation for a time entry
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostWorkspaceTimeEntryInvitationActionAsync (int? workspaceId, int? timeEntryInvitationId)
        {
             ApiResponse<string> localVarResponse = await PostWorkspaceTimeEntryInvitationActionAsyncWithHttpInfo(workspaceId, timeEntryInvitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TimeEntries Accept or reject an invitation for a time entry
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryInvitationId">Numeric ID of the time entry invitation</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostWorkspaceTimeEntryInvitationActionAsyncWithHttpInfo (int? workspaceId, int? timeEntryInvitationId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PostWorkspaceTimeEntryInvitationAction");
            // verify the required parameter 'timeEntryInvitationId' is set
            if (timeEntryInvitationId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryInvitationId' when calling TimeEntriesApi->PostWorkspaceTimeEntryInvitationAction");

            var localVarPath = "/workspaces/{workspace_id}/time_entry_invitations/{time_entry_invitation_id}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryInvitationId != null) localVarPathParams.Add("time_entry_invitation_id", this.Configuration.ApiClient.ParameterToString(timeEntryInvitationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceTimeEntryInvitationAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Put a time entry notes by ID. Load time entry notes by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ModelsTimeEntryNotes</returns>
        public ModelsTimeEntryNotes PutTimeEntryNotesById (int? timeEntryId)
        {
             ApiResponse<ModelsTimeEntryNotes> localVarResponse = PutTimeEntryNotesByIdWithHttpInfo(timeEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Put a time entry notes by ID. Load time entry notes by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>ApiResponse of ModelsTimeEntryNotes</returns>
        public ApiResponse< ModelsTimeEntryNotes > PutTimeEntryNotesByIdWithHttpInfo (int? timeEntryId)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->PutTimeEntryNotesById");

            var localVarPath = "/me/time_entries/{time_entry_id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTimeEntryNotesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntryNotes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntryNotes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntryNotes)));
        }

        /// <summary>
        /// Put a time entry notes by ID. Load time entry notes by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ModelsTimeEntryNotes</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntryNotes> PutTimeEntryNotesByIdAsync (int? timeEntryId)
        {
             ApiResponse<ModelsTimeEntryNotes> localVarResponse = await PutTimeEntryNotesByIdAsyncWithHttpInfo(timeEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Put a time entry notes by ID. Load time entry notes by ID that is accessible by the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntryNotes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntryNotes>> PutTimeEntryNotesByIdAsyncWithHttpInfo (int? timeEntryId)
        {
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->PutTimeEntryNotesById");

            var localVarPath = "/me/time_entries/{time_entry_id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTimeEntryNotesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntryNotes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntryNotes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntryNotes)));
        }

        /// <summary>
        /// TimeEntries Updates a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>ModelsTimeEntry</returns>
        public ModelsTimeEntry PutWorkspaceTimeEntryHandler (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = PutWorkspaceTimeEntryHandlerWithHttpInfo(workspaceId, timeEntryId, workspaceTimeEntryPost, meta, includeSharing);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TimeEntries Updates a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        public ApiResponse< ModelsTimeEntry > PutWorkspaceTimeEntryHandlerWithHttpInfo (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PutWorkspaceTimeEntryHandler");
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->PutWorkspaceTimeEntryHandler");
            // verify the required parameter 'workspaceTimeEntryPost' is set
            if (workspaceTimeEntryPost == null)
                throw new ApiException(400, "Missing required parameter 'workspaceTimeEntryPost' when calling TimeEntriesApi->PutWorkspaceTimeEntryHandler");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (includeSharing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sharing", includeSharing)); // query parameter
            if (workspaceTimeEntryPost != null && workspaceTimeEntryPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceTimeEntryPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceTimeEntryPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTimeEntryHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// TimeEntries Updates a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntry> PutWorkspaceTimeEntryHandlerAsync (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = await PutWorkspaceTimeEntryHandlerAsyncWithHttpInfo(workspaceId, timeEntryId, workspaceTimeEntryPost, meta, includeSharing);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TimeEntries Updates a workspace time entry.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="timeEntryId">TimeEntry ID.</param>
        /// <param name="workspaceTimeEntryPost">TimeEntry parameters.</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <param name="includeSharing">Should the response contain time entry sharing details (optional)</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PutWorkspaceTimeEntryHandlerAsyncWithHttpInfo (int? workspaceId, int? timeEntryId, TimeentryPayload workspaceTimeEntryPost, bool? meta = null, bool? includeSharing = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling TimeEntriesApi->PutWorkspaceTimeEntryHandler");
            // verify the required parameter 'timeEntryId' is set
            if (timeEntryId == null)
                throw new ApiException(400, "Missing required parameter 'timeEntryId' when calling TimeEntriesApi->PutWorkspaceTimeEntryHandler");
            // verify the required parameter 'workspaceTimeEntryPost' is set
            if (workspaceTimeEntryPost == null)
                throw new ApiException(400, "Missing required parameter 'workspaceTimeEntryPost' when calling TimeEntriesApi->PutWorkspaceTimeEntryHandler");

            var localVarPath = "/workspaces/{workspace_id}/time_entries/{time_entry_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (timeEntryId != null) localVarPathParams.Add("time_entry_id", this.Configuration.ApiClient.ParameterToString(timeEntryId)); // path parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (includeSharing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sharing", includeSharing)); // query parameter
            if (workspaceTimeEntryPost != null && workspaceTimeEntryPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceTimeEntryPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceTimeEntryPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTimeEntryHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

    }
}
