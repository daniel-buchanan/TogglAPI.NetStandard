/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archives client
        /// </summary>
        /// <remarks>
        /// Archives a workspace client and related projects. Only for premium workspaces.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> ArchiveClient (int? workspaceId, int? clientId);

        /// <summary>
        /// Archives client
        /// </summary>
        /// <remarks>
        /// Archives a workspace client and related projects. Only for premium workspaces.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> ArchiveClientWithHttpInfo (int? workspaceId, int? clientId);
        /// <summary>
        /// Delete client
        /// </summary>
        /// <remarks>
        /// Delete workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>decimal?</returns>
        decimal? DeleteWorkspaceClients (int? workspaceId, int? clientId);

        /// <summary>
        /// Delete client
        /// </summary>
        /// <remarks>
        /// Delete workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> DeleteWorkspaceClientsWithHttpInfo (int? workspaceId, int? clientId);
        /// <summary>
        /// Load client from ID
        /// </summary>
        /// <remarks>
        /// Load client from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ModelsClient</returns>
        ModelsClient GetWorkspaceClient (int? workspaceId, int? clientId);

        /// <summary>
        /// Load client from ID
        /// </summary>
        /// <remarks>
        /// Load client from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        ApiResponse<ModelsClient> GetWorkspaceClientWithHttpInfo (int? workspaceId, int? clientId);
        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// List clients from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>List&lt;ModelsClient&gt;</returns>
        List<ModelsClient> GetWorkspaceClients (int? workspaceId, string status = null, string name = null);

        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// List clients from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsClient&gt;</returns>
        ApiResponse<List<ModelsClient>> GetWorkspaceClientsWithHttpInfo (int? workspaceId, string status = null, string name = null);
        /// <summary>
        /// Create client
        /// </summary>
        /// <remarks>
        /// Create workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ModelsClient</returns>
        ModelsClient PostWorkspaceClients (int? workspaceId, ClientPayload postedClient);

        /// <summary>
        /// Create client
        /// </summary>
        /// <remarks>
        /// Create workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        ApiResponse<ModelsClient> PostWorkspaceClientsWithHttpInfo (int? workspaceId, ClientPayload postedClient);
        /// <summary>
        /// Change client
        /// </summary>
        /// <remarks>
        /// Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ModelsClient</returns>
        ModelsClient PutWorkspaceClients (int? workspaceId, int? clientId, ClientPayload postedClient);

        /// <summary>
        /// Change client
        /// </summary>
        /// <remarks>
        /// Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        ApiResponse<ModelsClient> PutWorkspaceClientsWithHttpInfo (int? workspaceId, int? clientId, ClientPayload postedClient);
        /// <summary>
        /// Restores client and related projects.
        /// </summary>
        /// <remarks>
        /// Restores client and all related or specified projects from the given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>ModelsClient</returns>
        ModelsClient RestoreClient (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null);

        /// <summary>
        /// Restores client and related projects.
        /// </summary>
        /// <remarks>
        /// Restores client and all related or specified projects from the given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        ApiResponse<ModelsClient> RestoreClientWithHttpInfo (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Archives client
        /// </summary>
        /// <remarks>
        /// Archives a workspace client and related projects. Only for premium workspaces.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> ArchiveClientAsync (int? workspaceId, int? clientId);

        /// <summary>
        /// Archives client
        /// </summary>
        /// <remarks>
        /// Archives a workspace client and related projects. Only for premium workspaces.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> ArchiveClientAsyncWithHttpInfo (int? workspaceId, int? clientId);
        /// <summary>
        /// Delete client
        /// </summary>
        /// <remarks>
        /// Delete workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> DeleteWorkspaceClientsAsync (int? workspaceId, int? clientId);

        /// <summary>
        /// Delete client
        /// </summary>
        /// <remarks>
        /// Delete workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> DeleteWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, int? clientId);
        /// <summary>
        /// Load client from ID
        /// </summary>
        /// <remarks>
        /// Load client from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ModelsClient</returns>
        System.Threading.Tasks.Task<ModelsClient> GetWorkspaceClientAsync (int? workspaceId, int? clientId);

        /// <summary>
        /// Load client from ID
        /// </summary>
        /// <remarks>
        /// Load client from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsClient>> GetWorkspaceClientAsyncWithHttpInfo (int? workspaceId, int? clientId);
        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// List clients from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>Task of List&lt;ModelsClient&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsClient>> GetWorkspaceClientsAsync (int? workspaceId, string status = null, string name = null);

        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// List clients from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsClient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsClient>>> GetWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, string status = null, string name = null);
        /// <summary>
        /// Create client
        /// </summary>
        /// <remarks>
        /// Create workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ModelsClient</returns>
        System.Threading.Tasks.Task<ModelsClient> PostWorkspaceClientsAsync (int? workspaceId, ClientPayload postedClient);

        /// <summary>
        /// Create client
        /// </summary>
        /// <remarks>
        /// Create workspace client.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsClient>> PostWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, ClientPayload postedClient);
        /// <summary>
        /// Change client
        /// </summary>
        /// <remarks>
        /// Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ModelsClient</returns>
        System.Threading.Tasks.Task<ModelsClient> PutWorkspaceClientsAsync (int? workspaceId, int? clientId, ClientPayload postedClient);

        /// <summary>
        /// Change client
        /// </summary>
        /// <remarks>
        /// Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsClient>> PutWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, int? clientId, ClientPayload postedClient);
        /// <summary>
        /// Restores client and related projects.
        /// </summary>
        /// <remarks>
        /// Restores client and all related or specified projects from the given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>Task of ModelsClient</returns>
        System.Threading.Tasks.Task<ModelsClient> RestoreClientAsync (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null);

        /// <summary>
        /// Restores client and related projects.
        /// </summary>
        /// <remarks>
        /// Restores client and all related or specified projects from the given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsClient>> RestoreClientAsyncWithHttpInfo (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientsApi : IClientsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Archives client Archives a workspace client and related projects. Only for premium workspaces.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> ArchiveClient (int? workspaceId, int? clientId)
        {
             ApiResponse<List<int?>> localVarResponse = ArchiveClientWithHttpInfo(workspaceId, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archives client Archives a workspace client and related projects. Only for premium workspaces.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > ArchiveClientWithHttpInfo (int? workspaceId, int? clientId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->ArchiveClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->ArchiveClient");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Archives client Archives a workspace client and related projects. Only for premium workspaces.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> ArchiveClientAsync (int? workspaceId, int? clientId)
        {
             ApiResponse<List<int?>> localVarResponse = await ArchiveClientAsyncWithHttpInfo(workspaceId, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archives client Archives a workspace client and related projects. Only for premium workspaces.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> ArchiveClientAsyncWithHttpInfo (int? workspaceId, int? clientId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->ArchiveClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->ArchiveClient");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Delete client Delete workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>decimal?</returns>
        public decimal? DeleteWorkspaceClients (int? workspaceId, int? clientId)
        {
             ApiResponse<decimal?> localVarResponse = DeleteWorkspaceClientsWithHttpInfo(workspaceId, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete client Delete workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > DeleteWorkspaceClientsWithHttpInfo (int? workspaceId, int? clientId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->DeleteWorkspaceClients");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->DeleteWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Delete client Delete workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> DeleteWorkspaceClientsAsync (int? workspaceId, int? clientId)
        {
             ApiResponse<decimal?> localVarResponse = await DeleteWorkspaceClientsAsyncWithHttpInfo(workspaceId, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete client Delete workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> DeleteWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, int? clientId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->DeleteWorkspaceClients");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->DeleteWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Load client from ID Load client from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ModelsClient</returns>
        public ModelsClient GetWorkspaceClient (int? workspaceId, int? clientId)
        {
             ApiResponse<ModelsClient> localVarResponse = GetWorkspaceClientWithHttpInfo(workspaceId, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load client from ID Load client from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        public ApiResponse< ModelsClient > GetWorkspaceClientWithHttpInfo (int? workspaceId, int? clientId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->GetWorkspaceClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->GetWorkspaceClient");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

        /// <summary>
        /// Load client from ID Load client from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ModelsClient</returns>
        public async System.Threading.Tasks.Task<ModelsClient> GetWorkspaceClientAsync (int? workspaceId, int? clientId)
        {
             ApiResponse<ModelsClient> localVarResponse = await GetWorkspaceClientAsyncWithHttpInfo(workspaceId, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load client from ID Load client from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsClient>> GetWorkspaceClientAsyncWithHttpInfo (int? workspaceId, int? clientId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->GetWorkspaceClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->GetWorkspaceClient");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

        /// <summary>
        /// List clients List clients from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>List&lt;ModelsClient&gt;</returns>
        public List<ModelsClient> GetWorkspaceClients (int? workspaceId, string status = null, string name = null)
        {
             ApiResponse<List<ModelsClient>> localVarResponse = GetWorkspaceClientsWithHttpInfo(workspaceId, status, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List clients List clients from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsClient&gt;</returns>
        public ApiResponse< List<ModelsClient> > GetWorkspaceClientsWithHttpInfo (int? workspaceId, string status = null, string name = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->GetWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsClient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsClient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsClient>)));
        }

        /// <summary>
        /// List clients List clients from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>Task of List&lt;ModelsClient&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsClient>> GetWorkspaceClientsAsync (int? workspaceId, string status = null, string name = null)
        {
             ApiResponse<List<ModelsClient>> localVarResponse = await GetWorkspaceClientsAsyncWithHttpInfo(workspaceId, status, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List clients List clients from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="status">Use &#39;active&#39; to only list active clients, &#39;archived&#39; to only list archived clients and &#39;both&#39; to retrieve active and archived clients. If not provided, only active clients are returned. (optional)</param>
        /// <param name="name">If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsClient&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsClient>>> GetWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, string status = null, string name = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->GetWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsClient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsClient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsClient>)));
        }

        /// <summary>
        /// Create client Create workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ModelsClient</returns>
        public ModelsClient PostWorkspaceClients (int? workspaceId, ClientPayload postedClient)
        {
             ApiResponse<ModelsClient> localVarResponse = PostWorkspaceClientsWithHttpInfo(workspaceId, postedClient);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create client Create workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        public ApiResponse< ModelsClient > PostWorkspaceClientsWithHttpInfo (int? workspaceId, ClientPayload postedClient)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->PostWorkspaceClients");
            // verify the required parameter 'postedClient' is set
            if (postedClient == null)
                throw new ApiException(400, "Missing required parameter 'postedClient' when calling ClientsApi->PostWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postedClient != null && postedClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postedClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postedClient; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

        /// <summary>
        /// Create client Create workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ModelsClient</returns>
        public async System.Threading.Tasks.Task<ModelsClient> PostWorkspaceClientsAsync (int? workspaceId, ClientPayload postedClient)
        {
             ApiResponse<ModelsClient> localVarResponse = await PostWorkspaceClientsAsyncWithHttpInfo(workspaceId, postedClient);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create client Create workspace client.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsClient>> PostWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, ClientPayload postedClient)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->PostWorkspaceClients");
            // verify the required parameter 'postedClient' is set
            if (postedClient == null)
                throw new ApiException(400, "Missing required parameter 'postedClient' when calling ClientsApi->PostWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postedClient != null && postedClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postedClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postedClient; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

        /// <summary>
        /// Change client Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ModelsClient</returns>
        public ModelsClient PutWorkspaceClients (int? workspaceId, int? clientId, ClientPayload postedClient)
        {
             ApiResponse<ModelsClient> localVarResponse = PutWorkspaceClientsWithHttpInfo(workspaceId, clientId, postedClient);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change client Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        public ApiResponse< ModelsClient > PutWorkspaceClientsWithHttpInfo (int? workspaceId, int? clientId, ClientPayload postedClient)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->PutWorkspaceClients");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->PutWorkspaceClients");
            // verify the required parameter 'postedClient' is set
            if (postedClient == null)
                throw new ApiException(400, "Missing required parameter 'postedClient' when calling ClientsApi->PutWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (postedClient != null && postedClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postedClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postedClient; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

        /// <summary>
        /// Change client Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ModelsClient</returns>
        public async System.Threading.Tasks.Task<ModelsClient> PutWorkspaceClientsAsync (int? workspaceId, int? clientId, ClientPayload postedClient)
        {
             ApiResponse<ModelsClient> localVarResponse = await PutWorkspaceClientsAsyncWithHttpInfo(workspaceId, clientId, postedClient);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change client Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="postedClient">Client</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsClient>> PutWorkspaceClientsAsyncWithHttpInfo (int? workspaceId, int? clientId, ClientPayload postedClient)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->PutWorkspaceClients");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->PutWorkspaceClients");
            // verify the required parameter 'postedClient' is set
            if (postedClient == null)
                throw new ApiException(400, "Missing required parameter 'postedClient' when calling ClientsApi->PutWorkspaceClients");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (postedClient != null && postedClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postedClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postedClient; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

        /// <summary>
        /// Restores client and related projects. Restores client and all related or specified projects from the given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>ModelsClient</returns>
        public ModelsClient RestoreClient (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null)
        {
             ApiResponse<ModelsClient> localVarResponse = RestoreClientWithHttpInfo(workspaceId, clientId, restoreParams);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restores client and related projects. Restores client and all related or specified projects from the given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>ApiResponse of ModelsClient</returns>
        public ApiResponse< ModelsClient > RestoreClientWithHttpInfo (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->RestoreClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->RestoreClient");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (restoreParams != null && restoreParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(restoreParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = restoreParams; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

        /// <summary>
        /// Restores client and related projects. Restores client and all related or specified projects from the given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>Task of ModelsClient</returns>
        public async System.Threading.Tasks.Task<ModelsClient> RestoreClientAsync (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null)
        {
             ApiResponse<ModelsClient> localVarResponse = await RestoreClientAsyncWithHttpInfo(workspaceId, clientId, restoreParams);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restores client and related projects. Restores client and all related or specified projects from the given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="restoreParams">Specify which projects should be restored with the client (optional)</param>
        /// <returns>Task of ApiResponse (ModelsClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsClient>> RestoreClientAsyncWithHttpInfo (int? workspaceId, int? clientId, ProjectRestoreParams restoreParams = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ClientsApi->RestoreClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientsApi->RestoreClient");

            var localVarPath = "/workspaces/{workspace_id}/clients/{client_id}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (restoreParams != null && restoreParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(restoreParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = restoreParams; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsClient)));
        }

    }
}
