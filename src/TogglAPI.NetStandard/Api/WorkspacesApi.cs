/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspacesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles DELETE alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string DeleteAlerts ();

        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles DELETE alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteAlertsWithHttpInfo ();
        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>string</returns>
        string DeleteTimesheetSetups (int? workspaceId, int? setupId);

        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId);
        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Deletes a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>string</returns>
        string DeleteWorkspaceTrackReminder (int? workspaceId, int? reminderId);

        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Deletes a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteWorkspaceTrackReminderWithHttpInfo (int? workspaceId, int? reminderId);
        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns></returns>
        void DeleteWorkspaceUser (int? workspaceId, int? workspaceUserId);

        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkspaceUserWithHttpInfo (int? workspaceId, int? workspaceUserId);
        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        List<GroupOrganizationGroupResponse> GetOrganizationWorkspacesGroups (int? organizationId, int? workspaceId);

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        ApiResponse<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsWithHttpInfo (int? organizationId, int? workspaceId);
        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, ModelsStatistics&gt;</returns>
        Dictionary<string, ModelsStatistics> GetOrganizationWorkspacesStatistics ();

        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        ApiResponse<Dictionary<string, ModelsStatistics>> GetOrganizationWorkspacesStatisticsWithHttpInfo ();
        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        List<ModelsOrganizationWorkspaceUser> GetOrganizationWorkspacesWorkspaceusers (int? organizationId, int? workspaceId, string name);

        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>ApiResponse of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        ApiResponse<List<ModelsOrganizationWorkspaceUser>> GetOrganizationWorkspacesWorkspaceusersWithHttpInfo (int? organizationId, int? workspaceId, string name);
        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>TimesheetsetupsGetPaginatedResponse</returns>
        TimesheetsetupsGetPaginatedResponse GetTimesheetSetups (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of TimesheetsetupsGetPaginatedResponse</returns>
        ApiResponse<TimesheetsetupsGetPaginatedResponse> GetTimesheetSetupsWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// Get single workspace
        /// </summary>
        /// <remarks>
        /// Get information of single workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>WorkspaceWorkspace</returns>
        WorkspaceWorkspace GetWorkspace (int? workspaceId);

        /// <summary>
        /// Get single workspace
        /// </summary>
        /// <remarks>
        /// Get information of single workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        ApiResponse<WorkspaceWorkspace> GetWorkspaceWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Workspace statistics
        /// </summary>
        /// <remarks>
        /// Returns workspace admins list, members count and groups count
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelsStatistics</returns>
        ModelsStatistics GetWorkspaceStatistics ();

        /// <summary>
        /// Workspace statistics
        /// </summary>
        /// <remarks>
        /// Returns workspace admins list, members count and groups count
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelsStatistics</returns>
        ApiResponse<ModelsStatistics> GetWorkspaceStatisticsWithHttpInfo ();
        /// <summary>
        /// Get workspace time entry constraints
        /// </summary>
        /// <remarks>
        /// Get the time entry constraints for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ModelsTimeEntryConstraints</returns>
        ModelsTimeEntryConstraints GetWorkspaceTimeEntryConstraints (int? workspaceId);

        /// <summary>
        /// Get workspace time entry constraints
        /// </summary>
        /// <remarks>
        /// Get the time entry constraints for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of ModelsTimeEntryConstraints</returns>
        ApiResponse<ModelsTimeEntryConstraints> GetWorkspaceTimeEntryConstraintsWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        List<TimesheetsTimesheetHoursResponse> GetWorkspaceTimesheetHoursHandler (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);

        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        ApiResponse<List<TimesheetsTimesheetHoursResponse>> GetWorkspaceTimesheetHoursHandlerWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);
        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>List&lt;ModelsTimeEntry&gt;</returns>
        List<ModelsTimeEntry> GetWorkspaceTimesheetTimeEntriesHandler (int? workspaceId, int? setupId, string startDate);

        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntry&gt;</returns>
        ApiResponse<List<ModelsTimeEntry>> GetWorkspaceTimesheetTimeEntriesHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate);
        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        List<TimesheetsGetPaginatedResponse> GetWorkspaceTimesheetsHandler (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        ApiResponse<List<TimesheetsGetPaginatedResponse>> GetWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsTrackReminder&gt;</returns>
        List<ModelsTrackReminder> GetWorkspaceTrackReminders (int? workspaceId);

        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsTrackReminder&gt;</returns>
        ApiResponse<List<ModelsTrackReminder>> GetWorkspaceTrackRemindersWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        List<ModelsSimpleWorkspaceUser> GetWorkspaceUsers (int? workspaceId, bool? excludeDeleted = null);

        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        ApiResponse<List<ModelsSimpleWorkspaceUser>> GetWorkspaceUsersWithHttpInfo (int? workspaceId, bool? excludeDeleted = null);
        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        List<WorkspaceWithActiveProjectCount> GetWorkspaces (int? since = null);

        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        ApiResponse<List<WorkspaceWithActiveProjectCount>> GetWorkspacesWithHttpInfo (int? since = null);
        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        string PatchOrganizationWorkspaceUsers (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);

        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PatchOrganizationWorkspaceUsersWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);
        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles POST alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>ModelsAlert</returns>
        ModelsAlert PostAlerts (object request);

        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles POST alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>ApiResponse of ModelsAlert</returns>
        ApiResponse<ModelsAlert> PostAlertsWithHttpInfo (object request);
        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>WorkspaceWorkspace</returns>
        WorkspaceWorkspace PostOrganizationWorkspaces (int? organizationId, WorkspacePayload post);

        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        ApiResponse<WorkspaceWorkspace> PostOrganizationWorkspacesWithHttpInfo (int? organizationId, WorkspacePayload post);
        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        List<TimesheetsetupsAPITimesheetSetup> PostTimesheetSetups (int? workspaceId, TimesheetsetupsCreatePayload payload);

        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        ApiResponse<List<TimesheetsetupsAPITimesheetSetup>> PostTimesheetSetupsWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload);
        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Creates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ModelsTrackReminder</returns>
        ModelsTrackReminder PostWorkspaceTrackReminders (int? workspaceId, RemindersPayload trackReminderPost);

        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Creates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ApiResponse of ModelsTrackReminder</returns>
        ApiResponse<ModelsTrackReminder> PostWorkspaceTrackRemindersWithHttpInfo (int? workspaceId, RemindersPayload trackReminderPost);
        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>UsersLostPasswordURL</returns>
        UsersLostPasswordURL PostWorkspaceUsersLostPassword (int? workspaceId, int? userId);

        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of UsersLostPasswordURL</returns>
        ApiResponse<UsersLostPasswordURL> PostWorkspaceUsersLostPasswordWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>TimesheetsetupsAPITimesheetSetup</returns>
        TimesheetsetupsAPITimesheetSetup PutTimesheetSetups (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);

        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>ApiResponse of TimesheetsetupsAPITimesheetSetup</returns>
        ApiResponse<TimesheetsetupsAPITimesheetSetup> PutTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);
        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>TimesheetsAPITimesheet</returns>
        TimesheetsAPITimesheet PutWorkspaceTimesheetsHandler (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);

        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>ApiResponse of TimesheetsAPITimesheet</returns>
        ApiResponse<TimesheetsAPITimesheet> PutWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);
        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Updates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ModelsTrackReminder</returns>
        ModelsTrackReminder PutWorkspaceTrackReminder (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost);

        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Updates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ApiResponse of ModelsTrackReminder</returns>
        ApiResponse<ModelsTrackReminder> PutWorkspaceTrackReminderWithHttpInfo (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost);
        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>string</returns>
        string PutWorkspaceUsers (int? workspaceId, int? userId);

        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutWorkspaceUsersWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>string</returns>
        string PutWorkspaceWorkspaceUsers (int? workspaceId, int? workspaceUserId, UserPayload post);

        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutWorkspaceWorkspaceUsersWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post);
        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update a specific workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>WorkspaceWorkspace</returns>
        WorkspaceWorkspace PutWorkspaces (int? workspaceId, WorkspacePayload post);

        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update a specific workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        ApiResponse<WorkspaceWorkspace> PutWorkspacesWithHttpInfo (int? workspaceId, WorkspacePayload post);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles DELETE alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteAlertsAsync ();

        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles DELETE alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteAlertsAsyncWithHttpInfo ();
        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteTimesheetSetupsAsync (int? workspaceId, int? setupId);

        /// <summary>
        /// Delete a timesheet setup
        /// </summary>
        /// <remarks>
        /// Delete a timesheet setup for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId);
        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Deletes a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteWorkspaceTrackReminderAsync (int? workspaceId, int? reminderId);

        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Deletes a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceTrackReminderAsyncWithHttpInfo (int? workspaceId, int? reminderId);
        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkspaceUserAsync (int? workspaceId, int? workspaceUserId);

        /// <summary>
        /// Delete workspace user
        /// </summary>
        /// <remarks>
        /// Removes user from workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkspaceUserAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId);
        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsAsync (int? organizationId, int? workspaceId);

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationWorkspacesGroupsAsyncWithHttpInfo (int? organizationId, int? workspaceId);
        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, ModelsStatistics>> GetOrganizationWorkspacesStatisticsAsync ();

        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ModelsStatistics&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ModelsStatistics>>> GetOrganizationWorkspacesStatisticsAsyncWithHttpInfo ();
        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsOrganizationWorkspaceUser>> GetOrganizationWorkspacesWorkspaceusersAsync (int? organizationId, int? workspaceId, string name);

        /// <summary>
        /// List of users who belong to the given workspace.
        /// </summary>
        /// <remarks>
        /// Returns any users who belong to the workspace directly or through at least one group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrganizationWorkspaceUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsOrganizationWorkspaceUser>>> GetOrganizationWorkspacesWorkspaceusersAsyncWithHttpInfo (int? organizationId, int? workspaceId, string name);
        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of TimesheetsetupsGetPaginatedResponse</returns>
        System.Threading.Tasks.Task<TimesheetsetupsGetPaginatedResponse> GetTimesheetSetupsAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheet setups
        /// </summary>
        /// <remarks>
        /// Get timesheet setups for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsGetPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsGetPaginatedResponse>> GetTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// Get single workspace
        /// </summary>
        /// <remarks>
        /// Get information of single workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        System.Threading.Tasks.Task<WorkspaceWorkspace> GetWorkspaceAsync (int? workspaceId);

        /// <summary>
        /// Get single workspace
        /// </summary>
        /// <remarks>
        /// Get information of single workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> GetWorkspaceAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Workspace statistics
        /// </summary>
        /// <remarks>
        /// Returns workspace admins list, members count and groups count
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelsStatistics</returns>
        System.Threading.Tasks.Task<ModelsStatistics> GetWorkspaceStatisticsAsync ();

        /// <summary>
        /// Workspace statistics
        /// </summary>
        /// <remarks>
        /// Returns workspace admins list, members count and groups count
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelsStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsStatistics>> GetWorkspaceStatisticsAsyncWithHttpInfo ();
        /// <summary>
        /// Get workspace time entry constraints
        /// </summary>
        /// <remarks>
        /// Get the time entry constraints for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ModelsTimeEntryConstraints</returns>
        System.Threading.Tasks.Task<ModelsTimeEntryConstraints> GetWorkspaceTimeEntryConstraintsAsync (int? workspaceId);

        /// <summary>
        /// Get workspace time entry constraints
        /// </summary>
        /// <remarks>
        /// Get the time entry constraints for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntryConstraints)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntryConstraints>> GetWorkspaceTimeEntryConstraintsAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TimesheetsTimesheetHoursResponse>> GetWorkspaceTimesheetHoursHandlerAsync (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);

        /// <summary>
        /// Get timesheets hours
        /// </summary>
        /// <remarks>
        /// Get timesheet working hours and total tracked seconds.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsTimesheetHoursResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimesheetsTimesheetHoursResponse>>> GetWorkspaceTimesheetHoursHandlerAsyncWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload);
        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of List&lt;ModelsTimeEntry&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTimeEntry>> GetWorkspaceTimesheetTimeEntriesHandlerAsync (int? workspaceId, int? setupId, string startDate);

        /// <summary>
        /// Get timesheet time entries
        /// </summary>
        /// <remarks>
        /// Get the time entries from within a timesheet timeframe.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntry>>> GetWorkspaceTimesheetTimeEntriesHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate);
        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TimesheetsGetPaginatedResponse>> GetWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);

        /// <summary>
        /// Get timesheets
        /// </summary>
        /// <remarks>
        /// Get timesheets applying various filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsGetPaginatedResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimesheetsGetPaginatedResponse>>> GetWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null);
        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsTrackReminder&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTrackReminder>> GetWorkspaceTrackRemindersAsync (int? workspaceId);

        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTrackReminder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTrackReminder>>> GetWorkspaceTrackRemindersAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsSimpleWorkspaceUser>> GetWorkspaceUsersAsync (int? workspaceId, bool? excludeDeleted = null);

        /// <summary>
        /// Get workspace users
        /// </summary>
        /// <remarks>
        /// List all users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSimpleWorkspaceUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsSimpleWorkspaceUser>>> GetWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, bool? excludeDeleted = null);
        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        System.Threading.Tasks.Task<List<WorkspaceWithActiveProjectCount>> GetWorkspacesAsync (int? since = null);

        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkspaceWithActiveProjectCount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkspaceWithActiveProjectCount>>> GetWorkspacesAsyncWithHttpInfo (int? since = null);
        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PatchOrganizationWorkspaceUsersAsync (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);

        /// <summary>
        /// Changes the users in a workspace.
        /// </summary>
        /// <remarks>
        /// Changes the users in a workspace (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationWorkspaceUsersAsyncWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params);
        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles POST alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>Task of ModelsAlert</returns>
        System.Threading.Tasks.Task<ModelsAlert> PostAlertsAsync (object request);

        /// <summary>
        /// Alerts
        /// </summary>
        /// <remarks>
        /// Handles POST alert requests.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>Task of ApiResponse (ModelsAlert)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsAlert>> PostAlertsAsyncWithHttpInfo (object request);
        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        System.Threading.Tasks.Task<WorkspaceWorkspace> PostOrganizationWorkspacesAsync (int? organizationId, WorkspacePayload post);

        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> PostOrganizationWorkspacesAsyncWithHttpInfo (int? organizationId, WorkspacePayload post);
        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        System.Threading.Tasks.Task<List<TimesheetsetupsAPITimesheetSetup>> PostTimesheetSetupsAsync (int? workspaceId, TimesheetsetupsCreatePayload payload);

        /// <summary>
        /// Create a timesheet setup
        /// </summary>
        /// <remarks>
        /// Create timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsetupsAPITimesheetSetup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>> PostTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload);
        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Creates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ModelsTrackReminder</returns>
        System.Threading.Tasks.Task<ModelsTrackReminder> PostWorkspaceTrackRemindersAsync (int? workspaceId, RemindersPayload trackReminderPost);

        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Creates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ApiResponse (ModelsTrackReminder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTrackReminder>> PostWorkspaceTrackRemindersAsyncWithHttpInfo (int? workspaceId, RemindersPayload trackReminderPost);
        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of UsersLostPasswordURL</returns>
        System.Threading.Tasks.Task<UsersLostPasswordURL> PostWorkspaceUsersLostPasswordAsync (int? workspaceId, int? userId);

        /// <summary>
        /// Change a lost password
        /// </summary>
        /// <remarks>
        /// Request a change password action
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (UsersLostPasswordURL)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersLostPasswordURL>> PostWorkspaceUsersLostPasswordAsyncWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of TimesheetsetupsAPITimesheetSetup</returns>
        System.Threading.Tasks.Task<TimesheetsetupsAPITimesheetSetup> PutTimesheetSetupsAsync (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);

        /// <summary>
        /// Update a timesheet setup
        /// </summary>
        /// <remarks>
        /// Updates a timesheet setups.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsAPITimesheetSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsAPITimesheetSetup>> PutTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload);
        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of TimesheetsAPITimesheet</returns>
        System.Threading.Tasks.Task<TimesheetsAPITimesheet> PutWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);

        /// <summary>
        /// Update timesheets
        /// </summary>
        /// <remarks>
        /// Updates a timesheet.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of ApiResponse (TimesheetsAPITimesheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetsAPITimesheet>> PutWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload);
        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Updates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ModelsTrackReminder</returns>
        System.Threading.Tasks.Task<ModelsTrackReminder> PutWorkspaceTrackReminderAsync (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost);

        /// <summary>
        /// TrackReminder
        /// </summary>
        /// <remarks>
        /// Updates a workspace tracking reminder.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ApiResponse (ModelsTrackReminder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTrackReminder>> PutWorkspaceTrackReminderAsyncWithHttpInfo (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost);
        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutWorkspaceUsersAsync (int? workspaceId, int? userId);

        /// <summary>
        /// Update workspace user
        /// </summary>
        /// <remarks>
        /// Update the data for a user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? userId);
        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutWorkspaceWorkspaceUsersAsync (int? workspaceId, int? workspaceUserId, UserPayload post);

        /// <summary>
        /// Update workspace-user
        /// </summary>
        /// <remarks>
        /// Update the data for a workspace_user in a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post);
        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update a specific workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        System.Threading.Tasks.Task<WorkspaceWorkspace> PutWorkspacesAsync (int? workspaceId, WorkspacePayload post);

        /// <summary>
        /// Update workspace
        /// </summary>
        /// <remarks>
        /// Update a specific workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> PutWorkspacesAsyncWithHttpInfo (int? workspaceId, WorkspacePayload post);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkspacesApi : IWorkspacesApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspacesApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkspacesApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Alerts Handles DELETE alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string DeleteAlerts ()
        {
             ApiResponse<string> localVarResponse = DeleteAlertsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alerts Handles DELETE alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteAlertsWithHttpInfo ()
        {

            var localVarPath = "/workspaces/{workspace_id}/alerts/{alert_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Alerts Handles DELETE alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteAlertsAsync ()
        {
             ApiResponse<string> localVarResponse = await DeleteAlertsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alerts Handles DELETE alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteAlertsAsyncWithHttpInfo ()
        {

            var localVarPath = "/workspaces/{workspace_id}/alerts/{alert_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>string</returns>
        public string DeleteTimesheetSetups (int? workspaceId, int? setupId)
        {
             ApiResponse<string> localVarResponse = DeleteTimesheetSetupsWithHttpInfo(workspaceId, setupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->DeleteTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->DeleteTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteTimesheetSetupsAsync (int? workspaceId, int? setupId)
        {
             ApiResponse<string> localVarResponse = await DeleteTimesheetSetupsAsyncWithHttpInfo(workspaceId, setupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a timesheet setup Delete a timesheet setup for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->DeleteTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->DeleteTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// TrackReminder Deletes a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>string</returns>
        public string DeleteWorkspaceTrackReminder (int? workspaceId, int? reminderId)
        {
             ApiResponse<string> localVarResponse = DeleteWorkspaceTrackReminderWithHttpInfo(workspaceId, reminderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TrackReminder Deletes a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteWorkspaceTrackReminderWithHttpInfo (int? workspaceId, int? reminderId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->DeleteWorkspaceTrackReminder");
            // verify the required parameter 'reminderId' is set
            if (reminderId == null)
                throw new ApiException(400, "Missing required parameter 'reminderId' when calling WorkspacesApi->DeleteWorkspaceTrackReminder");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders/{reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reminderId != null) localVarPathParams.Add("reminder_id", this.Configuration.ApiClient.ParameterToString(reminderId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceTrackReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// TrackReminder Deletes a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteWorkspaceTrackReminderAsync (int? workspaceId, int? reminderId)
        {
             ApiResponse<string> localVarResponse = await DeleteWorkspaceTrackReminderAsyncWithHttpInfo(workspaceId, reminderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TrackReminder Deletes a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteWorkspaceTrackReminderAsyncWithHttpInfo (int? workspaceId, int? reminderId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->DeleteWorkspaceTrackReminder");
            // verify the required parameter 'reminderId' is set
            if (reminderId == null)
                throw new ApiException(400, "Missing required parameter 'reminderId' when calling WorkspacesApi->DeleteWorkspaceTrackReminder");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders/{reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reminderId != null) localVarPathParams.Add("reminder_id", this.Configuration.ApiClient.ParameterToString(reminderId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceTrackReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns></returns>
        public void DeleteWorkspaceUser (int? workspaceId, int? workspaceUserId)
        {
             DeleteWorkspaceUserWithHttpInfo(workspaceId, workspaceUserId);
        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorkspaceUserWithHttpInfo (int? workspaceId, int? workspaceUserId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->DeleteWorkspaceUser");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling WorkspacesApi->DeleteWorkspaceUser");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkspaceUserAsync (int? workspaceId, int? workspaceUserId)
        {
             await DeleteWorkspaceUserAsyncWithHttpInfo(workspaceId, workspaceUserId);

        }

        /// <summary>
        /// Delete workspace user Removes user from workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkspaceUserAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->DeleteWorkspaceUser");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling WorkspacesApi->DeleteWorkspaceUser");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public List<GroupOrganizationGroupResponse> GetOrganizationWorkspacesGroups (int? organizationId, int? workspaceId)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = GetOrganizationWorkspacesGroupsWithHttpInfo(organizationId, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public ApiResponse< List<GroupOrganizationGroupResponse> > GetOrganizationWorkspacesGroupsWithHttpInfo (int? organizationId, int? workspaceId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->GetOrganizationWorkspacesGroups");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetOrganizationWorkspacesGroups");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsAsync (int? organizationId, int? workspaceId)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = await GetOrganizationWorkspacesGroupsAsyncWithHttpInfo(organizationId, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationWorkspacesGroupsAsyncWithHttpInfo (int? organizationId, int? workspaceId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->GetOrganizationWorkspacesGroups");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetOrganizationWorkspacesGroups");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, ModelsStatistics&gt;</returns>
        public Dictionary<string, ModelsStatistics> GetOrganizationWorkspacesStatistics ()
        {
             ApiResponse<Dictionary<string, ModelsStatistics>> localVarResponse = GetOrganizationWorkspacesStatisticsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        public ApiResponse< Dictionary<string, ModelsStatistics> > GetOrganizationWorkspacesStatisticsWithHttpInfo ()
        {

            var localVarPath = "/organizations/{organization_id}/workspaces/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, ModelsStatistics>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, ModelsStatistics>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, ModelsStatistics>)));
        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, ModelsStatistics>> GetOrganizationWorkspacesStatisticsAsync ()
        {
             ApiResponse<Dictionary<string, ModelsStatistics>> localVarResponse = await GetOrganizationWorkspacesStatisticsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ModelsStatistics&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ModelsStatistics>>> GetOrganizationWorkspacesStatisticsAsyncWithHttpInfo ()
        {

            var localVarPath = "/organizations/{organization_id}/workspaces/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, ModelsStatistics>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, ModelsStatistics>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, ModelsStatistics>)));
        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        public List<ModelsOrganizationWorkspaceUser> GetOrganizationWorkspacesWorkspaceusers (int? organizationId, int? workspaceId, string name)
        {
             ApiResponse<List<ModelsOrganizationWorkspaceUser>> localVarResponse = GetOrganizationWorkspacesWorkspaceusersWithHttpInfo(organizationId, workspaceId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>ApiResponse of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        public ApiResponse< List<ModelsOrganizationWorkspaceUser> > GetOrganizationWorkspacesWorkspaceusersWithHttpInfo (int? organizationId, int? workspaceId, string name)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkspacesApi->GetOrganizationWorkspacesWorkspaceusers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesWorkspaceusers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrganizationWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrganizationWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrganizationWorkspaceUser>)));
        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of List&lt;ModelsOrganizationWorkspaceUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsOrganizationWorkspaceUser>> GetOrganizationWorkspacesWorkspaceusersAsync (int? organizationId, int? workspaceId, string name)
        {
             ApiResponse<List<ModelsOrganizationWorkspaceUser>> localVarResponse = await GetOrganizationWorkspacesWorkspaceusersAsyncWithHttpInfo(organizationId, workspaceId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of users who belong to the given workspace. Returns any users who belong to the workspace directly or through at least one group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="name">Workspace user name to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrganizationWorkspaceUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsOrganizationWorkspaceUser>>> GetOrganizationWorkspacesWorkspaceusersAsyncWithHttpInfo (int? organizationId, int? workspaceId, string name)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetOrganizationWorkspacesWorkspaceusers");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkspacesApi->GetOrganizationWorkspacesWorkspaceusers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesWorkspaceusers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrganizationWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrganizationWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrganizationWorkspaceUser>)));
        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>TimesheetsetupsGetPaginatedResponse</returns>
        public TimesheetsetupsGetPaginatedResponse GetTimesheetSetups (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<TimesheetsetupsGetPaginatedResponse> localVarResponse = GetTimesheetSetupsWithHttpInfo(workspaceId, memberIds, approverIds, sortField, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of TimesheetsetupsGetPaginatedResponse</returns>
        public ApiResponse< TimesheetsetupsGetPaginatedResponse > GetTimesheetSetupsWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsGetPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsGetPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsGetPaginatedResponse)));
        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of TimesheetsetupsGetPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<TimesheetsetupsGetPaginatedResponse> GetTimesheetSetupsAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<TimesheetsetupsGetPaginatedResponse> localVarResponse = await GetTimesheetSetupsAsyncWithHttpInfo(workspaceId, memberIds, approverIds, sortField, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheet setups Get timesheet setups for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsGetPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsGetPaginatedResponse>> GetTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsGetPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsGetPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsGetPaginatedResponse)));
        }

        /// <summary>
        /// Get single workspace Get information of single workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>WorkspaceWorkspace</returns>
        public WorkspaceWorkspace GetWorkspace (int? workspaceId)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = GetWorkspaceWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single workspace Get information of single workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        public ApiResponse< WorkspaceWorkspace > GetWorkspaceWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspace");

            var localVarPath = "/workspaces/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

        /// <summary>
        /// Get single workspace Get information of single workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        public async System.Threading.Tasks.Task<WorkspaceWorkspace> GetWorkspaceAsync (int? workspaceId)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = await GetWorkspaceAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single workspace Get information of single workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> GetWorkspaceAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspace");

            var localVarPath = "/workspaces/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

        /// <summary>
        /// Workspace statistics Returns workspace admins list, members count and groups count
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelsStatistics</returns>
        public ModelsStatistics GetWorkspaceStatistics ()
        {
             ApiResponse<ModelsStatistics> localVarResponse = GetWorkspaceStatisticsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Workspace statistics Returns workspace admins list, members count and groups count
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelsStatistics</returns>
        public ApiResponse< ModelsStatistics > GetWorkspaceStatisticsWithHttpInfo ()
        {

            var localVarPath = "/workspaces/{workspace_id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsStatistics)));
        }

        /// <summary>
        /// Workspace statistics Returns workspace admins list, members count and groups count
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelsStatistics</returns>
        public async System.Threading.Tasks.Task<ModelsStatistics> GetWorkspaceStatisticsAsync ()
        {
             ApiResponse<ModelsStatistics> localVarResponse = await GetWorkspaceStatisticsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Workspace statistics Returns workspace admins list, members count and groups count
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelsStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsStatistics>> GetWorkspaceStatisticsAsyncWithHttpInfo ()
        {

            var localVarPath = "/workspaces/{workspace_id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsStatistics)));
        }

        /// <summary>
        /// Get workspace time entry constraints Get the time entry constraints for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ModelsTimeEntryConstraints</returns>
        public ModelsTimeEntryConstraints GetWorkspaceTimeEntryConstraints (int? workspaceId)
        {
             ApiResponse<ModelsTimeEntryConstraints> localVarResponse = GetWorkspaceTimeEntryConstraintsWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace time entry constraints Get the time entry constraints for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of ModelsTimeEntryConstraints</returns>
        public ApiResponse< ModelsTimeEntryConstraints > GetWorkspaceTimeEntryConstraintsWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimeEntryConstraints");

            var localVarPath = "/workspaces/{workspace_id}/time_entry_constraints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimeEntryConstraints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntryConstraints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntryConstraints) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntryConstraints)));
        }

        /// <summary>
        /// Get workspace time entry constraints Get the time entry constraints for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ModelsTimeEntryConstraints</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntryConstraints> GetWorkspaceTimeEntryConstraintsAsync (int? workspaceId)
        {
             ApiResponse<ModelsTimeEntryConstraints> localVarResponse = await GetWorkspaceTimeEntryConstraintsAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace time entry constraints Get the time entry constraints for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntryConstraints)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntryConstraints>> GetWorkspaceTimeEntryConstraintsAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimeEntryConstraints");

            var localVarPath = "/workspaces/{workspace_id}/time_entry_constraints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimeEntryConstraints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntryConstraints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntryConstraints) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntryConstraints)));
        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        public List<TimesheetsTimesheetHoursResponse> GetWorkspaceTimesheetHoursHandler (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
             ApiResponse<List<TimesheetsTimesheetHoursResponse>> localVarResponse = GetWorkspaceTimesheetHoursHandlerWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        public ApiResponse< List<TimesheetsTimesheetHoursResponse> > GetWorkspaceTimesheetHoursHandlerWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimesheetHoursHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->GetWorkspaceTimesheetHoursHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetHoursHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsTimesheetHoursResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsTimesheetHoursResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsTimesheetHoursResponse>)));
        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of List&lt;TimesheetsTimesheetHoursResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimesheetsTimesheetHoursResponse>> GetWorkspaceTimesheetHoursHandlerAsync (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
             ApiResponse<List<TimesheetsTimesheetHoursResponse>> localVarResponse = await GetWorkspaceTimesheetHoursHandlerAsyncWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheets hours Get timesheet working hours and total tracked seconds.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Array of timesheet setup IDs and start dates.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsTimesheetHoursResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimesheetsTimesheetHoursResponse>>> GetWorkspaceTimesheetHoursHandlerAsyncWithHttpInfo (int? workspaceId, TimesheetsPostTimesheetHoursPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimesheetHoursHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->GetWorkspaceTimesheetHoursHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/hours";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetHoursHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsTimesheetHoursResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsTimesheetHoursResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsTimesheetHoursResponse>)));
        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>List&lt;ModelsTimeEntry&gt;</returns>
        public List<ModelsTimeEntry> GetWorkspaceTimesheetTimeEntriesHandler (int? workspaceId, int? setupId, string startDate)
        {
             ApiResponse<List<ModelsTimeEntry>> localVarResponse = GetWorkspaceTimesheetTimeEntriesHandlerWithHttpInfo(workspaceId, setupId, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>ApiResponse of List&lt;ModelsTimeEntry&gt;</returns>
        public ApiResponse< List<ModelsTimeEntry> > GetWorkspaceTimesheetTimeEntriesHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling WorkspacesApi->GetWorkspaceTimesheetTimeEntriesHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetTimeEntriesHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntry>)));
        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of List&lt;ModelsTimeEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTimeEntry>> GetWorkspaceTimesheetTimeEntriesHandlerAsync (int? workspaceId, int? setupId, string startDate)
        {
             ApiResponse<List<ModelsTimeEntry>> localVarResponse = await GetWorkspaceTimesheetTimeEntriesHandlerAsyncWithHttpInfo(workspaceId, setupId, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheet time entries Get the time entries from within a timesheet timeframe.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimeEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTimeEntry>>> GetWorkspaceTimesheetTimeEntriesHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->GetWorkspaceTimesheetTimeEntriesHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling WorkspacesApi->GetWorkspaceTimesheetTimeEntriesHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetTimeEntriesHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimeEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimeEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimeEntry>)));
        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        public List<TimesheetsGetPaginatedResponse> GetWorkspaceTimesheetsHandler (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<List<TimesheetsGetPaginatedResponse>> localVarResponse = GetWorkspaceTimesheetsHandlerWithHttpInfo(workspaceId, memberIds, approverIds, timesheetSetupIds, statuses, before, after, page, perPage, sortField, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>ApiResponse of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        public ApiResponse< List<TimesheetsGetPaginatedResponse> > GetWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (timesheetSetupIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timesheet_setup_ids", timesheetSetupIds)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsGetPaginatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsGetPaginatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsGetPaginatedResponse>)));
        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of List&lt;TimesheetsGetPaginatedResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimesheetsGetPaginatedResponse>> GetWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
             ApiResponse<List<TimesheetsGetPaginatedResponse>> localVarResponse = await GetWorkspaceTimesheetsHandlerAsyncWithHttpInfo(workspaceId, memberIds, approverIds, timesheetSetupIds, statuses, before, after, page, perPage, sortField, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheets Get timesheets applying various filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="memberIds">Numeric ID of the members, comma-separated (optional)</param>
        /// <param name="approverIds">Numeric ID of the approvers, comma-separated (optional)</param>
        /// <param name="timesheetSetupIds">Numeric ID for timesheet setup, comma-separated. (optional)</param>
        /// <param name="statuses">Timesheet status, comma-separated. (optional)</param>
        /// <param name="before">Timesheets starting before this date (YYYY-MM-DD). (optional)</param>
        /// <param name="after">Timesheets starting after this date (YYYY-MM-DD). (optional)</param>
        /// <param name="page">Page number, default 1. (optional)</param>
        /// <param name="perPage">Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000. (optional)</param>
        /// <param name="sortField">Field used for sorting, default start_date. (optional)</param>
        /// <param name="sortOrder">Sort order. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsGetPaginatedResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimesheetsGetPaginatedResponse>>> GetWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? memberIds = null, int? approverIds = null, int? timesheetSetupIds = null, int? statuses = null, int? before = null, int? after = null, int? page = null, int? perPage = null, string sortField = null, string sortOrder = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_ids", memberIds)); // query parameter
            if (approverIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approver_ids", approverIds)); // query parameter
            if (timesheetSetupIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timesheet_setup_ids", timesheetSetupIds)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsGetPaginatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsGetPaginatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsGetPaginatedResponse>)));
        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>List&lt;ModelsTrackReminder&gt;</returns>
        public List<ModelsTrackReminder> GetWorkspaceTrackReminders (int? workspaceId)
        {
             ApiResponse<List<ModelsTrackReminder>> localVarResponse = GetWorkspaceTrackRemindersWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of List&lt;ModelsTrackReminder&gt;</returns>
        public ApiResponse< List<ModelsTrackReminder> > GetWorkspaceTrackRemindersWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTrackReminders");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTrackReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTrackReminder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTrackReminder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTrackReminder>)));
        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of List&lt;ModelsTrackReminder&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTrackReminder>> GetWorkspaceTrackRemindersAsync (int? workspaceId)
        {
             ApiResponse<List<ModelsTrackReminder>> localVarResponse = await GetWorkspaceTrackRemindersAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTrackReminder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTrackReminder>>> GetWorkspaceTrackRemindersAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceTrackReminders");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTrackReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTrackReminder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTrackReminder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTrackReminder>)));
        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        public List<ModelsSimpleWorkspaceUser> GetWorkspaceUsers (int? workspaceId, bool? excludeDeleted = null)
        {
             ApiResponse<List<ModelsSimpleWorkspaceUser>> localVarResponse = GetWorkspaceUsersWithHttpInfo(workspaceId, excludeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        public ApiResponse< List<ModelsSimpleWorkspaceUser> > GetWorkspaceUsersWithHttpInfo (int? workspaceId, bool? excludeDeleted = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (excludeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_deleted", excludeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSimpleWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSimpleWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSimpleWorkspaceUser>)));
        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of List&lt;ModelsSimpleWorkspaceUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsSimpleWorkspaceUser>> GetWorkspaceUsersAsync (int? workspaceId, bool? excludeDeleted = null)
        {
             ApiResponse<List<ModelsSimpleWorkspaceUser>> localVarResponse = await GetWorkspaceUsersAsyncWithHttpInfo(workspaceId, excludeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace users List all users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="excludeDeleted">Exclude deleted records in the response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSimpleWorkspaceUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsSimpleWorkspaceUser>>> GetWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, bool? excludeDeleted = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->GetWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (excludeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_deleted", excludeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSimpleWorkspaceUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSimpleWorkspaceUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSimpleWorkspaceUser>)));
        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        public List<WorkspaceWithActiveProjectCount> GetWorkspaces (int? since = null)
        {
             ApiResponse<List<WorkspaceWithActiveProjectCount>> localVarResponse = GetWorkspacesWithHttpInfo(since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        public ApiResponse< List<WorkspaceWithActiveProjectCount> > GetWorkspacesWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkspaceWithActiveProjectCount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkspaceWithActiveProjectCount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkspaceWithActiveProjectCount>)));
        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkspaceWithActiveProjectCount>> GetWorkspacesAsync (int? since = null)
        {
             ApiResponse<List<WorkspaceWithActiveProjectCount>> localVarResponse = await GetWorkspacesAsyncWithHttpInfo(since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkspaceWithActiveProjectCount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkspaceWithActiveProjectCount>>> GetWorkspacesAsyncWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkspaceWithActiveProjectCount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkspaceWithActiveProjectCount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkspaceWithActiveProjectCount>)));
        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        public string PatchOrganizationWorkspaceUsers (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
             ApiResponse<string> localVarResponse = PatchOrganizationWorkspaceUsersWithHttpInfo(organizationId, workspaceId, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PatchOrganizationWorkspaceUsersWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling WorkspacesApi->PatchOrganizationWorkspaceUsers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PatchOrganizationWorkspaceUsersAsync (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
             ApiResponse<string> localVarResponse = await PatchOrganizationWorkspaceUsersAsyncWithHttpInfo(organizationId, workspaceId, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes the users in a workspace. Changes the users in a workspace (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationWorkspaceUsersAsyncWithHttpInfo (int? organizationId, int? workspaceId, WorkspaceUsersPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PatchOrganizationWorkspaceUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling WorkspacesApi->PatchOrganizationWorkspaceUsers");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Alerts Handles POST alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>ModelsAlert</returns>
        public ModelsAlert PostAlerts (object request)
        {
             ApiResponse<ModelsAlert> localVarResponse = PostAlertsWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alerts Handles POST alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>ApiResponse of ModelsAlert</returns>
        public ApiResponse< ModelsAlert > PostAlertsWithHttpInfo (object request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WorkspacesApi->PostAlerts");

            var localVarPath = "/workspaces/{workspace_id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsAlert>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsAlert) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsAlert)));
        }

        /// <summary>
        /// Alerts Handles POST alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>Task of ModelsAlert</returns>
        public async System.Threading.Tasks.Task<ModelsAlert> PostAlertsAsync (object request)
        {
             ApiResponse<ModelsAlert> localVarResponse = await PostAlertsAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alerts Handles POST alert requests.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Alert data</param>
        /// <returns>Task of ApiResponse (ModelsAlert)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsAlert>> PostAlertsAsyncWithHttpInfo (object request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WorkspacesApi->PostAlerts");

            var localVarPath = "/workspaces/{workspace_id}/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsAlert>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsAlert) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsAlert)));
        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>WorkspaceWorkspace</returns>
        public WorkspaceWorkspace PostOrganizationWorkspaces (int? organizationId, WorkspacePayload post)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = PostOrganizationWorkspacesWithHttpInfo(organizationId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        public ApiResponse< WorkspaceWorkspace > PostOrganizationWorkspacesWithHttpInfo (int? organizationId, WorkspacePayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->PostOrganizationWorkspaces");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PostOrganizationWorkspaces");

            var localVarPath = "/organizations/{organization_id}/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        public async System.Threading.Tasks.Task<WorkspaceWorkspace> PostOrganizationWorkspacesAsync (int? organizationId, WorkspacePayload post)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = await PostOrganizationWorkspacesAsyncWithHttpInfo(organizationId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> PostOrganizationWorkspacesAsyncWithHttpInfo (int? organizationId, WorkspacePayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->PostOrganizationWorkspaces");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PostOrganizationWorkspaces");

            var localVarPath = "/organizations/{organization_id}/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        public List<TimesheetsetupsAPITimesheetSetup> PostTimesheetSetups (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
             ApiResponse<List<TimesheetsetupsAPITimesheetSetup>> localVarResponse = PostTimesheetSetupsWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>ApiResponse of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        public ApiResponse< List<TimesheetsetupsAPITimesheetSetup> > PostTimesheetSetupsWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PostTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->PostTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsetupsAPITimesheetSetup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsetupsAPITimesheetSetup>)));
        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of List&lt;TimesheetsetupsAPITimesheetSetup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimesheetsetupsAPITimesheetSetup>> PostTimesheetSetupsAsync (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
             ApiResponse<List<TimesheetsetupsAPITimesheetSetup>> localVarResponse = await PostTimesheetSetupsAsyncWithHttpInfo(workspaceId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a timesheet setup Create timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="payload">Arrays of setup creation parameters.</param>
        /// <returns>Task of ApiResponse (List&lt;TimesheetsetupsAPITimesheetSetup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>> PostTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, TimesheetsetupsCreatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PostTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->PostTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TimesheetsetupsAPITimesheetSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TimesheetsetupsAPITimesheetSetup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TimesheetsetupsAPITimesheetSetup>)));
        }

        /// <summary>
        /// TrackReminders Creates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ModelsTrackReminder</returns>
        public ModelsTrackReminder PostWorkspaceTrackReminders (int? workspaceId, RemindersPayload trackReminderPost)
        {
             ApiResponse<ModelsTrackReminder> localVarResponse = PostWorkspaceTrackRemindersWithHttpInfo(workspaceId, trackReminderPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TrackReminders Creates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ApiResponse of ModelsTrackReminder</returns>
        public ApiResponse< ModelsTrackReminder > PostWorkspaceTrackRemindersWithHttpInfo (int? workspaceId, RemindersPayload trackReminderPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PostWorkspaceTrackReminders");
            // verify the required parameter 'trackReminderPost' is set
            if (trackReminderPost == null)
                throw new ApiException(400, "Missing required parameter 'trackReminderPost' when calling WorkspacesApi->PostWorkspaceTrackReminders");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (trackReminderPost != null && trackReminderPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackReminderPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackReminderPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceTrackReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTrackReminder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTrackReminder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTrackReminder)));
        }

        /// <summary>
        /// TrackReminders Creates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ModelsTrackReminder</returns>
        public async System.Threading.Tasks.Task<ModelsTrackReminder> PostWorkspaceTrackRemindersAsync (int? workspaceId, RemindersPayload trackReminderPost)
        {
             ApiResponse<ModelsTrackReminder> localVarResponse = await PostWorkspaceTrackRemindersAsyncWithHttpInfo(workspaceId, trackReminderPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TrackReminders Creates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ApiResponse (ModelsTrackReminder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTrackReminder>> PostWorkspaceTrackRemindersAsyncWithHttpInfo (int? workspaceId, RemindersPayload trackReminderPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PostWorkspaceTrackReminders");
            // verify the required parameter 'trackReminderPost' is set
            if (trackReminderPost == null)
                throw new ApiException(400, "Missing required parameter 'trackReminderPost' when calling WorkspacesApi->PostWorkspaceTrackReminders");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (trackReminderPost != null && trackReminderPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackReminderPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackReminderPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceTrackReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTrackReminder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTrackReminder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTrackReminder)));
        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>UsersLostPasswordURL</returns>
        public UsersLostPasswordURL PostWorkspaceUsersLostPassword (int? workspaceId, int? userId)
        {
             ApiResponse<UsersLostPasswordURL> localVarResponse = PostWorkspaceUsersLostPasswordWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of UsersLostPasswordURL</returns>
        public ApiResponse< UsersLostPasswordURL > PostWorkspaceUsersLostPasswordWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PostWorkspaceUsersLostPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkspacesApi->PostWorkspaceUsersLostPassword");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}/lost_password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceUsersLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersLostPasswordURL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersLostPasswordURL) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersLostPasswordURL)));
        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of UsersLostPasswordURL</returns>
        public async System.Threading.Tasks.Task<UsersLostPasswordURL> PostWorkspaceUsersLostPasswordAsync (int? workspaceId, int? userId)
        {
             ApiResponse<UsersLostPasswordURL> localVarResponse = await PostWorkspaceUsersLostPasswordAsyncWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change a lost password Request a change password action
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (UsersLostPasswordURL)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersLostPasswordURL>> PostWorkspaceUsersLostPasswordAsyncWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PostWorkspaceUsersLostPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkspacesApi->PostWorkspaceUsersLostPassword");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}/lost_password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceUsersLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersLostPasswordURL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersLostPasswordURL) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersLostPasswordURL)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        public string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = PutOrganizationWorkspacesAssignmentsWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = await PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling WorkspacesApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>TimesheetsetupsAPITimesheetSetup</returns>
        public TimesheetsetupsAPITimesheetSetup PutTimesheetSetups (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
             ApiResponse<TimesheetsetupsAPITimesheetSetup> localVarResponse = PutTimesheetSetupsWithHttpInfo(workspaceId, setupId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>ApiResponse of TimesheetsetupsAPITimesheetSetup</returns>
        public ApiResponse< TimesheetsetupsAPITimesheetSetup > PutTimesheetSetupsWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->PutTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->PutTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsAPITimesheetSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsAPITimesheetSetup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsAPITimesheetSetup)));
        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of TimesheetsetupsAPITimesheetSetup</returns>
        public async System.Threading.Tasks.Task<TimesheetsetupsAPITimesheetSetup> PutTimesheetSetupsAsync (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
             ApiResponse<TimesheetsetupsAPITimesheetSetup> localVarResponse = await PutTimesheetSetupsAsyncWithHttpInfo(workspaceId, setupId, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a timesheet setup Updates a timesheet setups.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup</param>
        /// <param name="payload">Setup update parameters.</param>
        /// <returns>Task of ApiResponse (TimesheetsetupsAPITimesheetSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimesheetsetupsAPITimesheetSetup>> PutTimesheetSetupsAsyncWithHttpInfo (int? workspaceId, int? setupId, TimesheetsetupsUpdatePayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutTimesheetSetups");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->PutTimesheetSetups");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->PutTimesheetSetups");

            var localVarPath = "/workspaces/{workspace_id}/timesheet_setups/{setup_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTimesheetSetups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsetupsAPITimesheetSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsetupsAPITimesheetSetup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsetupsAPITimesheetSetup)));
        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>TimesheetsAPITimesheet</returns>
        public TimesheetsAPITimesheet PutWorkspaceTimesheetsHandler (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
             ApiResponse<TimesheetsAPITimesheet> localVarResponse = PutWorkspaceTimesheetsHandlerWithHttpInfo(workspaceId, setupId, startDate, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>ApiResponse of TimesheetsAPITimesheet</returns>
        public ApiResponse< TimesheetsAPITimesheet > PutWorkspaceTimesheetsHandlerWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsAPITimesheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsAPITimesheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsAPITimesheet)));
        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of TimesheetsAPITimesheet</returns>
        public async System.Threading.Tasks.Task<TimesheetsAPITimesheet> PutWorkspaceTimesheetsHandlerAsync (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
             ApiResponse<TimesheetsAPITimesheet> localVarResponse = await PutWorkspaceTimesheetsHandlerAsyncWithHttpInfo(workspaceId, setupId, startDate, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update timesheets Updates a timesheet.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="setupId">Numeric ID of the timesheet setup.</param>
        /// <param name="startDate">Start date (YYYY-MM-DD) of the timesheet.</param>
        /// <param name="payload">Timesheet status and rejection comment.</param>
        /// <returns>Task of ApiResponse (TimesheetsAPITimesheet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimesheetsAPITimesheet>> PutWorkspaceTimesheetsHandlerAsyncWithHttpInfo (int? workspaceId, int? setupId, string startDate, TimesheetsPutTimesheetPayload payload)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'setupId' is set
            if (setupId == null)
                throw new ApiException(400, "Missing required parameter 'setupId' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling WorkspacesApi->PutWorkspaceTimesheetsHandler");

            var localVarPath = "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (setupId != null) localVarPathParams.Add("setup_id", this.Configuration.ApiClient.ParameterToString(setupId)); // path parameter
            if (startDate != null) localVarPathParams.Add("start_date", this.Configuration.ApiClient.ParameterToString(startDate)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTimesheetsHandler", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimesheetsAPITimesheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimesheetsAPITimesheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimesheetsAPITimesheet)));
        }

        /// <summary>
        /// TrackReminder Updates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ModelsTrackReminder</returns>
        public ModelsTrackReminder PutWorkspaceTrackReminder (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost)
        {
             ApiResponse<ModelsTrackReminder> localVarResponse = PutWorkspaceTrackReminderWithHttpInfo(workspaceId, reminderId, trackReminderPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TrackReminder Updates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>ApiResponse of ModelsTrackReminder</returns>
        public ApiResponse< ModelsTrackReminder > PutWorkspaceTrackReminderWithHttpInfo (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceTrackReminder");
            // verify the required parameter 'reminderId' is set
            if (reminderId == null)
                throw new ApiException(400, "Missing required parameter 'reminderId' when calling WorkspacesApi->PutWorkspaceTrackReminder");
            // verify the required parameter 'trackReminderPost' is set
            if (trackReminderPost == null)
                throw new ApiException(400, "Missing required parameter 'trackReminderPost' when calling WorkspacesApi->PutWorkspaceTrackReminder");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders/{reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reminderId != null) localVarPathParams.Add("reminder_id", this.Configuration.ApiClient.ParameterToString(reminderId)); // path parameter
            if (trackReminderPost != null && trackReminderPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackReminderPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackReminderPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTrackReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTrackReminder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTrackReminder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTrackReminder)));
        }

        /// <summary>
        /// TrackReminder Updates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ModelsTrackReminder</returns>
        public async System.Threading.Tasks.Task<ModelsTrackReminder> PutWorkspaceTrackReminderAsync (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost)
        {
             ApiResponse<ModelsTrackReminder> localVarResponse = await PutWorkspaceTrackReminderAsyncWithHttpInfo(workspaceId, reminderId, trackReminderPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TrackReminder Updates a workspace tracking reminder.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="reminderId">Reminder ID.</param>
        /// <param name="trackReminderPost">Reminder parameters.</param>
        /// <returns>Task of ApiResponse (ModelsTrackReminder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTrackReminder>> PutWorkspaceTrackReminderAsyncWithHttpInfo (int? workspaceId, int? reminderId, RemindersPayload trackReminderPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceTrackReminder");
            // verify the required parameter 'reminderId' is set
            if (reminderId == null)
                throw new ApiException(400, "Missing required parameter 'reminderId' when calling WorkspacesApi->PutWorkspaceTrackReminder");
            // verify the required parameter 'trackReminderPost' is set
            if (trackReminderPost == null)
                throw new ApiException(400, "Missing required parameter 'trackReminderPost' when calling WorkspacesApi->PutWorkspaceTrackReminder");

            var localVarPath = "/workspaces/{workspace_id}/track_reminders/{reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (reminderId != null) localVarPathParams.Add("reminder_id", this.Configuration.ApiClient.ParameterToString(reminderId)); // path parameter
            if (trackReminderPost != null && trackReminderPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackReminderPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackReminderPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceTrackReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTrackReminder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTrackReminder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTrackReminder)));
        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>string</returns>
        public string PutWorkspaceUsers (int? workspaceId, int? userId)
        {
             ApiResponse<string> localVarResponse = PutWorkspaceUsersWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutWorkspaceUsersWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceUsers");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkspacesApi->PutWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutWorkspaceUsersAsync (int? workspaceId, int? userId)
        {
             ApiResponse<string> localVarResponse = await PutWorkspaceUsersAsyncWithHttpInfo(workspaceId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update workspace user Update the data for a user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="userId">Numeric ID of the user</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? userId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceUsers");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling WorkspacesApi->PutWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>string</returns>
        public string PutWorkspaceWorkspaceUsers (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
             ApiResponse<string> localVarResponse = PutWorkspaceWorkspaceUsersWithHttpInfo(workspaceId, workspaceUserId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutWorkspaceWorkspaceUsersWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling WorkspacesApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PutWorkspaceWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutWorkspaceWorkspaceUsersAsync (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
             ApiResponse<string> localVarResponse = await PutWorkspaceWorkspaceUsersAsyncWithHttpInfo(workspaceId, workspaceUserId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update workspace-user Update the data for a workspace_user in a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="workspaceUserId">Numeric ID of the workspace user</param>
        /// <param name="post">Changes that need to be applied to the user data.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutWorkspaceWorkspaceUsersAsyncWithHttpInfo (int? workspaceId, int? workspaceUserId, UserPayload post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'workspaceUserId' is set
            if (workspaceUserId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUserId' when calling WorkspacesApi->PutWorkspaceWorkspaceUsers");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PutWorkspaceWorkspaceUsers");

            var localVarPath = "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUserId != null) localVarPathParams.Add("workspace_user_id", this.Configuration.ApiClient.ParameterToString(workspaceUserId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceWorkspaceUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update workspace Update a specific workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>WorkspaceWorkspace</returns>
        public WorkspaceWorkspace PutWorkspaces (int? workspaceId, WorkspacePayload post)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = PutWorkspacesWithHttpInfo(workspaceId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update workspace Update a specific workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        public ApiResponse< WorkspaceWorkspace > PutWorkspacesWithHttpInfo (int? workspaceId, WorkspacePayload post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaces");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PutWorkspaces");

            var localVarPath = "/workspaces/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

        /// <summary>
        /// Update workspace Update a specific workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        public async System.Threading.Tasks.Task<WorkspaceWorkspace> PutWorkspacesAsync (int? workspaceId, WorkspacePayload post)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = await PutWorkspacesAsyncWithHttpInfo(workspaceId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update workspace Update a specific workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric Workspace ID</param>
        /// <param name="post">Workspace parameters</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> PutWorkspacesAsyncWithHttpInfo (int? workspaceId, WorkspacePayload post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->PutWorkspaces");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WorkspacesApi->PutWorkspaces");

            var localVarPath = "/workspaces/{workspace_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

    }
}
