/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>string</returns>
        string DeleteOrganizationGroup (int? organizationId, int? groupId);

        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteOrganizationGroupWithHttpInfo (int? organizationId, int? groupId);
        /// <summary>
        /// Remove project group.
        /// </summary>
        /// <remarks>
        /// Remove project group for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>string</returns>
        string DeleteProjectGroup (int? workspaceId, int? projectGroupId);

        /// <summary>
        /// Remove project group.
        /// </summary>
        /// <remarks>
        /// Remove project group for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteProjectGroupWithHttpInfo (int? workspaceId, int? projectGroupId);
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Deletes the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns></returns>
        void DeleteWorkspaceGroup (int? workspaceId, int? groupId);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Deletes the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkspaceGroupWithHttpInfo (int? workspaceId, int? groupId);
        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        List<GroupOrganizationGroupResponse> GetOrganizationGroups (int? organizationId, string name = null, string workspace = null);

        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        ApiResponse<List<GroupOrganizationGroupResponse>> GetOrganizationGroupsWithHttpInfo (int? organizationId, string name = null, string workspace = null);
        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        List<GroupOrganizationGroupResponse> GetOrganizationWorkspacesGroups (int? organizationId, int? workspaceId);

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        ApiResponse<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsWithHttpInfo (int? organizationId, int? workspaceId);
        /// <summary>
        /// Get workspace project groups.
        /// </summary>
        /// <remarks>
        /// Get project groups for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>List&lt;ModelsProjectGroup&gt;</returns>
        List<ModelsProjectGroup> GetProjectGroups (int? workspaceId, string projectIds);

        /// <summary>
        /// Get workspace project groups.
        /// </summary>
        /// <remarks>
        /// Get project groups for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>ApiResponse of List&lt;ModelsProjectGroup&gt;</returns>
        ApiResponse<List<ModelsProjectGroup>> GetProjectGroupsWithHttpInfo (int? workspaceId, string projectIds);
        /// <summary>
        /// Get workspace groups
        /// </summary>
        /// <remarks>
        /// Returns a list of groups for the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>List&lt;ModelsGroup&gt;</returns>
        List<ModelsGroup> GetWorkspaceGroups (int? workspaceId);

        /// <summary>
        /// Get workspace groups
        /// </summary>
        /// <remarks>
        /// Returns a list of groups for the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of List&lt;ModelsGroup&gt;</returns>
        ApiResponse<List<ModelsGroup>> GetWorkspaceGroupsWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>GroupsPatchOutput</returns>
        GroupsPatchOutput PatchOrganizationGroup (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);

        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>ApiResponse of GroupsPatchOutput</returns>
        ApiResponse<GroupsPatchOutput> PatchOrganizationGroupWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        GroupOrganizationGroupResponse PostOrganizationGroup (int? organizationId, GroupPayload postGroupRequest);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        ApiResponse<GroupOrganizationGroupResponse> PostOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload postGroupRequest);
        /// <summary>
        /// Adds group to project.
        /// </summary>
        /// <remarks>
        /// Adds group to project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>string</returns>
        string PostProjectGroup (int? workspaceId, GroupProjectGroupPayload projectGroupPost);

        /// <summary>
        /// Adds group to project.
        /// </summary>
        /// <remarks>
        /// Adds group to project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostProjectGroupWithHttpInfo (int? workspaceId, GroupProjectGroupPayload projectGroupPost);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ModelsGroup</returns>
        ModelsGroup PostWorkspaceGroup (int? workspaceId, GroupNamePayload postGroupRequest);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ApiResponse of ModelsGroup</returns>
        ApiResponse<ModelsGroup> PostWorkspaceGroupWithHttpInfo (int? workspaceId, GroupNamePayload postGroupRequest);
        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        GroupOrganizationGroupResponse PutOrganizationGroup (int? organizationId, GroupPayload putGroupRequest);

        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        ApiResponse<GroupOrganizationGroupResponse> PutOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload putGroupRequest);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Updates the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>ModelsGroup</returns>
        ModelsGroup PutWorkspaceGroup (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest);

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Updates the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>ApiResponse of ModelsGroup</returns>
        ApiResponse<ModelsGroup> PutWorkspaceGroupWithHttpInfo (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteOrganizationGroupAsync (int? organizationId, int? groupId);

        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId);
        /// <summary>
        /// Remove project group.
        /// </summary>
        /// <remarks>
        /// Remove project group for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteProjectGroupAsync (int? workspaceId, int? projectGroupId);

        /// <summary>
        /// Remove project group.
        /// </summary>
        /// <remarks>
        /// Remove project group for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteProjectGroupAsyncWithHttpInfo (int? workspaceId, int? projectGroupId);
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Deletes the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkspaceGroupAsync (int? workspaceId, int? groupId);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// Deletes the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkspaceGroupAsyncWithHttpInfo (int? workspaceId, int? groupId);
        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationGroupsAsync (int? organizationId, string name = null, string workspace = null);

        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationGroupsAsyncWithHttpInfo (int? organizationId, string name = null, string workspace = null);
        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsAsync (int? organizationId, int? workspaceId);

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationWorkspacesGroupsAsyncWithHttpInfo (int? organizationId, int? workspaceId);
        /// <summary>
        /// Get workspace project groups.
        /// </summary>
        /// <remarks>
        /// Get project groups for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>Task of List&lt;ModelsProjectGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsProjectGroup>> GetProjectGroupsAsync (int? workspaceId, string projectIds);

        /// <summary>
        /// Get workspace project groups.
        /// </summary>
        /// <remarks>
        /// Get project groups for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProjectGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsProjectGroup>>> GetProjectGroupsAsyncWithHttpInfo (int? workspaceId, string projectIds);
        /// <summary>
        /// Get workspace groups
        /// </summary>
        /// <remarks>
        /// Returns a list of groups for the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of List&lt;ModelsGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsGroup>> GetWorkspaceGroupsAsync (int? workspaceId);

        /// <summary>
        /// Get workspace groups
        /// </summary>
        /// <remarks>
        /// Returns a list of groups for the specified workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsGroup>>> GetWorkspaceGroupsAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of GroupsPatchOutput</returns>
        System.Threading.Tasks.Task<GroupsPatchOutput> PatchOrganizationGroupAsync (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);

        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of ApiResponse (GroupsPatchOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupsPatchOutput>> PatchOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PostOrganizationGroupAsync (int? organizationId, GroupPayload postGroupRequest);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PostOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload postGroupRequest);
        /// <summary>
        /// Adds group to project.
        /// </summary>
        /// <remarks>
        /// Adds group to project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostProjectGroupAsync (int? workspaceId, GroupProjectGroupPayload projectGroupPost);

        /// <summary>
        /// Adds group to project.
        /// </summary>
        /// <remarks>
        /// Adds group to project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostProjectGroupAsyncWithHttpInfo (int? workspaceId, GroupProjectGroupPayload projectGroupPost);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ModelsGroup</returns>
        System.Threading.Tasks.Task<ModelsGroup> PostWorkspaceGroupAsync (int? workspaceId, GroupNamePayload postGroupRequest);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ApiResponse (ModelsGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsGroup>> PostWorkspaceGroupAsyncWithHttpInfo (int? workspaceId, GroupNamePayload postGroupRequest);
        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PutOrganizationGroupAsync (int? organizationId, GroupPayload putGroupRequest);

        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PutOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload putGroupRequest);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Updates the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>Task of ModelsGroup</returns>
        System.Threading.Tasks.Task<ModelsGroup> PutWorkspaceGroupAsync (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest);

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// Updates the group.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>Task of ApiResponse (ModelsGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsGroup>> PutWorkspaceGroupAsyncWithHttpInfo (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>string</returns>
        public string DeleteOrganizationGroup (int? organizationId, int? groupId)
        {
             ApiResponse<string> localVarResponse = DeleteOrganizationGroupWithHttpInfo(organizationId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteOrganizationGroupWithHttpInfo (int? organizationId, int? groupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->DeleteOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteOrganizationGroupAsync (int? organizationId, int? groupId)
        {
             ApiResponse<string> localVarResponse = await DeleteOrganizationGroupAsyncWithHttpInfo(organizationId, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->DeleteOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove project group. Remove project group for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>string</returns>
        public string DeleteProjectGroup (int? workspaceId, int? projectGroupId)
        {
             ApiResponse<string> localVarResponse = DeleteProjectGroupWithHttpInfo(workspaceId, projectGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove project group. Remove project group for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteProjectGroupWithHttpInfo (int? workspaceId, int? projectGroupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteProjectGroup");
            // verify the required parameter 'projectGroupId' is set
            if (projectGroupId == null)
                throw new ApiException(400, "Missing required parameter 'projectGroupId' when calling GroupsApi->DeleteProjectGroup");

            var localVarPath = "/workspaces/{workspace_id}/project_groups/{project_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectGroupId != null) localVarPathParams.Add("project_group_id", this.Configuration.ApiClient.ParameterToString(projectGroupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove project group. Remove project group for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteProjectGroupAsync (int? workspaceId, int? projectGroupId)
        {
             ApiResponse<string> localVarResponse = await DeleteProjectGroupAsyncWithHttpInfo(workspaceId, projectGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove project group. Remove project group for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupId">Numeric ID of the project group</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteProjectGroupAsyncWithHttpInfo (int? workspaceId, int? projectGroupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteProjectGroup");
            // verify the required parameter 'projectGroupId' is set
            if (projectGroupId == null)
                throw new ApiException(400, "Missing required parameter 'projectGroupId' when calling GroupsApi->DeleteProjectGroup");

            var localVarPath = "/workspaces/{workspace_id}/project_groups/{project_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectGroupId != null) localVarPathParams.Add("project_group_id", this.Configuration.ApiClient.ParameterToString(projectGroupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete group Deletes the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns></returns>
        public void DeleteWorkspaceGroup (int? workspaceId, int? groupId)
        {
             DeleteWorkspaceGroupWithHttpInfo(workspaceId, groupId);
        }

        /// <summary>
        /// Delete group Deletes the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorkspaceGroupWithHttpInfo (int? workspaceId, int? groupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteWorkspaceGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteWorkspaceGroup");

            var localVarPath = "/workspaces/{workspace_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete group Deletes the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkspaceGroupAsync (int? workspaceId, int? groupId)
        {
             await DeleteWorkspaceGroupAsyncWithHttpInfo(workspaceId, groupId);

        }

        /// <summary>
        /// Delete group Deletes the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkspaceGroupAsyncWithHttpInfo (int? workspaceId, int? groupId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->DeleteWorkspaceGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteWorkspaceGroup");

            var localVarPath = "/workspaces/{workspace_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public List<GroupOrganizationGroupResponse> GetOrganizationGroups (int? organizationId, string name = null, string workspace = null)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = GetOrganizationGroupsWithHttpInfo(organizationId, name, workspace);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public ApiResponse< List<GroupOrganizationGroupResponse> > GetOrganizationGroupsWithHttpInfo (int? organizationId, string name = null, string workspace = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->GetOrganizationGroups");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationGroupsAsync (int? organizationId, string name = null, string workspace = null)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = await GetOrganizationGroupsAsyncWithHttpInfo(organizationId, name, workspace);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationGroupsAsyncWithHttpInfo (int? organizationId, string name = null, string workspace = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->GetOrganizationGroups");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public List<GroupOrganizationGroupResponse> GetOrganizationWorkspacesGroups (int? organizationId, int? workspaceId)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = GetOrganizationWorkspacesGroupsWithHttpInfo(organizationId, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public ApiResponse< List<GroupOrganizationGroupResponse> > GetOrganizationWorkspacesGroupsWithHttpInfo (int? organizationId, int? workspaceId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->GetOrganizationWorkspacesGroups");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetOrganizationWorkspacesGroups");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsAsync (int? organizationId, int? workspaceId)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = await GetOrganizationWorkspacesGroupsAsyncWithHttpInfo(organizationId, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationWorkspacesGroupsAsyncWithHttpInfo (int? organizationId, int? workspaceId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->GetOrganizationWorkspacesGroups");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetOrganizationWorkspacesGroups");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// Get workspace project groups. Get project groups for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>List&lt;ModelsProjectGroup&gt;</returns>
        public List<ModelsProjectGroup> GetProjectGroups (int? workspaceId, string projectIds)
        {
             ApiResponse<List<ModelsProjectGroup>> localVarResponse = GetProjectGroupsWithHttpInfo(workspaceId, projectIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace project groups. Get project groups for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>ApiResponse of List&lt;ModelsProjectGroup&gt;</returns>
        public ApiResponse< List<ModelsProjectGroup> > GetProjectGroupsWithHttpInfo (int? workspaceId, string projectIds)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetProjectGroups");
            // verify the required parameter 'projectIds' is set
            if (projectIds == null)
                throw new ApiException(400, "Missing required parameter 'projectIds' when calling GroupsApi->GetProjectGroups");

            var localVarPath = "/workspaces/{workspace_id}/project_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectIds != null) localVarFormParams.Add("project_ids", this.Configuration.ApiClient.ParameterToString(projectIds)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProjectGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProjectGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProjectGroup>)));
        }

        /// <summary>
        /// Get workspace project groups. Get project groups for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>Task of List&lt;ModelsProjectGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsProjectGroup>> GetProjectGroupsAsync (int? workspaceId, string projectIds)
        {
             ApiResponse<List<ModelsProjectGroup>> localVarResponse = await GetProjectGroupsAsyncWithHttpInfo(workspaceId, projectIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace project groups. Get project groups for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Project IDs separated by comma.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProjectGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsProjectGroup>>> GetProjectGroupsAsyncWithHttpInfo (int? workspaceId, string projectIds)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetProjectGroups");
            // verify the required parameter 'projectIds' is set
            if (projectIds == null)
                throw new ApiException(400, "Missing required parameter 'projectIds' when calling GroupsApi->GetProjectGroups");

            var localVarPath = "/workspaces/{workspace_id}/project_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectIds != null) localVarFormParams.Add("project_ids", this.Configuration.ApiClient.ParameterToString(projectIds)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProjectGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProjectGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProjectGroup>)));
        }

        /// <summary>
        /// Get workspace groups Returns a list of groups for the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>List&lt;ModelsGroup&gt;</returns>
        public List<ModelsGroup> GetWorkspaceGroups (int? workspaceId)
        {
             ApiResponse<List<ModelsGroup>> localVarResponse = GetWorkspaceGroupsWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace groups Returns a list of groups for the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>ApiResponse of List&lt;ModelsGroup&gt;</returns>
        public ApiResponse< List<ModelsGroup> > GetWorkspaceGroupsWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetWorkspaceGroups");

            var localVarPath = "/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsGroup>)));
        }

        /// <summary>
        /// Get workspace groups Returns a list of groups for the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of List&lt;ModelsGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsGroup>> GetWorkspaceGroupsAsync (int? workspaceId)
        {
             ApiResponse<List<ModelsGroup>> localVarResponse = await GetWorkspaceGroupsAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace groups Returns a list of groups for the specified workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsGroup>>> GetWorkspaceGroupsAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->GetWorkspaceGroups");

            var localVarPath = "/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsGroup>)));
        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>GroupsPatchOutput</returns>
        public GroupsPatchOutput PatchOrganizationGroup (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
             ApiResponse<GroupsPatchOutput> localVarResponse = PatchOrganizationGroupWithHttpInfo(organizationId, groupId, patchGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>ApiResponse of GroupsPatchOutput</returns>
        public ApiResponse< GroupsPatchOutput > PatchOrganizationGroupWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PatchOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->PatchOrganizationGroup");
            // verify the required parameter 'patchGroupRequest' is set
            if (patchGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'patchGroupRequest' when calling GroupsApi->PatchOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (patchGroupRequest != null && patchGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupsPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupsPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupsPatchOutput)));
        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of GroupsPatchOutput</returns>
        public async System.Threading.Tasks.Task<GroupsPatchOutput> PatchOrganizationGroupAsync (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
             ApiResponse<GroupsPatchOutput> localVarResponse = await PatchOrganizationGroupAsyncWithHttpInfo(organizationId, groupId, patchGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of ApiResponse (GroupsPatchOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupsPatchOutput>> PatchOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PatchOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->PatchOrganizationGroup");
            // verify the required parameter 'patchGroupRequest' is set
            if (patchGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'patchGroupRequest' when calling GroupsApi->PatchOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (patchGroupRequest != null && patchGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupsPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupsPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupsPatchOutput)));
        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        public GroupOrganizationGroupResponse PostOrganizationGroup (int? organizationId, GroupPayload postGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = PostOrganizationGroupWithHttpInfo(organizationId, postGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        public ApiResponse< GroupOrganizationGroupResponse > PostOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload postGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PostOrganizationGroup");
            // verify the required parameter 'postGroupRequest' is set
            if (postGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'postGroupRequest' when calling GroupsApi->PostOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postGroupRequest != null && postGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        public async System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PostOrganizationGroupAsync (int? organizationId, GroupPayload postGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = await PostOrganizationGroupAsyncWithHttpInfo(organizationId, postGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PostOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload postGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PostOrganizationGroup");
            // verify the required parameter 'postGroupRequest' is set
            if (postGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'postGroupRequest' when calling GroupsApi->PostOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postGroupRequest != null && postGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Adds group to project. Adds group to project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>string</returns>
        public string PostProjectGroup (int? workspaceId, GroupProjectGroupPayload projectGroupPost)
        {
             ApiResponse<string> localVarResponse = PostProjectGroupWithHttpInfo(workspaceId, projectGroupPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds group to project. Adds group to project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostProjectGroupWithHttpInfo (int? workspaceId, GroupProjectGroupPayload projectGroupPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PostProjectGroup");
            // verify the required parameter 'projectGroupPost' is set
            if (projectGroupPost == null)
                throw new ApiException(400, "Missing required parameter 'projectGroupPost' when calling GroupsApi->PostProjectGroup");

            var localVarPath = "/workspaces/{workspace_id}/project_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectGroupPost != null && projectGroupPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectGroupPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectGroupPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostProjectGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Adds group to project. Adds group to project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostProjectGroupAsync (int? workspaceId, GroupProjectGroupPayload projectGroupPost)
        {
             ApiResponse<string> localVarResponse = await PostProjectGroupAsyncWithHttpInfo(workspaceId, projectGroupPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds group to project. Adds group to project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectGroupPost">Input data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostProjectGroupAsyncWithHttpInfo (int? workspaceId, GroupProjectGroupPayload projectGroupPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PostProjectGroup");
            // verify the required parameter 'projectGroupPost' is set
            if (projectGroupPost == null)
                throw new ApiException(400, "Missing required parameter 'projectGroupPost' when calling GroupsApi->PostProjectGroup");

            var localVarPath = "/workspaces/{workspace_id}/project_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectGroupPost != null && projectGroupPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectGroupPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectGroupPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostProjectGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create group Creates a group in the specified workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ModelsGroup</returns>
        public ModelsGroup PostWorkspaceGroup (int? workspaceId, GroupNamePayload postGroupRequest)
        {
             ApiResponse<ModelsGroup> localVarResponse = PostWorkspaceGroupWithHttpInfo(workspaceId, postGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create group Creates a group in the specified workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ApiResponse of ModelsGroup</returns>
        public ApiResponse< ModelsGroup > PostWorkspaceGroupWithHttpInfo (int? workspaceId, GroupNamePayload postGroupRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PostWorkspaceGroup");
            // verify the required parameter 'postGroupRequest' is set
            if (postGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'postGroupRequest' when calling GroupsApi->PostWorkspaceGroup");

            var localVarPath = "/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postGroupRequest != null && postGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postGroupRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGroup)));
        }

        /// <summary>
        /// Create group Creates a group in the specified workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ModelsGroup</returns>
        public async System.Threading.Tasks.Task<ModelsGroup> PostWorkspaceGroupAsync (int? workspaceId, GroupNamePayload postGroupRequest)
        {
             ApiResponse<ModelsGroup> localVarResponse = await PostWorkspaceGroupAsyncWithHttpInfo(workspaceId, postGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create group Creates a group in the specified workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ApiResponse (ModelsGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsGroup>> PostWorkspaceGroupAsyncWithHttpInfo (int? workspaceId, GroupNamePayload postGroupRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PostWorkspaceGroup");
            // verify the required parameter 'postGroupRequest' is set
            if (postGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'postGroupRequest' when calling GroupsApi->PostWorkspaceGroup");

            var localVarPath = "/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postGroupRequest != null && postGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postGroupRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGroup)));
        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        public GroupOrganizationGroupResponse PutOrganizationGroup (int? organizationId, GroupPayload putGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = PutOrganizationGroupWithHttpInfo(organizationId, putGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        public ApiResponse< GroupOrganizationGroupResponse > PutOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload putGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PutOrganizationGroup");
            // verify the required parameter 'putGroupRequest' is set
            if (putGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'putGroupRequest' when calling GroupsApi->PutOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (putGroupRequest != null && putGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        public async System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PutOrganizationGroupAsync (int? organizationId, GroupPayload putGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = await PutOrganizationGroupAsyncWithHttpInfo(organizationId, putGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PutOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload putGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PutOrganizationGroup");
            // verify the required parameter 'putGroupRequest' is set
            if (putGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'putGroupRequest' when calling GroupsApi->PutOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (putGroupRequest != null && putGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        public string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = PutOrganizationWorkspacesAssignmentsWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling GroupsApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = await PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling GroupsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling GroupsApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update group Updates the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>ModelsGroup</returns>
        public ModelsGroup PutWorkspaceGroup (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest)
        {
             ApiResponse<ModelsGroup> localVarResponse = PutWorkspaceGroupWithHttpInfo(workspaceId, groupId, putGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update group Updates the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>ApiResponse of ModelsGroup</returns>
        public ApiResponse< ModelsGroup > PutWorkspaceGroupWithHttpInfo (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutWorkspaceGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->PutWorkspaceGroup");
            // verify the required parameter 'putGroupRequest' is set
            if (putGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'putGroupRequest' when calling GroupsApi->PutWorkspaceGroup");

            var localVarPath = "/workspaces/{workspace_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (putGroupRequest != null && putGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putGroupRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGroup)));
        }

        /// <summary>
        /// Update group Updates the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>Task of ModelsGroup</returns>
        public async System.Threading.Tasks.Task<ModelsGroup> PutWorkspaceGroupAsync (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest)
        {
             ApiResponse<ModelsGroup> localVarResponse = await PutWorkspaceGroupAsyncWithHttpInfo(workspaceId, groupId, putGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update group Updates the group.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="putGroupRequest">Input data for group update.</param>
        /// <returns>Task of ApiResponse (ModelsGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsGroup>> PutWorkspaceGroupAsyncWithHttpInfo (int? workspaceId, int? groupId, GroupNamePayload putGroupRequest)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling GroupsApi->PutWorkspaceGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->PutWorkspaceGroup");
            // verify the required parameter 'putGroupRequest' is set
            if (putGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'putGroupRequest' when calling GroupsApi->PutWorkspaceGroup");

            var localVarPath = "/workspaces/{workspace_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (putGroupRequest != null && putGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putGroupRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsGroup)));
        }

    }
}
