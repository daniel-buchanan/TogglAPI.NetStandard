/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationscustomerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsCustomer</returns>
        ModelsCustomer GetOrganizationCustomer (int? organizationId);

        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsCustomer</returns>
        ApiResponse<ModelsCustomer> GetOrganizationCustomerWithHttpInfo (int? organizationId);
        /// <summary>
        /// Retrieve unified customer
        /// </summary>
        /// <remarks>
        /// Retrieve unified customer belonging to the organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>CustomerUnifiedCustomerResponse</returns>
        CustomerUnifiedCustomerResponse GetUnifiedCustomer (int? organizationId);

        /// <summary>
        /// Retrieve unified customer
        /// </summary>
        /// <remarks>
        /// Retrieve unified customer belonging to the organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of CustomerUnifiedCustomerResponse</returns>
        ApiResponse<CustomerUnifiedCustomerResponse> GetUnifiedCustomerWithHttpInfo (int? organizationId);
        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ModelsContactDetail</returns>
        ModelsContactDetail PostOrganizationCustomer (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest);

        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ApiResponse of ModelsContactDetail</returns>
        ApiResponse<ModelsContactDetail> PostOrganizationCustomerWithHttpInfo (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest);
        /// <summary>
        /// Create unified customer
        /// </summary>
        /// <remarks>
        /// Creates unified customer for organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>CustomerUnifiedCustomerResponse</returns>
        CustomerUnifiedCustomerResponse PostUnifiedCustomer (int? organizationId);

        /// <summary>
        /// Create unified customer
        /// </summary>
        /// <remarks>
        /// Creates unified customer for organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of CustomerUnifiedCustomerResponse</returns>
        ApiResponse<CustomerUnifiedCustomerResponse> PostUnifiedCustomerWithHttpInfo (int? organizationId);
        /// <summary>
        /// Update unified customer
        /// </summary>
        /// <remarks>
        /// Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>CustomerUnifiedCustomerResponse</returns>
        CustomerUnifiedCustomerResponse PutUnifiedCustomer (int? organizationId);

        /// <summary>
        /// Update unified customer
        /// </summary>
        /// <remarks>
        /// Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of CustomerUnifiedCustomerResponse</returns>
        ApiResponse<CustomerUnifiedCustomerResponse> PutUnifiedCustomerWithHttpInfo (int? organizationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsCustomer</returns>
        System.Threading.Tasks.Task<ModelsCustomer> GetOrganizationCustomerAsync (int? organizationId);

        /// <summary>
        /// Customer
        /// </summary>
        /// <remarks>
        /// Allows to fetch customer data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsCustomer>> GetOrganizationCustomerAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Retrieve unified customer
        /// </summary>
        /// <remarks>
        /// Retrieve unified customer belonging to the organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of CustomerUnifiedCustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerUnifiedCustomerResponse> GetUnifiedCustomerAsync (int? organizationId);

        /// <summary>
        /// Retrieve unified customer
        /// </summary>
        /// <remarks>
        /// Retrieve unified customer belonging to the organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (CustomerUnifiedCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerUnifiedCustomerResponse>> GetUnifiedCustomerAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ModelsContactDetail</returns>
        System.Threading.Tasks.Task<ModelsContactDetail> PostOrganizationCustomerAsync (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest);

        /// <summary>
        /// ContactDetails
        /// </summary>
        /// <remarks>
        /// Allows to save contact details.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ApiResponse (ModelsContactDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsContactDetail>> PostOrganizationCustomerAsyncWithHttpInfo (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest);
        /// <summary>
        /// Create unified customer
        /// </summary>
        /// <remarks>
        /// Creates unified customer for organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of CustomerUnifiedCustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerUnifiedCustomerResponse> PostUnifiedCustomerAsync (int? organizationId);

        /// <summary>
        /// Create unified customer
        /// </summary>
        /// <remarks>
        /// Creates unified customer for organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (CustomerUnifiedCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerUnifiedCustomerResponse>> PostUnifiedCustomerAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Update unified customer
        /// </summary>
        /// <remarks>
        /// Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of CustomerUnifiedCustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerUnifiedCustomerResponse> PutUnifiedCustomerAsync (int? organizationId);

        /// <summary>
        /// Update unified customer
        /// </summary>
        /// <remarks>
        /// Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (CustomerUnifiedCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerUnifiedCustomerResponse>> PutUnifiedCustomerAsyncWithHttpInfo (int? organizationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationscustomerApi : IOrganizationscustomerApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationscustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationscustomerApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationscustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationscustomerApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsCustomer</returns>
        public ModelsCustomer GetOrganizationCustomer (int? organizationId)
        {
             ApiResponse<ModelsCustomer> localVarResponse = GetOrganizationCustomerWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsCustomer</returns>
        public ApiResponse< ModelsCustomer > GetOrganizationCustomerWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->GetOrganizationCustomer");

            var localVarPath = "/organizations/{organization_id}/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsCustomer)));
        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsCustomer</returns>
        public async System.Threading.Tasks.Task<ModelsCustomer> GetOrganizationCustomerAsync (int? organizationId)
        {
             ApiResponse<ModelsCustomer> localVarResponse = await GetOrganizationCustomerAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Customer Allows to fetch customer data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsCustomer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsCustomer>> GetOrganizationCustomerAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->GetOrganizationCustomer");

            var localVarPath = "/organizations/{organization_id}/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsCustomer)));
        }

        /// <summary>
        /// Retrieve unified customer Retrieve unified customer belonging to the organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>CustomerUnifiedCustomerResponse</returns>
        public CustomerUnifiedCustomerResponse GetUnifiedCustomer (int? organizationId)
        {
             ApiResponse<CustomerUnifiedCustomerResponse> localVarResponse = GetUnifiedCustomerWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve unified customer Retrieve unified customer belonging to the organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of CustomerUnifiedCustomerResponse</returns>
        public ApiResponse< CustomerUnifiedCustomerResponse > GetUnifiedCustomerWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->GetUnifiedCustomer");

            var localVarPath = "/organizations/{organization_id}/subscription/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnifiedCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUnifiedCustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerUnifiedCustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUnifiedCustomerResponse)));
        }

        /// <summary>
        /// Retrieve unified customer Retrieve unified customer belonging to the organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of CustomerUnifiedCustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerUnifiedCustomerResponse> GetUnifiedCustomerAsync (int? organizationId)
        {
             ApiResponse<CustomerUnifiedCustomerResponse> localVarResponse = await GetUnifiedCustomerAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve unified customer Retrieve unified customer belonging to the organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (CustomerUnifiedCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerUnifiedCustomerResponse>> GetUnifiedCustomerAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->GetUnifiedCustomer");

            var localVarPath = "/organizations/{organization_id}/subscription/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnifiedCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUnifiedCustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerUnifiedCustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUnifiedCustomerResponse)));
        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ModelsContactDetail</returns>
        public ModelsContactDetail PostOrganizationCustomer (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest)
        {
             ApiResponse<ModelsContactDetail> localVarResponse = PostOrganizationCustomerWithHttpInfo(organizationId, contactDetailRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>ApiResponse of ModelsContactDetail</returns>
        public ApiResponse< ModelsContactDetail > PostOrganizationCustomerWithHttpInfo (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->PostOrganizationCustomer");
            // verify the required parameter 'contactDetailRequest' is set
            if (contactDetailRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactDetailRequest' when calling OrganizationscustomerApi->PostOrganizationCustomer");

            var localVarPath = "/organizations/{organization_id}/customer/contact_detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (contactDetailRequest != null && contactDetailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactDetailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactDetailRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsContactDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsContactDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsContactDetail)));
        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ModelsContactDetail</returns>
        public async System.Threading.Tasks.Task<ModelsContactDetail> PostOrganizationCustomerAsync (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest)
        {
             ApiResponse<ModelsContactDetail> localVarResponse = await PostOrganizationCustomerAsyncWithHttpInfo(organizationId, contactDetailRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ContactDetails Allows to save contact details.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the workspace.</param>
        /// <param name="contactDetailRequest">Input data for contact details.</param>
        /// <returns>Task of ApiResponse (ModelsContactDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsContactDetail>> PostOrganizationCustomerAsyncWithHttpInfo (int? organizationId, SubscriptionContactDetailRequest contactDetailRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->PostOrganizationCustomer");
            // verify the required parameter 'contactDetailRequest' is set
            if (contactDetailRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactDetailRequest' when calling OrganizationscustomerApi->PostOrganizationCustomer");

            var localVarPath = "/organizations/{organization_id}/customer/contact_detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (contactDetailRequest != null && contactDetailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactDetailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactDetailRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsContactDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsContactDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsContactDetail)));
        }

        /// <summary>
        /// Create unified customer Creates unified customer for organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>CustomerUnifiedCustomerResponse</returns>
        public CustomerUnifiedCustomerResponse PostUnifiedCustomer (int? organizationId)
        {
             ApiResponse<CustomerUnifiedCustomerResponse> localVarResponse = PostUnifiedCustomerWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create unified customer Creates unified customer for organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of CustomerUnifiedCustomerResponse</returns>
        public ApiResponse< CustomerUnifiedCustomerResponse > PostUnifiedCustomerWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->PostUnifiedCustomer");

            var localVarPath = "/organizations/{organization_id}/subscription/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUnifiedCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUnifiedCustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerUnifiedCustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUnifiedCustomerResponse)));
        }

        /// <summary>
        /// Create unified customer Creates unified customer for organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of CustomerUnifiedCustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerUnifiedCustomerResponse> PostUnifiedCustomerAsync (int? organizationId)
        {
             ApiResponse<CustomerUnifiedCustomerResponse> localVarResponse = await PostUnifiedCustomerAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create unified customer Creates unified customer for organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (CustomerUnifiedCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerUnifiedCustomerResponse>> PostUnifiedCustomerAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->PostUnifiedCustomer");

            var localVarPath = "/organizations/{organization_id}/subscription/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUnifiedCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUnifiedCustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerUnifiedCustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUnifiedCustomerResponse)));
        }

        /// <summary>
        /// Update unified customer Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>CustomerUnifiedCustomerResponse</returns>
        public CustomerUnifiedCustomerResponse PutUnifiedCustomer (int? organizationId)
        {
             ApiResponse<CustomerUnifiedCustomerResponse> localVarResponse = PutUnifiedCustomerWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update unified customer Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of CustomerUnifiedCustomerResponse</returns>
        public ApiResponse< CustomerUnifiedCustomerResponse > PutUnifiedCustomerWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->PutUnifiedCustomer");

            var localVarPath = "/organizations/{organization_id}/subscription/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUnifiedCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUnifiedCustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerUnifiedCustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUnifiedCustomerResponse)));
        }

        /// <summary>
        /// Update unified customer Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of CustomerUnifiedCustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerUnifiedCustomerResponse> PutUnifiedCustomerAsync (int? organizationId)
        {
             ApiResponse<CustomerUnifiedCustomerResponse> localVarResponse = await PutUnifiedCustomerAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update unified customer Allows to update unified customer data. Customer name, email, country &amp; postal code are mandatory fields. Optional fields will be cleared if they don&#39;t have a value.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (CustomerUnifiedCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerUnifiedCustomerResponse>> PutUnifiedCustomerAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationscustomerApi->PutUnifiedCustomer");

            var localVarPath = "/organizations/{organization_id}/subscription/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUnifiedCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUnifiedCustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerUnifiedCustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUnifiedCustomerResponse)));
        }

    }
}
