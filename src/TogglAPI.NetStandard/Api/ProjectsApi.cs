/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Delete project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>int?</returns>
        int? DeleteWorkspaceProject (int? workspaceId, int? projectId, string teDeletionMode = null);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Delete project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> DeleteWorkspaceProjectWithHttpInfo (int? workspaceId, int? projectId, string teDeletionMode = null);
        /// <summary>
        /// Delete a project user from workspace projects users
        /// </summary>
        /// <remarks>
        /// Delete a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>int?</returns>
        int? DeleteWorkspaceProjectUsers (int? workspaceId, int? projectUserId);

        /// <summary>
        /// Delete a project user from workspace projects users
        /// </summary>
        /// <remarks>
        /// Delete a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> DeleteWorkspaceProjectUsersWithHttpInfo (int? workspaceId, int? projectUserId);
        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Get projects for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        List<ModelsProject> GetProjects (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null);

        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Get projects for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        ApiResponse<List<ModelsProject>> GetProjectsWithHttpInfo (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null);
        /// <summary>
        /// WorkspaceProjectsTemplates
        /// </summary>
        /// <remarks>
        /// Get projects templates for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>string</returns>
        string GetProjectsTemplates (int? workspaceId);

        /// <summary>
        /// WorkspaceProjectsTemplates
        /// </summary>
        /// <remarks>
        /// Get projects templates for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetProjectsTemplatesWithHttpInfo (int? workspaceId);
        /// <summary>
        /// SharedProject
        /// </summary>
        /// <remarks>
        /// Get shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>List&lt;ModelsSharedProject&gt;</returns>
        List<ModelsSharedProject> GetSharedProject (string hash);

        /// <summary>
        /// SharedProject
        /// </summary>
        /// <remarks>
        /// Get shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>ApiResponse of List&lt;ModelsSharedProject&gt;</returns>
        ApiResponse<List<ModelsSharedProject>> GetSharedProjectWithHttpInfo (string hash);
        /// <summary>
        /// Get Recurring Project Periods
        /// </summary>
        /// <remarks>
        /// Get recurring project periods for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>ModelsRecurringPeriod</returns>
        ModelsRecurringPeriod GetWorkspaceProjectPeriods (int? workspaceId, int? projectId, string startDate = null, string endDate = null);

        /// <summary>
        /// Get Recurring Project Periods
        /// </summary>
        /// <remarks>
        /// Get recurring project periods for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>ApiResponse of ModelsRecurringPeriod</returns>
        ApiResponse<ModelsRecurringPeriod> GetWorkspaceProjectPeriodsWithHttpInfo (int? workspaceId, int? projectId, string startDate = null, string endDate = null);
        /// <summary>
        /// Get workspace projects users
        /// </summary>
        /// <remarks>
        /// List all projects users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>List&lt;ModelsProjectUser&gt;</returns>
        List<ModelsProjectUser> GetWorkspaceProjectUsers (int? workspaceId, string projectIds = null, bool? withGroupMembers = null);

        /// <summary>
        /// Get workspace projects users
        /// </summary>
        /// <remarks>
        /// List all projects users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProjectUser&gt;</returns>
        ApiResponse<List<ModelsProjectUser>> GetWorkspaceProjectUsersWithHttpInfo (int? workspaceId, string projectIds = null, bool? withGroupMembers = null);
        /// <summary>
        /// Patch project users from workspace
        /// </summary>
        /// <remarks>
        /// Patch a list of project users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>UserOutput</returns>
        UserOutput PatchWorkspaceProjectUsersIds (int? workspaceId, List<int?> projectUserIds);

        /// <summary>
        /// Patch project users from workspace
        /// </summary>
        /// <remarks>
        /// Patch a list of project users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>ApiResponse of UserOutput</returns>
        ApiResponse<UserOutput> PatchWorkspaceProjectUsersIdsWithHttpInfo (int? workspaceId, List<int?> projectUserIds);
        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Bulk editing workspace projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>ProjectsPatchOutput</returns>
        ProjectsPatchOutput PatchWorkspaceProjects (int? workspaceId, string projectIds, ProjectsPatchPost patchInput);

        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Bulk editing workspace projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>ApiResponse of ProjectsPatchOutput</returns>
        ApiResponse<ProjectsPatchOutput> PatchWorkspaceProjectsWithHttpInfo (int? workspaceId, string projectIds, ProjectsPatchPost patchInput);
        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Create project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ModelsProject</returns>
        ModelsProject PostWorkspaceProjectCreate (int? workspaceId, ProjectPayload postInput);

        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Create project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ApiResponse of ModelsProject</returns>
        ApiResponse<ModelsProject> PostWorkspaceProjectCreateWithHttpInfo (int? workspaceId, ProjectPayload postInput);
        /// <summary>
        /// Add an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Include a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ModelsProjectUser</returns>
        ModelsProjectUser PostWorkspaceProjectUsers (int? workspaceId, UserPostPayload projectUser);

        /// <summary>
        /// Add an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Include a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ApiResponse of ModelsProjectUser</returns>
        ApiResponse<ModelsProjectUser> PostWorkspaceProjectUsersWithHttpInfo (int? workspaceId, UserPostPayload projectUser);
        /// <summary>
        /// SharedProjectTimeEntry
        /// </summary>
        /// <remarks>
        /// Create time-entry in shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>ModelsTimeEntry</returns>
        ModelsTimeEntry PutSharedProjectTimeEntries (string hash, TimeentryPayload workspaceTimeEntryPut);

        /// <summary>
        /// SharedProjectTimeEntry
        /// </summary>
        /// <remarks>
        /// Create time-entry in shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        ApiResponse<ModelsTimeEntry> PutSharedProjectTimeEntriesWithHttpInfo (string hash, TimeentryPayload workspaceTimeEntryPut);
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Update project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ModelsProject</returns>
        ModelsProject PutWorkspaceProject (int? workspaceId, int? projectId, ProjectPayload postInput);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Update project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ApiResponse of ModelsProject</returns>
        ApiResponse<ModelsProject> PutWorkspaceProjectWithHttpInfo (int? workspaceId, int? projectId, ProjectPayload postInput);
        /// <summary>
        /// Update an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Update the data for a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ModelsProjectUser</returns>
        ModelsProjectUser PutWorkspaceProjectUsers (int? workspaceId, int? projectUserId, UserPutPayload projectUser);

        /// <summary>
        /// Update an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Update the data for a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ApiResponse of ModelsProjectUser</returns>
        ApiResponse<ModelsProjectUser> PutWorkspaceProjectUsersWithHttpInfo (int? workspaceId, int? projectUserId, UserPutPayload projectUser);
        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects billable amounts
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        List<ModelsProject> WorkspacesWorkspaceIdProjectsBillableAmountsPost (int? workspaceId, ProjectsPayload postInput);

        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects billable amounts
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        ApiResponse<List<ModelsProject>> WorkspacesWorkspaceIdProjectsBillableAmountsPostWithHttpInfo (int? workspaceId, ProjectsPayload postInput);
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ModelsProject</returns>
        ModelsProject WorkspacesWorkspaceIdProjectsProjectIdGet (int? workspaceId, int? projectId);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ApiResponse of ModelsProject</returns>
        ApiResponse<ModelsProject> WorkspacesWorkspaceIdProjectsProjectIdGetWithHttpInfo (int? workspaceId, int? projectId);
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ModelsProjectStatistics</returns>
        ModelsProjectStatistics WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet (int? workspaceId, int? projectId);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ApiResponse of ModelsProjectStatistics</returns>
        ApiResponse<ModelsProjectStatistics> WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetWithHttpInfo (int? workspaceId, int? projectId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Delete project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> DeleteWorkspaceProjectAsync (int? workspaceId, int? projectId, string teDeletionMode = null);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Delete project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> DeleteWorkspaceProjectAsyncWithHttpInfo (int? workspaceId, int? projectId, string teDeletionMode = null);
        /// <summary>
        /// Delete a project user from workspace projects users
        /// </summary>
        /// <remarks>
        /// Delete a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> DeleteWorkspaceProjectUsersAsync (int? workspaceId, int? projectUserId);

        /// <summary>
        /// Delete a project user from workspace projects users
        /// </summary>
        /// <remarks>
        /// Delete a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> DeleteWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, int? projectUserId);
        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Get projects for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsProject>> GetProjectsAsync (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null);

        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Get projects for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> GetProjectsAsyncWithHttpInfo (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null);
        /// <summary>
        /// WorkspaceProjectsTemplates
        /// </summary>
        /// <remarks>
        /// Get projects templates for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetProjectsTemplatesAsync (int? workspaceId);

        /// <summary>
        /// WorkspaceProjectsTemplates
        /// </summary>
        /// <remarks>
        /// Get projects templates for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetProjectsTemplatesAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// SharedProject
        /// </summary>
        /// <remarks>
        /// Get shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>Task of List&lt;ModelsSharedProject&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsSharedProject>> GetSharedProjectAsync (string hash);

        /// <summary>
        /// SharedProject
        /// </summary>
        /// <remarks>
        /// Get shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSharedProject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsSharedProject>>> GetSharedProjectAsyncWithHttpInfo (string hash);
        /// <summary>
        /// Get Recurring Project Periods
        /// </summary>
        /// <remarks>
        /// Get recurring project periods for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>Task of ModelsRecurringPeriod</returns>
        System.Threading.Tasks.Task<ModelsRecurringPeriod> GetWorkspaceProjectPeriodsAsync (int? workspaceId, int? projectId, string startDate = null, string endDate = null);

        /// <summary>
        /// Get Recurring Project Periods
        /// </summary>
        /// <remarks>
        /// Get recurring project periods for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>Task of ApiResponse (ModelsRecurringPeriod)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsRecurringPeriod>> GetWorkspaceProjectPeriodsAsyncWithHttpInfo (int? workspaceId, int? projectId, string startDate = null, string endDate = null);
        /// <summary>
        /// Get workspace projects users
        /// </summary>
        /// <remarks>
        /// List all projects users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>Task of List&lt;ModelsProjectUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsProjectUser>> GetWorkspaceProjectUsersAsync (int? workspaceId, string projectIds = null, bool? withGroupMembers = null);

        /// <summary>
        /// Get workspace projects users
        /// </summary>
        /// <remarks>
        /// List all projects users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProjectUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsProjectUser>>> GetWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, string projectIds = null, bool? withGroupMembers = null);
        /// <summary>
        /// Patch project users from workspace
        /// </summary>
        /// <remarks>
        /// Patch a list of project users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>Task of UserOutput</returns>
        System.Threading.Tasks.Task<UserOutput> PatchWorkspaceProjectUsersIdsAsync (int? workspaceId, List<int?> projectUserIds);

        /// <summary>
        /// Patch project users from workspace
        /// </summary>
        /// <remarks>
        /// Patch a list of project users for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>Task of ApiResponse (UserOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserOutput>> PatchWorkspaceProjectUsersIdsAsyncWithHttpInfo (int? workspaceId, List<int?> projectUserIds);
        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Bulk editing workspace projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>Task of ProjectsPatchOutput</returns>
        System.Threading.Tasks.Task<ProjectsPatchOutput> PatchWorkspaceProjectsAsync (int? workspaceId, string projectIds, ProjectsPatchPost patchInput);

        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Bulk editing workspace projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>Task of ApiResponse (ProjectsPatchOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsPatchOutput>> PatchWorkspaceProjectsAsyncWithHttpInfo (int? workspaceId, string projectIds, ProjectsPatchPost patchInput);
        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Create project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ModelsProject</returns>
        System.Threading.Tasks.Task<ModelsProject> PostWorkspaceProjectCreateAsync (int? workspaceId, ProjectPayload postInput);

        /// <summary>
        /// WorkspaceProjects
        /// </summary>
        /// <remarks>
        /// Create project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ApiResponse (ModelsProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsProject>> PostWorkspaceProjectCreateAsyncWithHttpInfo (int? workspaceId, ProjectPayload postInput);
        /// <summary>
        /// Add an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Include a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ModelsProjectUser</returns>
        System.Threading.Tasks.Task<ModelsProjectUser> PostWorkspaceProjectUsersAsync (int? workspaceId, UserPostPayload projectUser);

        /// <summary>
        /// Add an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Include a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ApiResponse (ModelsProjectUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsProjectUser>> PostWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, UserPostPayload projectUser);
        /// <summary>
        /// SharedProjectTimeEntry
        /// </summary>
        /// <remarks>
        /// Create time-entry in shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        System.Threading.Tasks.Task<ModelsTimeEntry> PutSharedProjectTimeEntriesAsync (string hash, TimeentryPayload workspaceTimeEntryPut);

        /// <summary>
        /// SharedProjectTimeEntry
        /// </summary>
        /// <remarks>
        /// Create time-entry in shared project for the given hash.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PutSharedProjectTimeEntriesAsyncWithHttpInfo (string hash, TimeentryPayload workspaceTimeEntryPut);
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Update project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ModelsProject</returns>
        System.Threading.Tasks.Task<ModelsProject> PutWorkspaceProjectAsync (int? workspaceId, int? projectId, ProjectPayload postInput);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Update project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ApiResponse (ModelsProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsProject>> PutWorkspaceProjectAsyncWithHttpInfo (int? workspaceId, int? projectId, ProjectPayload postInput);
        /// <summary>
        /// Update an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Update the data for a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ModelsProjectUser</returns>
        System.Threading.Tasks.Task<ModelsProjectUser> PutWorkspaceProjectUsersAsync (int? workspaceId, int? projectUserId, UserPutPayload projectUser);

        /// <summary>
        /// Update an user into workspace projects users
        /// </summary>
        /// <remarks>
        /// Update the data for a project user for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ApiResponse (ModelsProjectUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsProjectUser>> PutWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, int? projectUserId, UserPutPayload projectUser);
        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects billable amounts
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsProject>> WorkspacesWorkspaceIdProjectsBillableAmountsPostAsync (int? workspaceId, ProjectsPayload postInput);

        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects billable amounts
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> WorkspacesWorkspaceIdProjectsBillableAmountsPostAsyncWithHttpInfo (int? workspaceId, ProjectsPayload postInput);
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ModelsProject</returns>
        System.Threading.Tasks.Task<ModelsProject> WorkspacesWorkspaceIdProjectsProjectIdGetAsync (int? workspaceId, int? projectId);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get project for given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ApiResponse (ModelsProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsProject>> WorkspacesWorkspaceIdProjectsProjectIdGetAsyncWithHttpInfo (int? workspaceId, int? projectId);
        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ModelsProjectStatistics</returns>
        System.Threading.Tasks.Task<ModelsProjectStatistics> WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetAsync (int? workspaceId, int? projectId);

        /// <summary>
        /// WorkspaceProject
        /// </summary>
        /// <remarks>
        /// Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ApiResponse (ModelsProjectStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsProjectStatistics>> WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetAsyncWithHttpInfo (int? workspaceId, int? projectId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// WorkspaceProject Delete project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>int?</returns>
        public int? DeleteWorkspaceProject (int? workspaceId, int? projectId, string teDeletionMode = null)
        {
             ApiResponse<int?> localVarResponse = DeleteWorkspaceProjectWithHttpInfo(workspaceId, projectId, teDeletionMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProject Delete project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > DeleteWorkspaceProjectWithHttpInfo (int? workspaceId, int? projectId, string teDeletionMode = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->DeleteWorkspaceProject");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->DeleteWorkspaceProject");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (teDeletionMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "teDeletionMode", teDeletionMode)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// WorkspaceProject Delete project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> DeleteWorkspaceProjectAsync (int? workspaceId, int? projectId, string teDeletionMode = null)
        {
             ApiResponse<int?> localVarResponse = await DeleteWorkspaceProjectAsyncWithHttpInfo(workspaceId, projectId, teDeletionMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProject Delete project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="teDeletionMode">Time entries deletion mode: &#39;delete&#39; or &#39;unassign&#39; (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> DeleteWorkspaceProjectAsyncWithHttpInfo (int? workspaceId, int? projectId, string teDeletionMode = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->DeleteWorkspaceProject");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->DeleteWorkspaceProject");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (teDeletionMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "teDeletionMode", teDeletionMode)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Delete a project user from workspace projects users Delete a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>int?</returns>
        public int? DeleteWorkspaceProjectUsers (int? workspaceId, int? projectUserId)
        {
             ApiResponse<int?> localVarResponse = DeleteWorkspaceProjectUsersWithHttpInfo(workspaceId, projectUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a project user from workspace projects users Delete a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > DeleteWorkspaceProjectUsersWithHttpInfo (int? workspaceId, int? projectUserId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->DeleteWorkspaceProjectUsers");
            // verify the required parameter 'projectUserId' is set
            if (projectUserId == null)
                throw new ApiException(400, "Missing required parameter 'projectUserId' when calling ProjectsApi->DeleteWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users/{project_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUserId != null) localVarPathParams.Add("project_user_id", this.Configuration.ApiClient.ParameterToString(projectUserId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Delete a project user from workspace projects users Delete a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> DeleteWorkspaceProjectUsersAsync (int? workspaceId, int? projectUserId)
        {
             ApiResponse<int?> localVarResponse = await DeleteWorkspaceProjectUsersAsyncWithHttpInfo(workspaceId, projectUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a project user from workspace projects users Delete a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> DeleteWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, int? projectUserId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->DeleteWorkspaceProjectUsers");
            // verify the required parameter 'projectUserId' is set
            if (projectUserId == null)
                throw new ApiException(400, "Missing required parameter 'projectUserId' when calling ProjectsApi->DeleteWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users/{project_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUserId != null) localVarPathParams.Add("project_user_id", this.Configuration.ApiClient.ParameterToString(projectUserId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// WorkspaceProjects Get projects for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        public List<ModelsProject> GetProjects (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = GetProjectsWithHttpInfo(workspaceId, name, page, sortField, sortOrder, onlyTemplates, active, since, billable, userIds, clientIds, groupIds, statuses, onlyMe, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjects Get projects for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        public ApiResponse< List<ModelsProject> > GetProjectsWithHttpInfo (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'sortField' is set
            if (sortField == null)
                throw new ApiException(400, "Missing required parameter 'sortField' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'sortOrder' is set
            if (sortOrder == null)
                throw new ApiException(400, "Missing required parameter 'sortOrder' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'onlyTemplates' is set
            if (onlyTemplates == null)
                throw new ApiException(400, "Missing required parameter 'onlyTemplates' when calling ProjectsApi->GetProjects");

            var localVarPath = "/workspaces/{workspace_id}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (billable != null) localVarFormParams.Add("billable", this.Configuration.ApiClient.ParameterToString(billable)); // form parameter
            if (userIds != null) localVarFormParams.Add("user_ids", this.Configuration.ApiClient.ParameterToString(userIds)); // form parameter
            if (clientIds != null) localVarFormParams.Add("client_ids", this.Configuration.ApiClient.ParameterToString(clientIds)); // form parameter
            if (groupIds != null) localVarFormParams.Add("group_ids", this.Configuration.ApiClient.ParameterToString(groupIds)); // form parameter
            if (statuses != null) localVarFormParams.Add("statuses", this.Configuration.ApiClient.ParameterToString(statuses)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (page != null) localVarFormParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (sortField != null) localVarFormParams.Add("sort_field", this.Configuration.ApiClient.ParameterToString(sortField)); // form parameter
            if (sortOrder != null) localVarFormParams.Add("sort_order", this.Configuration.ApiClient.ParameterToString(sortOrder)); // form parameter
            if (onlyTemplates != null) localVarFormParams.Add("only_templates", this.Configuration.ApiClient.ParameterToString(onlyTemplates)); // form parameter
            if (onlyMe != null) localVarFormParams.Add("only_me", this.Configuration.ApiClient.ParameterToString(onlyMe)); // form parameter
            if (perPage != null) localVarFormParams.Add("per_page", this.Configuration.ApiClient.ParameterToString(perPage)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// WorkspaceProjects Get projects for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsProject>> GetProjectsAsync (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = await GetProjectsAsyncWithHttpInfo(workspaceId, name, page, sortField, sortOrder, onlyTemplates, active, since, billable, userIds, clientIds, groupIds, statuses, onlyMe, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjects Get projects for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="name">name</param>
        /// <param name="page">page</param>
        /// <param name="sortField">sort_field</param>
        /// <param name="sortOrder">sort_order</param>
        /// <param name="onlyTemplates">only_templates</param>
        /// <param name="active">Return active or inactive project. You can pass &#39;both&#39; to get both active and inactive projects. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="billable">billable (optional)</param>
        /// <param name="userIds">user_ids (optional)</param>
        /// <param name="clientIds">client_ids (optional)</param>
        /// <param name="groupIds">group_ids (optional)</param>
        /// <param name="statuses">statuses (optional)</param>
        /// <param name="onlyMe">get only projects assigned to the current user (optional)</param>
        /// <param name="perPage">Number of items per page, default 151. Cannot exceed 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> GetProjectsAsyncWithHttpInfo (int? workspaceId, string name, int? page, string sortField, string sortOrder, bool? onlyTemplates, bool? active = null, int? since = null, bool? billable = null, List<string> userIds = null, List<string> clientIds = null, List<string> groupIds = null, List<string> statuses = null, bool? onlyMe = null, int? perPage = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'sortField' is set
            if (sortField == null)
                throw new ApiException(400, "Missing required parameter 'sortField' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'sortOrder' is set
            if (sortOrder == null)
                throw new ApiException(400, "Missing required parameter 'sortOrder' when calling ProjectsApi->GetProjects");
            // verify the required parameter 'onlyTemplates' is set
            if (onlyTemplates == null)
                throw new ApiException(400, "Missing required parameter 'onlyTemplates' when calling ProjectsApi->GetProjects");

            var localVarPath = "/workspaces/{workspace_id}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (billable != null) localVarFormParams.Add("billable", this.Configuration.ApiClient.ParameterToString(billable)); // form parameter
            if (userIds != null) localVarFormParams.Add("user_ids", this.Configuration.ApiClient.ParameterToString(userIds)); // form parameter
            if (clientIds != null) localVarFormParams.Add("client_ids", this.Configuration.ApiClient.ParameterToString(clientIds)); // form parameter
            if (groupIds != null) localVarFormParams.Add("group_ids", this.Configuration.ApiClient.ParameterToString(groupIds)); // form parameter
            if (statuses != null) localVarFormParams.Add("statuses", this.Configuration.ApiClient.ParameterToString(statuses)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (page != null) localVarFormParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (sortField != null) localVarFormParams.Add("sort_field", this.Configuration.ApiClient.ParameterToString(sortField)); // form parameter
            if (sortOrder != null) localVarFormParams.Add("sort_order", this.Configuration.ApiClient.ParameterToString(sortOrder)); // form parameter
            if (onlyTemplates != null) localVarFormParams.Add("only_templates", this.Configuration.ApiClient.ParameterToString(onlyTemplates)); // form parameter
            if (onlyMe != null) localVarFormParams.Add("only_me", this.Configuration.ApiClient.ParameterToString(onlyMe)); // form parameter
            if (perPage != null) localVarFormParams.Add("per_page", this.Configuration.ApiClient.ParameterToString(perPage)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// WorkspaceProjectsTemplates Get projects templates for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>string</returns>
        public string GetProjectsTemplates (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = GetProjectsTemplatesWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjectsTemplates Get projects templates for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetProjectsTemplatesWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetProjectsTemplates");

            var localVarPath = "/workspaces/{workspace_id}/projects/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// WorkspaceProjectsTemplates Get projects templates for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetProjectsTemplatesAsync (int? workspaceId)
        {
             ApiResponse<string> localVarResponse = await GetProjectsTemplatesAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjectsTemplates Get projects templates for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetProjectsTemplatesAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetProjectsTemplates");

            var localVarPath = "/workspaces/{workspace_id}/projects/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// SharedProject Get shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>List&lt;ModelsSharedProject&gt;</returns>
        public List<ModelsSharedProject> GetSharedProject (string hash)
        {
             ApiResponse<List<ModelsSharedProject>> localVarResponse = GetSharedProjectWithHttpInfo(hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// SharedProject Get shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>ApiResponse of List&lt;ModelsSharedProject&gt;</returns>
        public ApiResponse< List<ModelsSharedProject> > GetSharedProjectWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ProjectsApi->GetSharedProject");

            var localVarPath = "/shared-project/{hash}/project";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarPathParams.Add("hash", this.Configuration.ApiClient.ParameterToString(hash)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSharedProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSharedProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSharedProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSharedProject>)));
        }

        /// <summary>
        /// SharedProject Get shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>Task of List&lt;ModelsSharedProject&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsSharedProject>> GetSharedProjectAsync (string hash)
        {
             ApiResponse<List<ModelsSharedProject>> localVarResponse = await GetSharedProjectAsyncWithHttpInfo(hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// SharedProject Get shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsSharedProject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsSharedProject>>> GetSharedProjectAsyncWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ProjectsApi->GetSharedProject");

            var localVarPath = "/shared-project/{hash}/project";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarPathParams.Add("hash", this.Configuration.ApiClient.ParameterToString(hash)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSharedProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsSharedProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsSharedProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsSharedProject>)));
        }

        /// <summary>
        /// Get Recurring Project Periods Get recurring project periods for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>ModelsRecurringPeriod</returns>
        public ModelsRecurringPeriod GetWorkspaceProjectPeriods (int? workspaceId, int? projectId, string startDate = null, string endDate = null)
        {
             ApiResponse<ModelsRecurringPeriod> localVarResponse = GetWorkspaceProjectPeriodsWithHttpInfo(workspaceId, projectId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recurring Project Periods Get recurring project periods for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>ApiResponse of ModelsRecurringPeriod</returns>
        public ApiResponse< ModelsRecurringPeriod > GetWorkspaceProjectPeriodsWithHttpInfo (int? workspaceId, int? projectId, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetWorkspaceProjectPeriods");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetWorkspaceProjectPeriods");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/periods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectPeriods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsRecurringPeriod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsRecurringPeriod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsRecurringPeriod)));
        }

        /// <summary>
        /// Get Recurring Project Periods Get recurring project periods for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>Task of ModelsRecurringPeriod</returns>
        public async System.Threading.Tasks.Task<ModelsRecurringPeriod> GetWorkspaceProjectPeriodsAsync (int? workspaceId, int? projectId, string startDate = null, string endDate = null)
        {
             ApiResponse<ModelsRecurringPeriod> localVarResponse = await GetWorkspaceProjectPeriodsAsyncWithHttpInfo(workspaceId, projectId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Recurring Project Periods Get recurring project periods for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="startDate">Smallest boundary date to search for recurring periods (optional)</param>
        /// <param name="endDate">Biggest boundary date to search for for recurring periods (optional)</param>
        /// <returns>Task of ApiResponse (ModelsRecurringPeriod)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsRecurringPeriod>> GetWorkspaceProjectPeriodsAsyncWithHttpInfo (int? workspaceId, int? projectId, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetWorkspaceProjectPeriods");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetWorkspaceProjectPeriods");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/periods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectPeriods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsRecurringPeriod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsRecurringPeriod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsRecurringPeriod)));
        }

        /// <summary>
        /// Get workspace projects users List all projects users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>List&lt;ModelsProjectUser&gt;</returns>
        public List<ModelsProjectUser> GetWorkspaceProjectUsers (int? workspaceId, string projectIds = null, bool? withGroupMembers = null)
        {
             ApiResponse<List<ModelsProjectUser>> localVarResponse = GetWorkspaceProjectUsersWithHttpInfo(workspaceId, projectIds, withGroupMembers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace projects users List all projects users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProjectUser&gt;</returns>
        public ApiResponse< List<ModelsProjectUser> > GetWorkspaceProjectUsersWithHttpInfo (int? workspaceId, string projectIds = null, bool? withGroupMembers = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_ids", projectIds)); // query parameter
            if (withGroupMembers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_group_members", withGroupMembers)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProjectUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProjectUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProjectUser>)));
        }

        /// <summary>
        /// Get workspace projects users List all projects users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>Task of List&lt;ModelsProjectUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsProjectUser>> GetWorkspaceProjectUsersAsync (int? workspaceId, string projectIds = null, bool? withGroupMembers = null)
        {
             ApiResponse<List<ModelsProjectUser>> localVarResponse = await GetWorkspaceProjectUsersAsyncWithHttpInfo(workspaceId, projectIds, withGroupMembers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace projects users List all projects users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of projects, comma-separated (optional)</param>
        /// <param name="withGroupMembers">Include group members (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProjectUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsProjectUser>>> GetWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, string projectIds = null, bool? withGroupMembers = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->GetWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_ids", projectIds)); // query parameter
            if (withGroupMembers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_group_members", withGroupMembers)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProjectUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProjectUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProjectUser>)));
        }

        /// <summary>
        /// Patch project users from workspace Patch a list of project users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>UserOutput</returns>
        public UserOutput PatchWorkspaceProjectUsersIds (int? workspaceId, List<int?> projectUserIds)
        {
             ApiResponse<UserOutput> localVarResponse = PatchWorkspaceProjectUsersIdsWithHttpInfo(workspaceId, projectUserIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch project users from workspace Patch a list of project users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>ApiResponse of UserOutput</returns>
        public ApiResponse< UserOutput > PatchWorkspaceProjectUsersIdsWithHttpInfo (int? workspaceId, List<int?> projectUserIds)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PatchWorkspaceProjectUsersIds");
            // verify the required parameter 'projectUserIds' is set
            if (projectUserIds == null)
                throw new ApiException(400, "Missing required parameter 'projectUserIds' when calling ProjectsApi->PatchWorkspaceProjectUsersIds");

            var localVarPath = "/workspaces/{workspace_id}/project_users/{project_user_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUserIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "project_user_ids", projectUserIds)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceProjectUsersIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserOutput)));
        }

        /// <summary>
        /// Patch project users from workspace Patch a list of project users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>Task of UserOutput</returns>
        public async System.Threading.Tasks.Task<UserOutput> PatchWorkspaceProjectUsersIdsAsync (int? workspaceId, List<int?> projectUserIds)
        {
             ApiResponse<UserOutput> localVarResponse = await PatchWorkspaceProjectUsersIdsAsyncWithHttpInfo(workspaceId, projectUserIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch project users from workspace Patch a list of project users for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserIds">Numeric IDs of the project users</param>
        /// <returns>Task of ApiResponse (UserOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserOutput>> PatchWorkspaceProjectUsersIdsAsyncWithHttpInfo (int? workspaceId, List<int?> projectUserIds)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PatchWorkspaceProjectUsersIds");
            // verify the required parameter 'projectUserIds' is set
            if (projectUserIds == null)
                throw new ApiException(400, "Missing required parameter 'projectUserIds' when calling ProjectsApi->PatchWorkspaceProjectUsersIds");

            var localVarPath = "/workspaces/{workspace_id}/project_users/{project_user_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUserIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "project_user_ids", projectUserIds)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceProjectUsersIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserOutput)));
        }

        /// <summary>
        /// WorkspaceProjects Bulk editing workspace projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>ProjectsPatchOutput</returns>
        public ProjectsPatchOutput PatchWorkspaceProjects (int? workspaceId, string projectIds, ProjectsPatchPost patchInput)
        {
             ApiResponse<ProjectsPatchOutput> localVarResponse = PatchWorkspaceProjectsWithHttpInfo(workspaceId, projectIds, patchInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjects Bulk editing workspace projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>ApiResponse of ProjectsPatchOutput</returns>
        public ApiResponse< ProjectsPatchOutput > PatchWorkspaceProjectsWithHttpInfo (int? workspaceId, string projectIds, ProjectsPatchPost patchInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PatchWorkspaceProjects");
            // verify the required parameter 'projectIds' is set
            if (projectIds == null)
                throw new ApiException(400, "Missing required parameter 'projectIds' when calling ProjectsApi->PatchWorkspaceProjects");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling ProjectsApi->PatchWorkspaceProjects");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectIds != null) localVarPathParams.Add("project_ids", this.Configuration.ApiClient.ParameterToString(projectIds)); // path parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsPatchOutput)));
        }

        /// <summary>
        /// WorkspaceProjects Bulk editing workspace projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>Task of ProjectsPatchOutput</returns>
        public async System.Threading.Tasks.Task<ProjectsPatchOutput> PatchWorkspaceProjectsAsync (int? workspaceId, string projectIds, ProjectsPatchPost patchInput)
        {
             ApiResponse<ProjectsPatchOutput> localVarResponse = await PatchWorkspaceProjectsAsyncWithHttpInfo(workspaceId, projectIds, patchInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjects Bulk editing workspace projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectIds">Numeric IDs of project ids, separated by comma. E.g.: &#x60;204301830,202700150,202687559&#x60;</param>
        /// <param name="patchInput">Array of batch operations</param>
        /// <returns>Task of ApiResponse (ProjectsPatchOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsPatchOutput>> PatchWorkspaceProjectsAsyncWithHttpInfo (int? workspaceId, string projectIds, ProjectsPatchPost patchInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PatchWorkspaceProjects");
            // verify the required parameter 'projectIds' is set
            if (projectIds == null)
                throw new ApiException(400, "Missing required parameter 'projectIds' when calling ProjectsApi->PatchWorkspaceProjects");
            // verify the required parameter 'patchInput' is set
            if (patchInput == null)
                throw new ApiException(400, "Missing required parameter 'patchInput' when calling ProjectsApi->PatchWorkspaceProjects");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectIds != null) localVarPathParams.Add("project_ids", this.Configuration.ApiClient.ParameterToString(projectIds)); // path parameter
            if (patchInput != null && patchInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWorkspaceProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsPatchOutput)));
        }

        /// <summary>
        /// WorkspaceProjects Create project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ModelsProject</returns>
        public ModelsProject PostWorkspaceProjectCreate (int? workspaceId, ProjectPayload postInput)
        {
             ApiResponse<ModelsProject> localVarResponse = PostWorkspaceProjectCreateWithHttpInfo(workspaceId, postInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProjects Create project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ApiResponse of ModelsProject</returns>
        public ApiResponse< ModelsProject > PostWorkspaceProjectCreateWithHttpInfo (int? workspaceId, ProjectPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PostWorkspaceProjectCreate");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling ProjectsApi->PostWorkspaceProjectCreate");

            var localVarPath = "/workspaces/{workspace_id}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceProjectCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProject)));
        }

        /// <summary>
        /// WorkspaceProjects Create project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ModelsProject</returns>
        public async System.Threading.Tasks.Task<ModelsProject> PostWorkspaceProjectCreateAsync (int? workspaceId, ProjectPayload postInput)
        {
             ApiResponse<ModelsProject> localVarResponse = await PostWorkspaceProjectCreateAsyncWithHttpInfo(workspaceId, postInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProjects Create project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ApiResponse (ModelsProject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsProject>> PostWorkspaceProjectCreateAsyncWithHttpInfo (int? workspaceId, ProjectPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PostWorkspaceProjectCreate");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling ProjectsApi->PostWorkspaceProjectCreate");

            var localVarPath = "/workspaces/{workspace_id}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceProjectCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProject)));
        }

        /// <summary>
        /// Add an user into workspace projects users Include a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ModelsProjectUser</returns>
        public ModelsProjectUser PostWorkspaceProjectUsers (int? workspaceId, UserPostPayload projectUser)
        {
             ApiResponse<ModelsProjectUser> localVarResponse = PostWorkspaceProjectUsersWithHttpInfo(workspaceId, projectUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an user into workspace projects users Include a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ApiResponse of ModelsProjectUser</returns>
        public ApiResponse< ModelsProjectUser > PostWorkspaceProjectUsersWithHttpInfo (int? workspaceId, UserPostPayload projectUser)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PostWorkspaceProjectUsers");
            // verify the required parameter 'projectUser' is set
            if (projectUser == null)
                throw new ApiException(400, "Missing required parameter 'projectUser' when calling ProjectsApi->PostWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUser != null && projectUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUser; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProjectUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProjectUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProjectUser)));
        }

        /// <summary>
        /// Add an user into workspace projects users Include a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ModelsProjectUser</returns>
        public async System.Threading.Tasks.Task<ModelsProjectUser> PostWorkspaceProjectUsersAsync (int? workspaceId, UserPostPayload projectUser)
        {
             ApiResponse<ModelsProjectUser> localVarResponse = await PostWorkspaceProjectUsersAsyncWithHttpInfo(workspaceId, projectUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an user into workspace projects users Include a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ApiResponse (ModelsProjectUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsProjectUser>> PostWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, UserPostPayload projectUser)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PostWorkspaceProjectUsers");
            // verify the required parameter 'projectUser' is set
            if (projectUser == null)
                throw new ApiException(400, "Missing required parameter 'projectUser' when calling ProjectsApi->PostWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUser != null && projectUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUser; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProjectUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProjectUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProjectUser)));
        }

        /// <summary>
        /// SharedProjectTimeEntry Create time-entry in shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>ModelsTimeEntry</returns>
        public ModelsTimeEntry PutSharedProjectTimeEntries (string hash, TimeentryPayload workspaceTimeEntryPut)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = PutSharedProjectTimeEntriesWithHttpInfo(hash, workspaceTimeEntryPut);
             return localVarResponse.Data;
        }

        /// <summary>
        /// SharedProjectTimeEntry Create time-entry in shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>ApiResponse of ModelsTimeEntry</returns>
        public ApiResponse< ModelsTimeEntry > PutSharedProjectTimeEntriesWithHttpInfo (string hash, TimeentryPayload workspaceTimeEntryPut)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ProjectsApi->PutSharedProjectTimeEntries");
            // verify the required parameter 'workspaceTimeEntryPut' is set
            if (workspaceTimeEntryPut == null)
                throw new ApiException(400, "Missing required parameter 'workspaceTimeEntryPut' when calling ProjectsApi->PutSharedProjectTimeEntries");

            var localVarPath = "/shared-project/{hash}/time-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarPathParams.Add("hash", this.Configuration.ApiClient.ParameterToString(hash)); // path parameter
            if (workspaceTimeEntryPut != null && workspaceTimeEntryPut.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceTimeEntryPut); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceTimeEntryPut; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSharedProjectTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// SharedProjectTimeEntry Create time-entry in shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>Task of ModelsTimeEntry</returns>
        public async System.Threading.Tasks.Task<ModelsTimeEntry> PutSharedProjectTimeEntriesAsync (string hash, TimeentryPayload workspaceTimeEntryPut)
        {
             ApiResponse<ModelsTimeEntry> localVarResponse = await PutSharedProjectTimeEntriesAsyncWithHttpInfo(hash, workspaceTimeEntryPut);
             return localVarResponse.Data;

        }

        /// <summary>
        /// SharedProjectTimeEntry Create time-entry in shared project for the given hash.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Share hash identifier</param>
        /// <param name="workspaceTimeEntryPut">TimeEntry parameters.</param>
        /// <returns>Task of ApiResponse (ModelsTimeEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTimeEntry>> PutSharedProjectTimeEntriesAsyncWithHttpInfo (string hash, TimeentryPayload workspaceTimeEntryPut)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ProjectsApi->PutSharedProjectTimeEntries");
            // verify the required parameter 'workspaceTimeEntryPut' is set
            if (workspaceTimeEntryPut == null)
                throw new ApiException(400, "Missing required parameter 'workspaceTimeEntryPut' when calling ProjectsApi->PutSharedProjectTimeEntries");

            var localVarPath = "/shared-project/{hash}/time-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarPathParams.Add("hash", this.Configuration.ApiClient.ParameterToString(hash)); // path parameter
            if (workspaceTimeEntryPut != null && workspaceTimeEntryPut.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workspaceTimeEntryPut); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceTimeEntryPut; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSharedProjectTimeEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTimeEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTimeEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTimeEntry)));
        }

        /// <summary>
        /// WorkspaceProject Update project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ModelsProject</returns>
        public ModelsProject PutWorkspaceProject (int? workspaceId, int? projectId, ProjectPayload postInput)
        {
             ApiResponse<ModelsProject> localVarResponse = PutWorkspaceProjectWithHttpInfo(workspaceId, projectId, postInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProject Update project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>ApiResponse of ModelsProject</returns>
        public ApiResponse< ModelsProject > PutWorkspaceProjectWithHttpInfo (int? workspaceId, int? projectId, ProjectPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PutWorkspaceProject");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->PutWorkspaceProject");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling ProjectsApi->PutWorkspaceProject");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProject)));
        }

        /// <summary>
        /// WorkspaceProject Update project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ModelsProject</returns>
        public async System.Threading.Tasks.Task<ModelsProject> PutWorkspaceProjectAsync (int? workspaceId, int? projectId, ProjectPayload postInput)
        {
             ApiResponse<ModelsProject> localVarResponse = await PutWorkspaceProjectAsyncWithHttpInfo(workspaceId, projectId, postInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProject Update project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <param name="postInput">Post parameters</param>
        /// <returns>Task of ApiResponse (ModelsProject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsProject>> PutWorkspaceProjectAsyncWithHttpInfo (int? workspaceId, int? projectId, ProjectPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PutWorkspaceProject");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->PutWorkspaceProject");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling ProjectsApi->PutWorkspaceProject");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProject)));
        }

        /// <summary>
        /// Update an user into workspace projects users Update the data for a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ModelsProjectUser</returns>
        public ModelsProjectUser PutWorkspaceProjectUsers (int? workspaceId, int? projectUserId, UserPutPayload projectUser)
        {
             ApiResponse<ModelsProjectUser> localVarResponse = PutWorkspaceProjectUsersWithHttpInfo(workspaceId, projectUserId, projectUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an user into workspace projects users Update the data for a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>ApiResponse of ModelsProjectUser</returns>
        public ApiResponse< ModelsProjectUser > PutWorkspaceProjectUsersWithHttpInfo (int? workspaceId, int? projectUserId, UserPutPayload projectUser)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PutWorkspaceProjectUsers");
            // verify the required parameter 'projectUserId' is set
            if (projectUserId == null)
                throw new ApiException(400, "Missing required parameter 'projectUserId' when calling ProjectsApi->PutWorkspaceProjectUsers");
            // verify the required parameter 'projectUser' is set
            if (projectUser == null)
                throw new ApiException(400, "Missing required parameter 'projectUser' when calling ProjectsApi->PutWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users/{project_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUserId != null) localVarPathParams.Add("project_user_id", this.Configuration.ApiClient.ParameterToString(projectUserId)); // path parameter
            if (projectUser != null && projectUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUser; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProjectUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProjectUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProjectUser)));
        }

        /// <summary>
        /// Update an user into workspace projects users Update the data for a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ModelsProjectUser</returns>
        public async System.Threading.Tasks.Task<ModelsProjectUser> PutWorkspaceProjectUsersAsync (int? workspaceId, int? projectUserId, UserPutPayload projectUser)
        {
             ApiResponse<ModelsProjectUser> localVarResponse = await PutWorkspaceProjectUsersAsyncWithHttpInfo(workspaceId, projectUserId, projectUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an user into workspace projects users Update the data for a project user for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectUserId">Numeric ID of the project user</param>
        /// <param name="projectUser">Input data of the user.</param>
        /// <returns>Task of ApiResponse (ModelsProjectUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsProjectUser>> PutWorkspaceProjectUsersAsyncWithHttpInfo (int? workspaceId, int? projectUserId, UserPutPayload projectUser)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->PutWorkspaceProjectUsers");
            // verify the required parameter 'projectUserId' is set
            if (projectUserId == null)
                throw new ApiException(400, "Missing required parameter 'projectUserId' when calling ProjectsApi->PutWorkspaceProjectUsers");
            // verify the required parameter 'projectUser' is set
            if (projectUser == null)
                throw new ApiException(400, "Missing required parameter 'projectUser' when calling ProjectsApi->PutWorkspaceProjectUsers");

            var localVarPath = "/workspaces/{workspace_id}/project_users/{project_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUserId != null) localVarPathParams.Add("project_user_id", this.Configuration.ApiClient.ParameterToString(projectUserId)); // path parameter
            if (projectUser != null && projectUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUser; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutWorkspaceProjectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProjectUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProjectUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProjectUser)));
        }

        /// <summary>
        /// Projects Get projects billable amounts
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        public List<ModelsProject> WorkspacesWorkspaceIdProjectsBillableAmountsPost (int? workspaceId, ProjectsPayload postInput)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = WorkspacesWorkspaceIdProjectsBillableAmountsPostWithHttpInfo(workspaceId, postInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Projects Get projects billable amounts
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        public ApiResponse< List<ModelsProject> > WorkspacesWorkspaceIdProjectsBillableAmountsPostWithHttpInfo (int? workspaceId, ProjectsPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsBillableAmountsPost");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsBillableAmountsPost");

            var localVarPath = "/workspaces/{workspace_id}/projects/billable-amounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdProjectsBillableAmountsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// Projects Get projects billable amounts
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsProject>> WorkspacesWorkspaceIdProjectsBillableAmountsPostAsync (int? workspaceId, ProjectsPayload postInput)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = await WorkspacesWorkspaceIdProjectsBillableAmountsPostAsyncWithHttpInfo(workspaceId, postInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Projects Get projects billable amounts
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="postInput">Project IDs</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> WorkspacesWorkspaceIdProjectsBillableAmountsPostAsyncWithHttpInfo (int? workspaceId, ProjectsPayload postInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsBillableAmountsPost");
            // verify the required parameter 'postInput' is set
            if (postInput == null)
                throw new ApiException(400, "Missing required parameter 'postInput' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsBillableAmountsPost");

            var localVarPath = "/workspaces/{workspace_id}/projects/billable-amounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (postInput != null && postInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdProjectsBillableAmountsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// WorkspaceProject Get project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ModelsProject</returns>
        public ModelsProject WorkspacesWorkspaceIdProjectsProjectIdGet (int? workspaceId, int? projectId)
        {
             ApiResponse<ModelsProject> localVarResponse = WorkspacesWorkspaceIdProjectsProjectIdGetWithHttpInfo(workspaceId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProject Get project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ApiResponse of ModelsProject</returns>
        public ApiResponse< ModelsProject > WorkspacesWorkspaceIdProjectsProjectIdGetWithHttpInfo (int? workspaceId, int? projectId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdGet");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdGet");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdProjectsProjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProject)));
        }

        /// <summary>
        /// WorkspaceProject Get project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ModelsProject</returns>
        public async System.Threading.Tasks.Task<ModelsProject> WorkspacesWorkspaceIdProjectsProjectIdGetAsync (int? workspaceId, int? projectId)
        {
             ApiResponse<ModelsProject> localVarResponse = await WorkspacesWorkspaceIdProjectsProjectIdGetAsyncWithHttpInfo(workspaceId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProject Get project for given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ApiResponse (ModelsProject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsProject>> WorkspacesWorkspaceIdProjectsProjectIdGetAsyncWithHttpInfo (int? workspaceId, int? projectId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdGet");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdGet");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdProjectsProjectIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProject)));
        }

        /// <summary>
        /// WorkspaceProject Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ModelsProjectStatistics</returns>
        public ModelsProjectStatistics WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet (int? workspaceId, int? projectId)
        {
             ApiResponse<ModelsProjectStatistics> localVarResponse = WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetWithHttpInfo(workspaceId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// WorkspaceProject Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>ApiResponse of ModelsProjectStatistics</returns>
        public ApiResponse< ModelsProjectStatistics > WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetWithHttpInfo (int? workspaceId, int? projectId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProjectStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProjectStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProjectStatistics)));
        }

        /// <summary>
        /// WorkspaceProject Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ModelsProjectStatistics</returns>
        public async System.Threading.Tasks.Task<ModelsProjectStatistics> WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetAsync (int? workspaceId, int? projectId)
        {
             ApiResponse<ModelsProjectStatistics> localVarResponse = await WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetAsyncWithHttpInfo(workspaceId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// WorkspaceProject Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="projectId">Numeric ID of the project</param>
        /// <returns>Task of ApiResponse (ModelsProjectStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsProjectStatistics>> WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetAsyncWithHttpInfo (int? workspaceId, int? projectId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet");

            var localVarPath = "/workspaces/{workspace_id}/projects/{project_id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsProjectStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsProjectStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsProjectStatistics)));
        }

    }
}
