/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtilsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List tasks
        /// </summary>
        /// <remarks>
        /// Returns filtered tasks from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>List&lt;ModelsTask&gt;</returns>
        List<ModelsTask> ReportsApiV3WorkspaceWorkspaceIdActionTasksPost (int? workspaceId, string action, TasksTasksPost tasksPost = null);

        /// <summary>
        /// List tasks
        /// </summary>
        /// <remarks>
        /// Returns filtered tasks from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTask&gt;</returns>
        ApiResponse<List<ModelsTask>> ReportsApiV3WorkspaceWorkspaceIdActionTasksPostWithHttpInfo (int? workspaceId, string action, TasksTasksPost tasksPost = null);
        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (only ID and name).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>List&lt;DtoClientFilterResponse&gt;</returns>
        List<DtoClientFilterResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPost (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null);

        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (only ID and name).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoClientFilterResponse&gt;</returns>
        ApiResponse<List<DtoClientFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null);
        /// <summary>
        /// List project groups filter
        /// </summary>
        /// <remarks>
        /// Returns the project groups from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>List&lt;DtoProjectGroupResponse&gt;</returns>
        List<DtoProjectGroupResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPost (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null);

        /// <summary>
        /// List project groups filter
        /// </summary>
        /// <remarks>
        /// Returns the project groups from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoProjectGroupResponse&gt;</returns>
        ApiResponse<List<DtoProjectGroupResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostWithHttpInfo (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null);
        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns filtered user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>List&lt;DtoProjectUserResponse&gt;</returns>
        List<DtoProjectUserResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost (int? workspaceId, DtoProjectUserParamsRequest statusPost);

        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns filtered user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>ApiResponse of List&lt;DtoProjectUserResponse&gt;</returns>
        ApiResponse<List<DtoProjectUserResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostWithHttpInfo (int? workspaceId, DtoProjectUserParamsRequest statusPost);
        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>List&lt;DtoProjectFilterResponse&gt;</returns>
        List<DtoProjectFilterResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPost (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null);

        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoProjectFilterResponse&gt;</returns>
        ApiResponse<List<DtoProjectFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostWithHttpInfo (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null);
        /// <summary>
        /// List projects statuses
        /// </summary>
        /// <remarks>
        /// Returns filtered projects statuses from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>List&lt;StatusProjectStatus&gt;</returns>
        List<StatusProjectStatus> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPost (int? workspaceId, StatusStatusPost statusPost = null);

        /// <summary>
        /// List projects statuses
        /// </summary>
        /// <remarks>
        /// Returns filtered projects statuses from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;StatusProjectStatus&gt;</returns>
        ApiResponse<List<StatusProjectStatus>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostWithHttpInfo (int? workspaceId, StatusStatusPost statusPost = null);
        /// <summary>
        /// List tasks statuses
        /// </summary>
        /// <remarks>
        /// Filter tasks statuses from a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>List&lt;TasksTaskStatus&gt;</returns>
        List<TasksTaskStatus> ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost (int? workspaceId, TasksTasksStatusPost tasksStatusPost);

        /// <summary>
        /// List tasks statuses
        /// </summary>
        /// <remarks>
        /// Filter tasks statuses from a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>ApiResponse of List&lt;TasksTaskStatus&gt;</returns>
        ApiResponse<List<TasksTaskStatus>> ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostWithHttpInfo (int? workspaceId, TasksTasksStatusPost tasksStatusPost);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>List&lt;DtoUserFilterResponse&gt;</returns>
        List<DtoUserFilterResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPost (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoUserFilterResponse&gt;</returns>
        ApiResponse<List<DtoUserFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null);
        /// <summary>
        /// Search clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (whole client object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>List&lt;DtoClientFilterResponse&gt;</returns>
        List<DtoClientFilterResponse> ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost (int? workspaceId, DtoClientFilterParamsRequest clientsPost);

        /// <summary>
        /// Search clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (whole client object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>ApiResponse of List&lt;DtoClientFilterResponse&gt;</returns>
        ApiResponse<List<DtoClientFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost);
        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace (whole project object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost (int? workspaceId, ProjectsProjectsPost projectsPost);

        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace (whole project object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostWithHttpInfo (int? workspaceId, ProjectsProjectsPost projectsPost);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>List&lt;DtoUserFilterResponse&gt;</returns>
        List<DtoUserFilterResponse> ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost (int? workspaceId, DtoUserFilterParamsRequest usersFilter);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>ApiResponse of List&lt;DtoUserFilterResponse&gt;</returns>
        ApiResponse<List<DtoUserFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List tasks
        /// </summary>
        /// <remarks>
        /// Returns filtered tasks from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>Task of List&lt;ModelsTask&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTask>> ReportsApiV3WorkspaceWorkspaceIdActionTasksPostAsync (int? workspaceId, string action, TasksTasksPost tasksPost = null);

        /// <summary>
        /// List tasks
        /// </summary>
        /// <remarks>
        /// Returns filtered tasks from workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTask&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTask>>> ReportsApiV3WorkspaceWorkspaceIdActionTasksPostAsyncWithHttpInfo (int? workspaceId, string action, TasksTasksPost tasksPost = null);
        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (only ID and name).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoClientFilterResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DtoClientFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostAsync (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null);

        /// <summary>
        /// List clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (only ID and name).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoClientFilterResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DtoClientFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostAsyncWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null);
        /// <summary>
        /// List project groups filter
        /// </summary>
        /// <remarks>
        /// Returns the project groups from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoProjectGroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DtoProjectGroupResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostAsync (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null);

        /// <summary>
        /// List project groups filter
        /// </summary>
        /// <remarks>
        /// Returns the project groups from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoProjectGroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DtoProjectGroupResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostAsyncWithHttpInfo (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null);
        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns filtered user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>Task of List&lt;DtoProjectUserResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DtoProjectUserResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostAsync (int? workspaceId, DtoProjectUserParamsRequest statusPost);

        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns filtered user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>Task of ApiResponse (List&lt;DtoProjectUserResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DtoProjectUserResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostAsyncWithHttpInfo (int? workspaceId, DtoProjectUserParamsRequest statusPost);
        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoProjectFilterResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DtoProjectFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostAsync (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null);

        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoProjectFilterResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DtoProjectFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostAsyncWithHttpInfo (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null);
        /// <summary>
        /// List projects statuses
        /// </summary>
        /// <remarks>
        /// Returns filtered projects statuses from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>Task of List&lt;StatusProjectStatus&gt;</returns>
        System.Threading.Tasks.Task<List<StatusProjectStatus>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostAsync (int? workspaceId, StatusStatusPost statusPost = null);

        /// <summary>
        /// List projects statuses
        /// </summary>
        /// <remarks>
        /// Returns filtered projects statuses from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StatusProjectStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatusProjectStatus>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostAsyncWithHttpInfo (int? workspaceId, StatusStatusPost statusPost = null);
        /// <summary>
        /// List tasks statuses
        /// </summary>
        /// <remarks>
        /// Filter tasks statuses from a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>Task of List&lt;TasksTaskStatus&gt;</returns>
        System.Threading.Tasks.Task<List<TasksTaskStatus>> ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostAsync (int? workspaceId, TasksTasksStatusPost tasksStatusPost);

        /// <summary>
        /// List tasks statuses
        /// </summary>
        /// <remarks>
        /// Filter tasks statuses from a workspace
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>Task of ApiResponse (List&lt;TasksTaskStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TasksTaskStatus>>> ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostAsyncWithHttpInfo (int? workspaceId, TasksTasksStatusPost tasksStatusPost);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoUserFilterResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DtoUserFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostAsync (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoUserFilterResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DtoUserFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostAsyncWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null);
        /// <summary>
        /// Search clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (whole client object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>Task of List&lt;DtoClientFilterResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DtoClientFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostAsync (int? workspaceId, DtoClientFilterParamsRequest clientsPost);

        /// <summary>
        /// Search clients
        /// </summary>
        /// <remarks>
        /// Returns filtered clients from a workspace (whole client object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>Task of ApiResponse (List&lt;DtoClientFilterResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DtoClientFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostAsyncWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost);
        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace (whole project object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostAsync (int? workspaceId, ProjectsProjectsPost projectsPost);

        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// Returns filtered projects from a workspace (whole project object).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostAsyncWithHttpInfo (int? workspaceId, ProjectsProjectsPost projectsPost);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>Task of List&lt;DtoUserFilterResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DtoUserFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostAsync (int? workspaceId, DtoUserFilterParamsRequest usersFilter);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Returns filtered users from a workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>Task of ApiResponse (List&lt;DtoUserFilterResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DtoUserFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostAsyncWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UtilsApi : IUtilsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UtilsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List tasks Returns filtered tasks from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>List&lt;ModelsTask&gt;</returns>
        public List<ModelsTask> ReportsApiV3WorkspaceWorkspaceIdActionTasksPost (int? workspaceId, string action, TasksTasksPost tasksPost = null)
        {
             ApiResponse<List<ModelsTask>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdActionTasksPostWithHttpInfo(workspaceId, action, tasksPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List tasks Returns filtered tasks from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTask&gt;</returns>
        public ApiResponse< List<ModelsTask> > ReportsApiV3WorkspaceWorkspaceIdActionTasksPostWithHttpInfo (int? workspaceId, string action, TasksTasksPost tasksPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdActionTasksPost");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdActionTasksPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/{action}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (tasksPost != null && tasksPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tasksPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tasksPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdActionTasksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTask>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTask>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTask>)));
        }

        /// <summary>
        /// List tasks Returns filtered tasks from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>Task of List&lt;ModelsTask&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTask>> ReportsApiV3WorkspaceWorkspaceIdActionTasksPostAsync (int? workspaceId, string action, TasksTasksPost tasksPost = null)
        {
             ApiResponse<List<ModelsTask>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdActionTasksPostAsyncWithHttpInfo(workspaceId, action, tasksPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List tasks Returns filtered tasks from workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="action">search,filters</param>
        /// <param name="tasksPost">Task search conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTask&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTask>>> ReportsApiV3WorkspaceWorkspaceIdActionTasksPostAsyncWithHttpInfo (int? workspaceId, string action, TasksTasksPost tasksPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdActionTasksPost");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdActionTasksPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/{action}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (tasksPost != null && tasksPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tasksPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tasksPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdActionTasksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTask>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTask>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTask>)));
        }

        /// <summary>
        /// List clients Returns filtered clients from a workspace (only ID and name).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>List&lt;DtoClientFilterResponse&gt;</returns>
        public List<DtoClientFilterResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPost (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null)
        {
             ApiResponse<List<DtoClientFilterResponse>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostWithHttpInfo(workspaceId, clientsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List clients Returns filtered clients from a workspace (only ID and name).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoClientFilterResponse&gt;</returns>
        public ApiResponse< List<DtoClientFilterResponse> > ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientsPost != null && clientsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoClientFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoClientFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoClientFilterResponse>)));
        }

        /// <summary>
        /// List clients Returns filtered clients from a workspace (only ID and name).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoClientFilterResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DtoClientFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostAsync (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null)
        {
             ApiResponse<List<DtoClientFilterResponse>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostAsyncWithHttpInfo(workspaceId, clientsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List clients Returns filtered clients from a workspace (only ID and name).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoClientFilterResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DtoClientFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPostAsyncWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientsPost != null && clientsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoClientFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoClientFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoClientFilterResponse>)));
        }

        /// <summary>
        /// List project groups filter Returns the project groups from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>List&lt;DtoProjectGroupResponse&gt;</returns>
        public List<DtoProjectGroupResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPost (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null)
        {
             ApiResponse<List<DtoProjectGroupResponse>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostWithHttpInfo(workspaceId, projectGroupsParams);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List project groups filter Returns the project groups from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoProjectGroupResponse&gt;</returns>
        public ApiResponse< List<DtoProjectGroupResponse> > ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostWithHttpInfo (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/project_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectGroupsParams != null && projectGroupsParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectGroupsParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectGroupsParams; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoProjectGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoProjectGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoProjectGroupResponse>)));
        }

        /// <summary>
        /// List project groups filter Returns the project groups from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoProjectGroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DtoProjectGroupResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostAsync (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null)
        {
             ApiResponse<List<DtoProjectGroupResponse>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostAsyncWithHttpInfo(workspaceId, projectGroupsParams);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List project groups filter Returns the project groups from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectGroupsParams">Project groups filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoProjectGroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DtoProjectGroupResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPostAsyncWithHttpInfo (int? workspaceId, DtoProjectGroupParamsRequest projectGroupsParams = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/project_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectGroupsParams != null && projectGroupsParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectGroupsParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectGroupsParams; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoProjectGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoProjectGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoProjectGroupResponse>)));
        }

        /// <summary>
        /// List project users Returns filtered user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>List&lt;DtoProjectUserResponse&gt;</returns>
        public List<DtoProjectUserResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost (int? workspaceId, DtoProjectUserParamsRequest statusPost)
        {
             ApiResponse<List<DtoProjectUserResponse>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostWithHttpInfo(workspaceId, statusPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List project users Returns filtered user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>ApiResponse of List&lt;DtoProjectUserResponse&gt;</returns>
        public ApiResponse< List<DtoProjectUserResponse> > ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostWithHttpInfo (int? workspaceId, DtoProjectUserParamsRequest statusPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost");
            // verify the required parameter 'statusPost' is set
            if (statusPost == null)
                throw new ApiException(400, "Missing required parameter 'statusPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/project_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (statusPost != null && statusPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoProjectUserResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoProjectUserResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoProjectUserResponse>)));
        }

        /// <summary>
        /// List project users Returns filtered user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>Task of List&lt;DtoProjectUserResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DtoProjectUserResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostAsync (int? workspaceId, DtoProjectUserParamsRequest statusPost)
        {
             ApiResponse<List<DtoProjectUserResponse>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostAsyncWithHttpInfo(workspaceId, statusPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List project users Returns filtered user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">User projects filter conditions</param>
        /// <returns>Task of ApiResponse (List&lt;DtoProjectUserResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DtoProjectUserResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPostAsyncWithHttpInfo (int? workspaceId, DtoProjectUserParamsRequest statusPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost");
            // verify the required parameter 'statusPost' is set
            if (statusPost == null)
                throw new ApiException(400, "Missing required parameter 'statusPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/project_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (statusPost != null && statusPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoProjectUserResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoProjectUserResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoProjectUserResponse>)));
        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>List&lt;DtoProjectFilterResponse&gt;</returns>
        public List<DtoProjectFilterResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPost (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null)
        {
             ApiResponse<List<DtoProjectFilterResponse>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostWithHttpInfo(workspaceId, projectsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoProjectFilterResponse&gt;</returns>
        public ApiResponse< List<DtoProjectFilterResponse> > ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostWithHttpInfo (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectsPost != null && projectsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoProjectFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoProjectFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoProjectFilterResponse>)));
        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoProjectFilterResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DtoProjectFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostAsync (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null)
        {
             ApiResponse<List<DtoProjectFilterResponse>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostAsyncWithHttpInfo(workspaceId, projectsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoProjectFilterResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DtoProjectFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPostAsyncWithHttpInfo (int? workspaceId, DtoProjectFilterParamRequest projectsPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectsPost != null && projectsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoProjectFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoProjectFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoProjectFilterResponse>)));
        }

        /// <summary>
        /// List projects statuses Returns filtered projects statuses from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>List&lt;StatusProjectStatus&gt;</returns>
        public List<StatusProjectStatus> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPost (int? workspaceId, StatusStatusPost statusPost = null)
        {
             ApiResponse<List<StatusProjectStatus>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostWithHttpInfo(workspaceId, statusPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List projects statuses Returns filtered projects statuses from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;StatusProjectStatus&gt;</returns>
        public ApiResponse< List<StatusProjectStatus> > ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostWithHttpInfo (int? workspaceId, StatusStatusPost statusPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/projects/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (statusPost != null && statusPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StatusProjectStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StatusProjectStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StatusProjectStatus>)));
        }

        /// <summary>
        /// List projects statuses Returns filtered projects statuses from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>Task of List&lt;StatusProjectStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatusProjectStatus>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostAsync (int? workspaceId, StatusStatusPost statusPost = null)
        {
             ApiResponse<List<StatusProjectStatus>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostAsyncWithHttpInfo(workspaceId, statusPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List projects statuses Returns filtered projects statuses from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="statusPost">Projects statuses filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StatusProjectStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StatusProjectStatus>>> ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPostAsyncWithHttpInfo (int? workspaceId, StatusStatusPost statusPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/projects/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (statusPost != null && statusPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statusPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statusPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersProjectsStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StatusProjectStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StatusProjectStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StatusProjectStatus>)));
        }

        /// <summary>
        /// List tasks statuses Filter tasks statuses from a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>List&lt;TasksTaskStatus&gt;</returns>
        public List<TasksTaskStatus> ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost (int? workspaceId, TasksTasksStatusPost tasksStatusPost)
        {
             ApiResponse<List<TasksTaskStatus>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostWithHttpInfo(workspaceId, tasksStatusPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List tasks statuses Filter tasks statuses from a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>ApiResponse of List&lt;TasksTaskStatus&gt;</returns>
        public ApiResponse< List<TasksTaskStatus> > ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostWithHttpInfo (int? workspaceId, TasksTasksStatusPost tasksStatusPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost");
            // verify the required parameter 'tasksStatusPost' is set
            if (tasksStatusPost == null)
                throw new ApiException(400, "Missing required parameter 'tasksStatusPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/tasks/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (tasksStatusPost != null && tasksStatusPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tasksStatusPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tasksStatusPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TasksTaskStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TasksTaskStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TasksTaskStatus>)));
        }

        /// <summary>
        /// List tasks statuses Filter tasks statuses from a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>Task of List&lt;TasksTaskStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<TasksTaskStatus>> ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostAsync (int? workspaceId, TasksTasksStatusPost tasksStatusPost)
        {
             ApiResponse<List<TasksTaskStatus>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostAsyncWithHttpInfo(workspaceId, tasksStatusPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List tasks statuses Filter tasks statuses from a workspace
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="tasksStatusPost">Task filter conditions</param>
        /// <returns>Task of ApiResponse (List&lt;TasksTaskStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TasksTaskStatus>>> ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPostAsyncWithHttpInfo (int? workspaceId, TasksTasksStatusPost tasksStatusPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost");
            // verify the required parameter 'tasksStatusPost' is set
            if (tasksStatusPost == null)
                throw new ApiException(400, "Missing required parameter 'tasksStatusPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/tasks/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (tasksStatusPost != null && tasksStatusPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tasksStatusPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tasksStatusPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersTasksStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TasksTaskStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TasksTaskStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TasksTaskStatus>)));
        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>List&lt;DtoUserFilterResponse&gt;</returns>
        public List<DtoUserFilterResponse> ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPost (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null)
        {
             ApiResponse<List<DtoUserFilterResponse>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostWithHttpInfo(workspaceId, usersFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>ApiResponse of List&lt;DtoUserFilterResponse&gt;</returns>
        public ApiResponse< List<DtoUserFilterResponse> > ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (usersFilter != null && usersFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usersFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usersFilter; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoUserFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoUserFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoUserFilterResponse>)));
        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>Task of List&lt;DtoUserFilterResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DtoUserFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostAsync (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null)
        {
             ApiResponse<List<DtoUserFilterResponse>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostAsyncWithHttpInfo(workspaceId, usersFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users filter conditions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DtoUserFilterResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DtoUserFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPostAsyncWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/filters/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (usersFilter != null && usersFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usersFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usersFilter; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdFiltersUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoUserFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoUserFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoUserFilterResponse>)));
        }

        /// <summary>
        /// Search clients Returns filtered clients from a workspace (whole client object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>List&lt;DtoClientFilterResponse&gt;</returns>
        public List<DtoClientFilterResponse> ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost (int? workspaceId, DtoClientFilterParamsRequest clientsPost)
        {
             ApiResponse<List<DtoClientFilterResponse>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostWithHttpInfo(workspaceId, clientsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search clients Returns filtered clients from a workspace (whole client object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>ApiResponse of List&lt;DtoClientFilterResponse&gt;</returns>
        public ApiResponse< List<DtoClientFilterResponse> > ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost");
            // verify the required parameter 'clientsPost' is set
            if (clientsPost == null)
                throw new ApiException(400, "Missing required parameter 'clientsPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientsPost != null && clientsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoClientFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoClientFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoClientFilterResponse>)));
        }

        /// <summary>
        /// Search clients Returns filtered clients from a workspace (whole client object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>Task of List&lt;DtoClientFilterResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DtoClientFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostAsync (int? workspaceId, DtoClientFilterParamsRequest clientsPost)
        {
             ApiResponse<List<DtoClientFilterResponse>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostAsyncWithHttpInfo(workspaceId, clientsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search clients Returns filtered clients from a workspace (whole client object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="clientsPost">Clients search conditions</param>
        /// <returns>Task of ApiResponse (List&lt;DtoClientFilterResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DtoClientFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdSearchClientsPostAsyncWithHttpInfo (int? workspaceId, DtoClientFilterParamsRequest clientsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost");
            // verify the required parameter 'clientsPost' is set
            if (clientsPost == null)
                throw new ApiException(400, "Missing required parameter 'clientsPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (clientsPost != null && clientsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoClientFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoClientFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoClientFilterResponse>)));
        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace (whole project object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost (int? workspaceId, ProjectsProjectsPost projectsPost)
        {
             ApiResponse<List<Object>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostWithHttpInfo(workspaceId, projectsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace (whole project object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostWithHttpInfo (int? workspaceId, ProjectsProjectsPost projectsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost");
            // verify the required parameter 'projectsPost' is set
            if (projectsPost == null)
                throw new ApiException(400, "Missing required parameter 'projectsPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectsPost != null && projectsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace (whole project object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostAsync (int? workspaceId, ProjectsProjectsPost projectsPost)
        {
             ApiResponse<List<Object>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostAsyncWithHttpInfo(workspaceId, projectsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List projects Returns filtered projects from a workspace (whole project object).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectsPost">Projects list conditions</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPostAsyncWithHttpInfo (int? workspaceId, ProjectsProjectsPost projectsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost");
            // verify the required parameter 'projectsPost' is set
            if (projectsPost == null)
                throw new ApiException(400, "Missing required parameter 'projectsPost' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectsPost != null && projectsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>List&lt;DtoUserFilterResponse&gt;</returns>
        public List<DtoUserFilterResponse> ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost (int? workspaceId, DtoUserFilterParamsRequest usersFilter)
        {
             ApiResponse<List<DtoUserFilterResponse>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostWithHttpInfo(workspaceId, usersFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>ApiResponse of List&lt;DtoUserFilterResponse&gt;</returns>
        public ApiResponse< List<DtoUserFilterResponse> > ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost");
            // verify the required parameter 'usersFilter' is set
            if (usersFilter == null)
                throw new ApiException(400, "Missing required parameter 'usersFilter' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (usersFilter != null && usersFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usersFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usersFilter; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoUserFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoUserFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoUserFilterResponse>)));
        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>Task of List&lt;DtoUserFilterResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DtoUserFilterResponse>> ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostAsync (int? workspaceId, DtoUserFilterParamsRequest usersFilter)
        {
             ApiResponse<List<DtoUserFilterResponse>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostAsyncWithHttpInfo(workspaceId, usersFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users Returns filtered users from a workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="usersFilter">Users list conditions</param>
        /// <returns>Task of ApiResponse (List&lt;DtoUserFilterResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DtoUserFilterResponse>>> ReportsApiV3WorkspaceWorkspaceIdSearchUsersPostAsyncWithHttpInfo (int? workspaceId, DtoUserFilterParamsRequest usersFilter)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost");
            // verify the required parameter 'usersFilter' is set
            if (usersFilter == null)
                throw new ApiException(400, "Missing required parameter 'usersFilter' when calling UtilsApi->ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/search/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (usersFilter != null && usersFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usersFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usersFilter; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSearchUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DtoUserFilterResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DtoUserFilterResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DtoUserFilterResponse>)));
        }

    }
}
