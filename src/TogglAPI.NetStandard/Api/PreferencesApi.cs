/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreferencesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Preferences for the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelsAllPreferences</returns>
        ModelsAllPreferences GetPreferences ();

        /// <summary>
        /// Preferences for the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelsAllPreferences</returns>
        ApiResponse<ModelsAllPreferences> GetPreferencesWithHttpInfo ();
        /// <summary>
        /// Preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>ModelsAllPreferences</returns>
        ModelsAllPreferences GetPreferencesClient (string _client, int? since = null);

        /// <summary>
        /// Preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of ModelsAllPreferences</returns>
        ApiResponse<ModelsAllPreferences> GetPreferencesClientWithHttpInfo (string _client, int? since = null);
        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ModelsLogo</returns>
        ModelsLogo GetWorkspacePreferences (int? workspaceId);

        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of ModelsLogo</returns>
        ApiResponse<ModelsLogo> GetWorkspacePreferencesWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Update the preferences for the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>string</returns>
        string PostPreferences (ModelsAllPreferences preferences);

        /// <summary>
        /// Update the preferences for the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostPreferencesWithHttpInfo (ModelsAllPreferences preferences);
        /// <summary>
        /// Update the preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>string</returns>
        string PostPreferencesClient (string _client, ModelsAllPreferences preferences);

        /// <summary>
        /// Update the preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostPreferencesClientWithHttpInfo (string _client, ModelsAllPreferences preferences);
        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>ModelsLogo</returns>
        ModelsLogo PostWorkspacePreferences (int? workspaceId, ModelsWorkspacePreferences preferences);

        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>ApiResponse of ModelsLogo</returns>
        ApiResponse<ModelsLogo> PostWorkspacePreferencesWithHttpInfo (int? workspaceId, ModelsWorkspacePreferences preferences);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Preferences for the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelsAllPreferences</returns>
        System.Threading.Tasks.Task<ModelsAllPreferences> GetPreferencesAsync ();

        /// <summary>
        /// Preferences for the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelsAllPreferences)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsAllPreferences>> GetPreferencesAsyncWithHttpInfo ();
        /// <summary>
        /// Preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ModelsAllPreferences</returns>
        System.Threading.Tasks.Task<ModelsAllPreferences> GetPreferencesClientAsync (string _client, int? since = null);

        /// <summary>
        /// Preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (ModelsAllPreferences)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsAllPreferences>> GetPreferencesClientAsyncWithHttpInfo (string _client, int? since = null);
        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ModelsLogo</returns>
        System.Threading.Tasks.Task<ModelsLogo> GetWorkspacePreferencesAsync (int? workspaceId);

        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (ModelsLogo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsLogo>> GetWorkspacePreferencesAsyncWithHttpInfo (int? workspaceId);
        /// <summary>
        /// Update the preferences for the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostPreferencesAsync (ModelsAllPreferences preferences);

        /// <summary>
        /// Update the preferences for the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostPreferencesAsyncWithHttpInfo (ModelsAllPreferences preferences);
        /// <summary>
        /// Update the preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostPreferencesClientAsync (string _client, ModelsAllPreferences preferences);

        /// <summary>
        /// Update the preferences for an specific client of the current user
        /// </summary>
        /// <remarks>
        /// With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostPreferencesClientAsyncWithHttpInfo (string _client, ModelsAllPreferences preferences);
        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>Task of ModelsLogo</returns>
        System.Threading.Tasks.Task<ModelsLogo> PostWorkspacePreferencesAsync (int? workspaceId, ModelsWorkspacePreferences preferences);

        /// <summary>
        /// Get workspace preferences
        /// </summary>
        /// <remarks>
        /// Get the preferences for a given workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>Task of ApiResponse (ModelsLogo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsLogo>> PostWorkspacePreferencesAsyncWithHttpInfo (int? workspaceId, ModelsWorkspacePreferences preferences);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PreferencesApi : IPreferencesApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreferencesApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PreferencesApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Preferences for the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelsAllPreferences</returns>
        public ModelsAllPreferences GetPreferences ()
        {
             ApiResponse<ModelsAllPreferences> localVarResponse = GetPreferencesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preferences for the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelsAllPreferences</returns>
        public ApiResponse< ModelsAllPreferences > GetPreferencesWithHttpInfo ()
        {

            var localVarPath = "/me/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsAllPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsAllPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsAllPreferences)));
        }

        /// <summary>
        /// Preferences for the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelsAllPreferences</returns>
        public async System.Threading.Tasks.Task<ModelsAllPreferences> GetPreferencesAsync ()
        {
             ApiResponse<ModelsAllPreferences> localVarResponse = await GetPreferencesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preferences for the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelsAllPreferences)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsAllPreferences>> GetPreferencesAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsAllPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsAllPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsAllPreferences)));
        }

        /// <summary>
        /// Preferences for an specific client of the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>ModelsAllPreferences</returns>
        public ModelsAllPreferences GetPreferencesClient (string _client, int? since = null)
        {
             ApiResponse<ModelsAllPreferences> localVarResponse = GetPreferencesClientWithHttpInfo(_client, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preferences for an specific client of the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of ModelsAllPreferences</returns>
        public ApiResponse< ModelsAllPreferences > GetPreferencesClientWithHttpInfo (string _client, int? since = null)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling PreferencesApi->GetPreferencesClient");

            var localVarPath = "/me/preferences/{client}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_client != null) localVarPathParams.Add("client", this.Configuration.ApiClient.ParameterToString(_client)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreferencesClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsAllPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsAllPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsAllPreferences)));
        }

        /// <summary>
        /// Preferences for an specific client of the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ModelsAllPreferences</returns>
        public async System.Threading.Tasks.Task<ModelsAllPreferences> GetPreferencesClientAsync (string _client, int? since = null)
        {
             ApiResponse<ModelsAllPreferences> localVarResponse = await GetPreferencesClientAsyncWithHttpInfo(_client, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preferences for an specific client of the current user Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the &#x60;enabled&#x60; flag specifying if that feature should be enabled or disabled for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="since">Retrieve preference modified since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (ModelsAllPreferences)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsAllPreferences>> GetPreferencesClientAsyncWithHttpInfo (string _client, int? since = null)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling PreferencesApi->GetPreferencesClient");

            var localVarPath = "/me/preferences/{client}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_client != null) localVarPathParams.Add("client", this.Configuration.ApiClient.ParameterToString(_client)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreferencesClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsAllPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsAllPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsAllPreferences)));
        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ModelsLogo</returns>
        public ModelsLogo GetWorkspacePreferences (int? workspaceId)
        {
             ApiResponse<ModelsLogo> localVarResponse = GetWorkspacePreferencesWithHttpInfo(workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>ApiResponse of ModelsLogo</returns>
        public ApiResponse< ModelsLogo > GetWorkspacePreferencesWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling PreferencesApi->GetWorkspacePreferences");

            var localVarPath = "/workspaces/{workspace_id}/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsLogo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsLogo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsLogo)));
        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ModelsLogo</returns>
        public async System.Threading.Tasks.Task<ModelsLogo> GetWorkspacePreferencesAsync (int? workspaceId)
        {
             ApiResponse<ModelsLogo> localVarResponse = await GetWorkspacePreferencesAsyncWithHttpInfo(workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <returns>Task of ApiResponse (ModelsLogo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsLogo>> GetWorkspacePreferencesAsyncWithHttpInfo (int? workspaceId)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling PreferencesApi->GetWorkspacePreferences");

            var localVarPath = "/workspaces/{workspace_id}/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspacePreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsLogo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsLogo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsLogo)));
        }

        /// <summary>
        /// Update the preferences for the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>string</returns>
        public string PostPreferences (ModelsAllPreferences preferences)
        {
             ApiResponse<string> localVarResponse = PostPreferencesWithHttpInfo(preferences);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the preferences for the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostPreferencesWithHttpInfo (ModelsAllPreferences preferences)
        {
            // verify the required parameter 'preferences' is set
            if (preferences == null)
                throw new ApiException(400, "Missing required parameter 'preferences' when calling PreferencesApi->PostPreferences");

            var localVarPath = "/me/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (preferences != null && preferences.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preferences); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preferences; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update the preferences for the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostPreferencesAsync (ModelsAllPreferences preferences)
        {
             ApiResponse<string> localVarResponse = await PostPreferencesAsyncWithHttpInfo(preferences);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the preferences for the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostPreferencesAsyncWithHttpInfo (ModelsAllPreferences preferences)
        {
            // verify the required parameter 'preferences' is set
            if (preferences == null)
                throw new ApiException(400, "Missing required parameter 'preferences' when calling PreferencesApi->PostPreferences");

            var localVarPath = "/me/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (preferences != null && preferences.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preferences); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preferences; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update the preferences for an specific client of the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>string</returns>
        public string PostPreferencesClient (string _client, ModelsAllPreferences preferences)
        {
             ApiResponse<string> localVarResponse = PostPreferencesClientWithHttpInfo(_client, preferences);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the preferences for an specific client of the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostPreferencesClientWithHttpInfo (string _client, ModelsAllPreferences preferences)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling PreferencesApi->PostPreferencesClient");
            // verify the required parameter 'preferences' is set
            if (preferences == null)
                throw new ApiException(400, "Missing required parameter 'preferences' when calling PreferencesApi->PostPreferencesClient");

            var localVarPath = "/me/preferences/{client}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_client != null) localVarPathParams.Add("client", this.Configuration.ApiClient.ParameterToString(_client)); // path parameter
            if (preferences != null && preferences.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preferences); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preferences; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPreferencesClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update the preferences for an specific client of the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostPreferencesClientAsync (string _client, ModelsAllPreferences preferences)
        {
             ApiResponse<string> localVarResponse = await PostPreferencesClientAsyncWithHttpInfo(_client, preferences);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the preferences for an specific client of the current user With this endpoint, preferences can be modified and alpha features can be enabled or disabled.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">Client type</param>
        /// <param name="preferences">Preferences</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostPreferencesClientAsyncWithHttpInfo (string _client, ModelsAllPreferences preferences)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling PreferencesApi->PostPreferencesClient");
            // verify the required parameter 'preferences' is set
            if (preferences == null)
                throw new ApiException(400, "Missing required parameter 'preferences' when calling PreferencesApi->PostPreferencesClient");

            var localVarPath = "/me/preferences/{client}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_client != null) localVarPathParams.Add("client", this.Configuration.ApiClient.ParameterToString(_client)); // path parameter
            if (preferences != null && preferences.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preferences); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preferences; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPreferencesClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>ModelsLogo</returns>
        public ModelsLogo PostWorkspacePreferences (int? workspaceId, ModelsWorkspacePreferences preferences)
        {
             ApiResponse<ModelsLogo> localVarResponse = PostWorkspacePreferencesWithHttpInfo(workspaceId, preferences);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>ApiResponse of ModelsLogo</returns>
        public ApiResponse< ModelsLogo > PostWorkspacePreferencesWithHttpInfo (int? workspaceId, ModelsWorkspacePreferences preferences)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling PreferencesApi->PostWorkspacePreferences");
            // verify the required parameter 'preferences' is set
            if (preferences == null)
                throw new ApiException(400, "Missing required parameter 'preferences' when calling PreferencesApi->PostWorkspacePreferences");

            var localVarPath = "/workspaces/{workspace_id}/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (preferences != null && preferences.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preferences); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preferences; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspacePreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsLogo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsLogo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsLogo)));
        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>Task of ModelsLogo</returns>
        public async System.Threading.Tasks.Task<ModelsLogo> PostWorkspacePreferencesAsync (int? workspaceId, ModelsWorkspacePreferences preferences)
        {
             ApiResponse<ModelsLogo> localVarResponse = await PostWorkspacePreferencesAsyncWithHttpInfo(workspaceId, preferences);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workspace preferences Get the preferences for a given workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="preferences">Input data of the preferences.</param>
        /// <returns>Task of ApiResponse (ModelsLogo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsLogo>> PostWorkspacePreferencesAsyncWithHttpInfo (int? workspaceId, ModelsWorkspacePreferences preferences)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling PreferencesApi->PostWorkspacePreferences");
            // verify the required parameter 'preferences' is set
            if (preferences == null)
                throw new ApiException(400, "Missing required parameter 'preferences' when calling PreferencesApi->PostWorkspacePreferences");

            var localVarPath = "/workspaces/{workspace_id}/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (preferences != null && preferences.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(preferences); // http body (model) parameter
            }
            else
            {
                localVarPostBody = preferences; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkspacePreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsLogo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsLogo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsLogo)));
        }

    }
}
