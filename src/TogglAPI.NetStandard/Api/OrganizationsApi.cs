/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>string</returns>
        string DeleteOrganizationGroup (int? organizationId, int? groupId);

        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteOrganizationGroupWithHttpInfo (int? organizationId, int? groupId);
        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>string</returns>
        string DeleteOrganizationUsersLeave (int? organizationId);

        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteOrganizationUsersLeaveWithHttpInfo (int? organizationId);
        /// <summary>
        /// Organization data
        /// </summary>
        /// <remarks>
        /// Returns organization name and current pricing plan
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsMeOrganization</returns>
        ModelsMeOrganization GetOrganization (int? organizationId);

        /// <summary>
        /// Organization data
        /// </summary>
        /// <remarks>
        /// Returns organization name and current pricing plan
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsMeOrganization</returns>
        ApiResponse<ModelsMeOrganization> GetOrganizationWithHttpInfo (int? organizationId);
        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        List<GroupOrganizationGroupResponse> GetOrganizationGroups (int? organizationId, string name = null, string workspace = null);

        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        ApiResponse<List<GroupOrganizationGroupResponse>> GetOrganizationGroupsWithHttpInfo (int? organizationId, string name = null, string workspace = null);
        /// <summary>
        /// Get owner of the organization
        /// </summary>
        /// <remarks>
        /// Returns organization owner data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsOrganizationOwner</returns>
        ModelsOrganizationOwner GetOrganizationOwner (int? organizationId);

        /// <summary>
        /// Get owner of the organization
        /// </summary>
        /// <remarks>
        /// Returns organization owner data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsOrganizationOwner</returns>
        ApiResponse<ModelsOrganizationOwner> GetOrganizationOwnerWithHttpInfo (int? organizationId);
        /// <summary>
        /// Organization roles.
        /// </summary>
        /// <remarks>
        /// Returns a list of organization specific and global roles.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>List&lt;TypesRole&gt;</returns>
        List<TypesRole> GetOrganizationRoles (int? organizationId);

        /// <summary>
        /// Organization roles.
        /// </summary>
        /// <remarks>
        /// Returns a list of organization specific and global roles.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of List&lt;TypesRole&gt;</returns>
        ApiResponse<List<TypesRole>> GetOrganizationRolesWithHttpInfo (int? organizationId);
        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Returns organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsOrganizationSegmentation</returns>
        ModelsOrganizationSegmentation GetOrganizationSegmentation (int? organizationId);

        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Returns organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsOrganizationSegmentation</returns>
        ApiResponse<ModelsOrganizationSegmentation> GetOrganizationSegmentationWithHttpInfo (int? organizationId);
        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUser&gt;</returns>
        List<ModelsOrgUser> GetOrganizationUsers (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUser&gt;</returns>
        ApiResponse<List<ModelsOrgUser>> GetOrganizationUsersWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUserDetailed&gt;</returns>
        List<ModelsOrgUserDetailed> GetOrganizationUsersDetailed (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUserDetailed&gt;</returns>
        ApiResponse<List<ModelsOrgUserDetailed>> GetOrganizationUsersDetailedWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        List<GroupOrganizationGroupResponse> GetOrganizationWorkspacesGroups (int? organizationId, int? workspaceId);

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        ApiResponse<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsWithHttpInfo (int? organizationId, int? workspaceId);
        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, ModelsStatistics&gt;</returns>
        Dictionary<string, ModelsStatistics> GetOrganizationWorkspacesStatistics ();

        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        ApiResponse<Dictionary<string, ModelsStatistics>> GetOrganizationWorkspacesStatisticsWithHttpInfo ();
        /// <summary>
        /// OrganizationsPaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns paid invoices
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;</returns>
        List<ModelsUnifiedSubscriptionInvoiceList> GetOrganizationsPaymentsRecords (int? organizationId, bool? isUnified = null, string next = null, string prev = null);

        /// <summary>
        /// OrganizationsPaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns paid invoices
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;</returns>
        ApiResponse<List<ModelsUnifiedSubscriptionInvoiceList>> GetOrganizationsPaymentsRecordsWithHttpInfo (int? organizationId, bool? isUnified = null, string next = null, string prev = null);
        /// <summary>
        /// OrganizationsPlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for an organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>BillingPricingStruct</returns>
        BillingPricingStruct GetOrganizationsPlans (int? organizationId);

        /// <summary>
        /// OrganizationsPlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for an organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of BillingPricingStruct</returns>
        ApiResponse<BillingPricingStruct> GetOrganizationsPlansWithHttpInfo (int? organizationId);
        /// <summary>
        /// OrganizationsPlan
        /// </summary>
        /// <remarks>
        /// Returns pricing plan for an organization identified by plan_id
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>BillingPricingStruct</returns>
        BillingPricingStruct GetOrganizationsPlans_0 (int? organizationId, int? planId);

        /// <summary>
        /// OrganizationsPlan
        /// </summary>
        /// <remarks>
        /// Returns pricing plan for an organization identified by plan_id
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>ApiResponse of BillingPricingStruct</returns>
        ApiResponse<BillingPricingStruct> GetOrganizationsPlans_0WithHttpInfo (int? organizationId, int? planId);
        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>GroupsPatchOutput</returns>
        GroupsPatchOutput PatchOrganizationGroup (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);

        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>ApiResponse of GroupsPatchOutput</returns>
        ApiResponse<GroupsPatchOutput> PatchOrganizationGroupWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);
        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        string PatchOrganizationUsers (int? organizationId, UserPatchParams _params);

        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PatchOrganizationUsersWithHttpInfo (int? organizationId, UserPatchParams _params);
        /// <summary>
        /// Creates a new organization
        /// </summary>
        /// <remarks>
        /// Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>OrganizationPostOrganizationReply</returns>
        OrganizationPostOrganizationReply PostOrganization (ModelsPostPayload postOrganizationsRequest);

        /// <summary>
        /// Creates a new organization
        /// </summary>
        /// <remarks>
        /// Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>ApiResponse of OrganizationPostOrganizationReply</returns>
        ApiResponse<OrganizationPostOrganizationReply> PostOrganizationWithHttpInfo (ModelsPostPayload postOrganizationsRequest);
        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>string</returns>
        string PostOrganizationAcceptInvitation (string inviutationCode);

        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostOrganizationAcceptInvitationWithHttpInfo (string inviutationCode);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        GroupOrganizationGroupResponse PostOrganizationGroup (int? organizationId, GroupPayload postGroupRequest);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        ApiResponse<GroupOrganizationGroupResponse> PostOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload postGroupRequest);
        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>InvitationResult</returns>
        InvitationResult PostOrganizationInvitation (int? organizationId, InvitationPost postInvitationRequest);

        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>ApiResponse of InvitationResult</returns>
        ApiResponse<InvitationResult> PostOrganizationInvitationWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest);
        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>WorkspaceWorkspace</returns>
        WorkspaceWorkspace PostOrganizationWorkspaces (int? organizationId, WorkspacePayload post);

        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        ApiResponse<WorkspaceWorkspace> PostOrganizationWorkspacesWithHttpInfo (int? organizationId, WorkspacePayload post);
        /// <summary>
        /// Updates an existing organization
        /// </summary>
        /// <remarks>
        /// Updates an existing organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>string</returns>
        string PutOrganization (int? organizationId, ModelsPutPayload putOrganizationsRequest);

        /// <summary>
        /// Updates an existing organization
        /// </summary>
        /// <remarks>
        /// Updates an existing organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutOrganizationWithHttpInfo (int? organizationId, ModelsPutPayload putOrganizationsRequest);
        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        GroupOrganizationGroupResponse PutOrganizationGroup (int? organizationId, GroupPayload putGroupRequest);

        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        ApiResponse<GroupOrganizationGroupResponse> PutOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload putGroupRequest);
        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Save organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsOrganizationSegmentation</returns>
        ModelsOrganizationSegmentation PutOrganizationSegmentation (int? organizationId);

        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Save organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsOrganizationSegmentation</returns>
        ApiResponse<ModelsOrganizationSegmentation> PutOrganizationSegmentationWithHttpInfo (int? organizationId);
        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>string</returns>
        string PutOrganizationUsers (int? organizationId, UserPayload _params);

        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutOrganizationUsersWithHttpInfo (int? organizationId, UserPayload _params);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteOrganizationGroupAsync (int? organizationId, int? groupId);

        /// <summary>
        /// Deletes group
        /// </summary>
        /// <remarks>
        /// Deletes a group from the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId);
        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteOrganizationUsersLeaveAsync (int? organizationId);

        /// <summary>
        /// Leaves organization
        /// </summary>
        /// <remarks>
        /// Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationUsersLeaveAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Organization data
        /// </summary>
        /// <remarks>
        /// Returns organization name and current pricing plan
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsMeOrganization</returns>
        System.Threading.Tasks.Task<ModelsMeOrganization> GetOrganizationAsync (int? organizationId);

        /// <summary>
        /// Organization data
        /// </summary>
        /// <remarks>
        /// Returns organization name and current pricing plan
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsMeOrganization)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsMeOrganization>> GetOrganizationAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationGroupsAsync (int? organizationId, string name = null, string workspace = null);

        /// <summary>
        /// List of groups in organization with user and workspace assignments
        /// </summary>
        /// <remarks>
        /// Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationGroupsAsyncWithHttpInfo (int? organizationId, string name = null, string workspace = null);
        /// <summary>
        /// Get owner of the organization
        /// </summary>
        /// <remarks>
        /// Returns organization owner data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsOrganizationOwner</returns>
        System.Threading.Tasks.Task<ModelsOrganizationOwner> GetOrganizationOwnerAsync (int? organizationId);

        /// <summary>
        /// Get owner of the organization
        /// </summary>
        /// <remarks>
        /// Returns organization owner data.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsOrganizationOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsOrganizationOwner>> GetOrganizationOwnerAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Organization roles.
        /// </summary>
        /// <remarks>
        /// Returns a list of organization specific and global roles.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of List&lt;TypesRole&gt;</returns>
        System.Threading.Tasks.Task<List<TypesRole>> GetOrganizationRolesAsync (int? organizationId);

        /// <summary>
        /// Organization roles.
        /// </summary>
        /// <remarks>
        /// Returns a list of organization specific and global roles.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (List&lt;TypesRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypesRole>>> GetOrganizationRolesAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Returns organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsOrganizationSegmentation</returns>
        System.Threading.Tasks.Task<ModelsOrganizationSegmentation> GetOrganizationSegmentationAsync (int? organizationId);

        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Returns organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsOrganizationSegmentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsOrganizationSegmentation>> GetOrganizationSegmentationAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsOrgUser>> GetOrganizationUsersAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUser>>> GetOrganizationUsersAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUserDetailed&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsOrgUserDetailed>> GetOrganizationUsersDetailedAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);

        /// <summary>
        /// List of users in organization with details
        /// </summary>
        /// <remarks>
        /// Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUserDetailed&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUserDetailed>>> GetOrganizationUsersDetailedAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null);
        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsAsync (int? organizationId, int? workspaceId);

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments.
        /// </summary>
        /// <remarks>
        /// Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationWorkspacesGroupsAsyncWithHttpInfo (int? organizationId, int? workspaceId);
        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, ModelsStatistics>> GetOrganizationWorkspacesStatisticsAsync ();

        /// <summary>
        /// Statistics for all workspaces in the organization
        /// </summary>
        /// <remarks>
        /// Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ModelsStatistics&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ModelsStatistics>>> GetOrganizationWorkspacesStatisticsAsyncWithHttpInfo ();
        /// <summary>
        /// OrganizationsPaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns paid invoices
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>Task of List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsUnifiedSubscriptionInvoiceList>> GetOrganizationsPaymentsRecordsAsync (int? organizationId, bool? isUnified = null, string next = null, string prev = null);

        /// <summary>
        /// OrganizationsPaymentRecords
        /// </summary>
        /// <remarks>
        /// Returns paid invoices
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsUnifiedSubscriptionInvoiceList>>> GetOrganizationsPaymentsRecordsAsyncWithHttpInfo (int? organizationId, bool? isUnified = null, string next = null, string prev = null);
        /// <summary>
        /// OrganizationsPlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for an organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of BillingPricingStruct</returns>
        System.Threading.Tasks.Task<BillingPricingStruct> GetOrganizationsPlansAsync (int? organizationId);

        /// <summary>
        /// OrganizationsPlans
        /// </summary>
        /// <remarks>
        /// Returns pricing plans for an organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (BillingPricingStruct)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPricingStruct>> GetOrganizationsPlansAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// OrganizationsPlan
        /// </summary>
        /// <remarks>
        /// Returns pricing plan for an organization identified by plan_id
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>Task of BillingPricingStruct</returns>
        System.Threading.Tasks.Task<BillingPricingStruct> GetOrganizationsPlans_0Async (int? organizationId, int? planId);

        /// <summary>
        /// OrganizationsPlan
        /// </summary>
        /// <remarks>
        /// Returns pricing plan for an organization identified by plan_id
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>Task of ApiResponse (BillingPricingStruct)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPricingStruct>> GetOrganizationsPlans_0AsyncWithHttpInfo (int? organizationId, int? planId);
        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of GroupsPatchOutput</returns>
        System.Threading.Tasks.Task<GroupsPatchOutput> PatchOrganizationGroupAsync (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);

        /// <summary>
        /// Patch group
        /// </summary>
        /// <remarks>
        /// Patches a group in the specified organization. Patches are applied individually.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of ApiResponse (GroupsPatchOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupsPatchOutput>> PatchOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest);
        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PatchOrganizationUsersAsync (int? organizationId, UserPatchParams _params);

        /// <summary>
        /// Apply changes in bulk to users in an organization
        /// </summary>
        /// <remarks>
        /// Apply changes in bulk to users in an organization (currently deletion only).
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPatchParams _params);
        /// <summary>
        /// Creates a new organization
        /// </summary>
        /// <remarks>
        /// Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of OrganizationPostOrganizationReply</returns>
        System.Threading.Tasks.Task<OrganizationPostOrganizationReply> PostOrganizationAsync (ModelsPostPayload postOrganizationsRequest);

        /// <summary>
        /// Creates a new organization
        /// </summary>
        /// <remarks>
        /// Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of ApiResponse (OrganizationPostOrganizationReply)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationPostOrganizationReply>> PostOrganizationAsyncWithHttpInfo (ModelsPostPayload postOrganizationsRequest);
        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostOrganizationAcceptInvitationAsync (string inviutationCode);

        /// <summary>
        /// Accepts invitation
        /// </summary>
        /// <remarks>
        /// User connected with invitation is marked as joined, email is sent to the inviter.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostOrganizationAcceptInvitationAsyncWithHttpInfo (string inviutationCode);
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PostOrganizationGroupAsync (int? organizationId, GroupPayload postGroupRequest);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PostOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload postGroupRequest);
        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of InvitationResult</returns>
        System.Threading.Tasks.Task<InvitationResult> PostOrganizationInvitationAsync (int? organizationId, InvitationPost postInvitationRequest);

        /// <summary>
        /// Creates a new invitation for the user
        /// </summary>
        /// <remarks>
        /// Creates a new invitation for the user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of ApiResponse (InvitationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationResult>> PostOrganizationInvitationAsyncWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest);
        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        System.Threading.Tasks.Task<WorkspaceWorkspace> PostOrganizationWorkspacesAsync (int? organizationId, WorkspacePayload post);

        /// <summary>
        /// Create a new workspace.
        /// </summary>
        /// <remarks>
        /// Create a workspace within an existing organization.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> PostOrganizationWorkspacesAsyncWithHttpInfo (int? organizationId, WorkspacePayload post);
        /// <summary>
        /// Updates an existing organization
        /// </summary>
        /// <remarks>
        /// Updates an existing organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutOrganizationAsync (int? organizationId, ModelsPutPayload putOrganizationsRequest);

        /// <summary>
        /// Updates an existing organization
        /// </summary>
        /// <remarks>
        /// Updates an existing organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationAsyncWithHttpInfo (int? organizationId, ModelsPutPayload putOrganizationsRequest);
        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PutOrganizationGroupAsync (int? organizationId, GroupPayload putGroupRequest);

        /// <summary>
        /// Edit group
        /// </summary>
        /// <remarks>
        /// Edits a group in the specified organization
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PutOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload putGroupRequest);
        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Save organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsOrganizationSegmentation</returns>
        System.Threading.Tasks.Task<ModelsOrganizationSegmentation> PutOrganizationSegmentationAsync (int? organizationId);

        /// <summary>
        /// Organization segmentation data
        /// </summary>
        /// <remarks>
        /// Save organization segmentation information
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsOrganizationSegmentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsOrganizationSegmentation>> PutOrganizationSegmentationAsyncWithHttpInfo (int? organizationId);
        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutOrganizationUsersAsync (int? organizationId, UserPayload _params);

        /// <summary>
        /// Changes a single organization-user
        /// </summary>
        /// <remarks>
        /// Changes a single organization-user. Can affect the following values:
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPayload _params);
        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post);

        /// <summary>
        /// Change assignments of users within a workspace.
        /// </summary>
        /// <remarks>
        /// Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationsApi : IOrganizationsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>string</returns>
        public string DeleteOrganizationGroup (int? organizationId, int? groupId)
        {
             ApiResponse<string> localVarResponse = DeleteOrganizationGroupWithHttpInfo(organizationId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteOrganizationGroupWithHttpInfo (int? organizationId, int? groupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling OrganizationsApi->DeleteOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteOrganizationGroupAsync (int? organizationId, int? groupId)
        {
             ApiResponse<string> localVarResponse = await DeleteOrganizationGroupAsyncWithHttpInfo(organizationId, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes group Deletes a group from the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling OrganizationsApi->DeleteOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>string</returns>
        public string DeleteOrganizationUsersLeave (int? organizationId)
        {
             ApiResponse<string> localVarResponse = DeleteOrganizationUsersLeaveWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteOrganizationUsersLeaveWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationUsersLeave");

            var localVarPath = "/organizations/{organization_id}/users/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationUsersLeave", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteOrganizationUsersLeaveAsync (int? organizationId)
        {
             ApiResponse<string> localVarResponse = await DeleteOrganizationUsersLeaveAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leaves organization Leaves organization, effectively delete user account in org and delete organization if it is last user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteOrganizationUsersLeaveAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationUsersLeave");

            var localVarPath = "/organizations/{organization_id}/users/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationUsersLeave", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Organization data Returns organization name and current pricing plan
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsMeOrganization</returns>
        public ModelsMeOrganization GetOrganization (int? organizationId)
        {
             ApiResponse<ModelsMeOrganization> localVarResponse = GetOrganizationWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Organization data Returns organization name and current pricing plan
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsMeOrganization</returns>
        public ApiResponse< ModelsMeOrganization > GetOrganizationWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganization");

            var localVarPath = "/organizations/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsMeOrganization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsMeOrganization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsMeOrganization)));
        }

        /// <summary>
        /// Organization data Returns organization name and current pricing plan
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsMeOrganization</returns>
        public async System.Threading.Tasks.Task<ModelsMeOrganization> GetOrganizationAsync (int? organizationId)
        {
             ApiResponse<ModelsMeOrganization> localVarResponse = await GetOrganizationAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Organization data Returns organization name and current pricing plan
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsMeOrganization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsMeOrganization>> GetOrganizationAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganization");

            var localVarPath = "/organizations/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsMeOrganization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsMeOrganization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsMeOrganization)));
        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public List<GroupOrganizationGroupResponse> GetOrganizationGroups (int? organizationId, string name = null, string workspace = null)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = GetOrganizationGroupsWithHttpInfo(organizationId, name, workspace);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public ApiResponse< List<GroupOrganizationGroupResponse> > GetOrganizationGroupsWithHttpInfo (int? organizationId, string name = null, string workspace = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationGroups");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationGroupsAsync (int? organizationId, string name = null, string workspace = null)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = await GetOrganizationGroupsAsyncWithHttpInfo(organizationId, name, workspace);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of groups in organization with user and workspace assignments Returns list of groups in organization based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="name">Returns records where name contains this string (optional)</param>
        /// <param name="workspace">ID of workspace. Returns groups assigned to this workspace (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationGroupsAsyncWithHttpInfo (int? organizationId, string name = null, string workspace = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationGroups");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// Get owner of the organization Returns organization owner data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsOrganizationOwner</returns>
        public ModelsOrganizationOwner GetOrganizationOwner (int? organizationId)
        {
             ApiResponse<ModelsOrganizationOwner> localVarResponse = GetOrganizationOwnerWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get owner of the organization Returns organization owner data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsOrganizationOwner</returns>
        public ApiResponse< ModelsOrganizationOwner > GetOrganizationOwnerWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationOwner");

            var localVarPath = "/organizations/{organization_id}/owner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsOrganizationOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsOrganizationOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsOrganizationOwner)));
        }

        /// <summary>
        /// Get owner of the organization Returns organization owner data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsOrganizationOwner</returns>
        public async System.Threading.Tasks.Task<ModelsOrganizationOwner> GetOrganizationOwnerAsync (int? organizationId)
        {
             ApiResponse<ModelsOrganizationOwner> localVarResponse = await GetOrganizationOwnerAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get owner of the organization Returns organization owner data.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsOrganizationOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsOrganizationOwner>> GetOrganizationOwnerAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationOwner");

            var localVarPath = "/organizations/{organization_id}/owner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsOrganizationOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsOrganizationOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsOrganizationOwner)));
        }

        /// <summary>
        /// Organization roles. Returns a list of organization specific and global roles.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>List&lt;TypesRole&gt;</returns>
        public List<TypesRole> GetOrganizationRoles (int? organizationId)
        {
             ApiResponse<List<TypesRole>> localVarResponse = GetOrganizationRolesWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Organization roles. Returns a list of organization specific and global roles.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of List&lt;TypesRole&gt;</returns>
        public ApiResponse< List<TypesRole> > GetOrganizationRolesWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationRoles");

            var localVarPath = "/organizations/{organization_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypesRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypesRole>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypesRole>)));
        }

        /// <summary>
        /// Organization roles. Returns a list of organization specific and global roles.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of List&lt;TypesRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypesRole>> GetOrganizationRolesAsync (int? organizationId)
        {
             ApiResponse<List<TypesRole>> localVarResponse = await GetOrganizationRolesAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Organization roles. Returns a list of organization specific and global roles.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (List&lt;TypesRole&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypesRole>>> GetOrganizationRolesAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationRoles");

            var localVarPath = "/organizations/{organization_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypesRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TypesRole>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypesRole>)));
        }

        /// <summary>
        /// Organization segmentation data Returns organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsOrganizationSegmentation</returns>
        public ModelsOrganizationSegmentation GetOrganizationSegmentation (int? organizationId)
        {
             ApiResponse<ModelsOrganizationSegmentation> localVarResponse = GetOrganizationSegmentationWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Organization segmentation data Returns organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsOrganizationSegmentation</returns>
        public ApiResponse< ModelsOrganizationSegmentation > GetOrganizationSegmentationWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationSegmentation");

            var localVarPath = "/organizations/{organization_id}/segmentation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationSegmentation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsOrganizationSegmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsOrganizationSegmentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsOrganizationSegmentation)));
        }

        /// <summary>
        /// Organization segmentation data Returns organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsOrganizationSegmentation</returns>
        public async System.Threading.Tasks.Task<ModelsOrganizationSegmentation> GetOrganizationSegmentationAsync (int? organizationId)
        {
             ApiResponse<ModelsOrganizationSegmentation> localVarResponse = await GetOrganizationSegmentationAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Organization segmentation data Returns organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsOrganizationSegmentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsOrganizationSegmentation>> GetOrganizationSegmentationAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationSegmentation");

            var localVarPath = "/organizations/{organization_id}/segmentation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationSegmentation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsOrganizationSegmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsOrganizationSegmentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsOrganizationSegmentation)));
        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUser&gt;</returns>
        public List<ModelsOrgUser> GetOrganizationUsers (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUser>> localVarResponse = GetOrganizationUsersWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUser&gt;</returns>
        public ApiResponse< List<ModelsOrgUser> > GetOrganizationUsersWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUser>)));
        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsOrgUser>> GetOrganizationUsersAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUser>> localVarResponse = await GetOrganizationUsersAsyncWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of users in organization Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUser>>> GetOrganizationUsersAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUser>)));
        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>List&lt;ModelsOrgUserDetailed&gt;</returns>
        public List<ModelsOrgUserDetailed> GetOrganizationUsersDetailed (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUserDetailed>> localVarResponse = GetOrganizationUsersDetailedWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsOrgUserDetailed&gt;</returns>
        public ApiResponse< List<ModelsOrgUserDetailed> > GetOrganizationUsersDetailedWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationUsersDetailed");

            var localVarPath = "/organizations/{organization_id}/users/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsersDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUserDetailed>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUserDetailed>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUserDetailed>)));
        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of List&lt;ModelsOrgUserDetailed&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsOrgUserDetailed>> GetOrganizationUsersDetailedAsync (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
             ApiResponse<List<ModelsOrgUserDetailed>> localVarResponse = await GetOrganizationUsersDetailedAsyncWithHttpInfo(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of users in organization with details Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="filter">Returns records where name or email contains this string (optional)</param>
        /// <param name="activeStatus">List of &#x60;active&#x60; &#x60;inactive&#x60; &#x60;invited&#x60; comma separated(if not present, all statuses) (optional)</param>
        /// <param name="onlyAdmins">If true returns admins only (optional)</param>
        /// <param name="groups">Comma-separated list of groups ids, returns users belonging to these groups only (optional)</param>
        /// <param name="workspaces">Comma-separated list of workspaces ids, returns users belonging to this workspaces only (optional)</param>
        /// <param name="page">Page number, default 1 (optional)</param>
        /// <param name="perPage">Number of items per page, default 50 (optional)</param>
        /// <param name="sortDir">Values &#39;asc&#39; or &#39;desc&#39;, result is sorted on &#39;names&#39; column, default &#39;asc&#39; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsOrgUserDetailed&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsOrgUserDetailed>>> GetOrganizationUsersDetailedAsyncWithHttpInfo (int? organizationId, string filter = null, string activeStatus = null, string onlyAdmins = null, string groups = null, string workspaces = null, int? page = null, int? perPage = null, string sortDir = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationUsersDetailed");

            var localVarPath = "/organizations/{organization_id}/users/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (activeStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_status", activeStatus)); // query parameter
            if (onlyAdmins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only_admins", onlyAdmins)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (workspaces != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspaces", workspaces)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationUsersDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsOrgUserDetailed>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsOrgUserDetailed>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsOrgUserDetailed>)));
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public List<GroupOrganizationGroupResponse> GetOrganizationWorkspacesGroups (int? organizationId, int? workspaceId)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = GetOrganizationWorkspacesGroupsWithHttpInfo(organizationId, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>ApiResponse of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public ApiResponse< List<GroupOrganizationGroupResponse> > GetOrganizationWorkspacesGroupsWithHttpInfo (int? organizationId, int? workspaceId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationWorkspacesGroups");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling OrganizationsApi->GetOrganizationWorkspacesGroups");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of List&lt;GroupOrganizationGroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupOrganizationGroupResponse>> GetOrganizationWorkspacesGroupsAsync (int? organizationId, int? workspaceId)
        {
             ApiResponse<List<GroupOrganizationGroupResponse>> localVarResponse = await GetOrganizationWorkspacesGroupsAsyncWithHttpInfo(organizationId, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of groups in a workspace within an organization with user assignments. Returns list of groups in a workspace based on set of url parameters. List is sorted by name.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <returns>Task of ApiResponse (List&lt;GroupOrganizationGroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupOrganizationGroupResponse>>> GetOrganizationWorkspacesGroupsAsyncWithHttpInfo (int? organizationId, int? workspaceId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationWorkspacesGroups");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling OrganizationsApi->GetOrganizationWorkspacesGroups");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupOrganizationGroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupOrganizationGroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupOrganizationGroupResponse>)));
        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, ModelsStatistics&gt;</returns>
        public Dictionary<string, ModelsStatistics> GetOrganizationWorkspacesStatistics ()
        {
             ApiResponse<Dictionary<string, ModelsStatistics>> localVarResponse = GetOrganizationWorkspacesStatisticsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        public ApiResponse< Dictionary<string, ModelsStatistics> > GetOrganizationWorkspacesStatisticsWithHttpInfo ()
        {

            var localVarPath = "/organizations/{organization_id}/workspaces/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, ModelsStatistics>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, ModelsStatistics>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, ModelsStatistics>)));
        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, ModelsStatistics&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, ModelsStatistics>> GetOrganizationWorkspacesStatisticsAsync ()
        {
             ApiResponse<Dictionary<string, ModelsStatistics>> localVarResponse = await GetOrganizationWorkspacesStatisticsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Statistics for all workspaces in the organization Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, ModelsStatistics&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, ModelsStatistics>>> GetOrganizationWorkspacesStatisticsAsyncWithHttpInfo ()
        {

            var localVarPath = "/organizations/{organization_id}/workspaces/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationWorkspacesStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, ModelsStatistics>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, ModelsStatistics>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, ModelsStatistics>)));
        }

        /// <summary>
        /// OrganizationsPaymentRecords Returns paid invoices
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;</returns>
        public List<ModelsUnifiedSubscriptionInvoiceList> GetOrganizationsPaymentsRecords (int? organizationId, bool? isUnified = null, string next = null, string prev = null)
        {
             ApiResponse<List<ModelsUnifiedSubscriptionInvoiceList>> localVarResponse = GetOrganizationsPaymentsRecordsWithHttpInfo(organizationId, isUnified, next, prev);
             return localVarResponse.Data;
        }

        /// <summary>
        /// OrganizationsPaymentRecords Returns paid invoices
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;</returns>
        public ApiResponse< List<ModelsUnifiedSubscriptionInvoiceList> > GetOrganizationsPaymentsRecordsWithHttpInfo (int? organizationId, bool? isUnified = null, string next = null, string prev = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationsPaymentsRecords");

            var localVarPath = "/organizations/{organization_id}/payment_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (isUnified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_unified", isUnified)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (prev != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev", prev)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationsPaymentsRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsUnifiedSubscriptionInvoiceList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsUnifiedSubscriptionInvoiceList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsUnifiedSubscriptionInvoiceList>)));
        }

        /// <summary>
        /// OrganizationsPaymentRecords Returns paid invoices
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>Task of List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsUnifiedSubscriptionInvoiceList>> GetOrganizationsPaymentsRecordsAsync (int? organizationId, bool? isUnified = null, string next = null, string prev = null)
        {
             ApiResponse<List<ModelsUnifiedSubscriptionInvoiceList>> localVarResponse = await GetOrganizationsPaymentsRecordsAsyncWithHttpInfo(organizationId, isUnified, next, prev);
             return localVarResponse.Data;

        }

        /// <summary>
        /// OrganizationsPaymentRecords Returns paid invoices
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="isUnified">If &#39;true&#39;, returns unified invoices (optional)</param>
        /// <param name="next">Next cursor for unified subsriptions. Cannot be used at the same time &#x60;prev&#x60; (optional)</param>
        /// <param name="prev">Previous cursor for unified subsriptions. Cannot be used at the same time with &#x60;next&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsUnifiedSubscriptionInvoiceList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsUnifiedSubscriptionInvoiceList>>> GetOrganizationsPaymentsRecordsAsyncWithHttpInfo (int? organizationId, bool? isUnified = null, string next = null, string prev = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationsPaymentsRecords");

            var localVarPath = "/organizations/{organization_id}/payment_records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (isUnified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_unified", isUnified)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (prev != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev", prev)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationsPaymentsRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsUnifiedSubscriptionInvoiceList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsUnifiedSubscriptionInvoiceList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsUnifiedSubscriptionInvoiceList>)));
        }

        /// <summary>
        /// OrganizationsPlans Returns pricing plans for an organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>BillingPricingStruct</returns>
        public BillingPricingStruct GetOrganizationsPlans (int? organizationId)
        {
             ApiResponse<BillingPricingStruct> localVarResponse = GetOrganizationsPlansWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// OrganizationsPlans Returns pricing plans for an organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of BillingPricingStruct</returns>
        public ApiResponse< BillingPricingStruct > GetOrganizationsPlansWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationsPlans");

            var localVarPath = "/organizations/{organization_id}/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationsPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPricingStruct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPricingStruct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPricingStruct)));
        }

        /// <summary>
        /// OrganizationsPlans Returns pricing plans for an organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of BillingPricingStruct</returns>
        public async System.Threading.Tasks.Task<BillingPricingStruct> GetOrganizationsPlansAsync (int? organizationId)
        {
             ApiResponse<BillingPricingStruct> localVarResponse = await GetOrganizationsPlansAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// OrganizationsPlans Returns pricing plans for an organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (BillingPricingStruct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPricingStruct>> GetOrganizationsPlansAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationsPlans");

            var localVarPath = "/organizations/{organization_id}/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationsPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPricingStruct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPricingStruct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPricingStruct)));
        }

        /// <summary>
        /// OrganizationsPlan Returns pricing plan for an organization identified by plan_id
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>BillingPricingStruct</returns>
        public BillingPricingStruct GetOrganizationsPlans_0 (int? organizationId, int? planId)
        {
             ApiResponse<BillingPricingStruct> localVarResponse = GetOrganizationsPlans_0WithHttpInfo(organizationId, planId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// OrganizationsPlan Returns pricing plan for an organization identified by plan_id
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>ApiResponse of BillingPricingStruct</returns>
        public ApiResponse< BillingPricingStruct > GetOrganizationsPlans_0WithHttpInfo (int? organizationId, int? planId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationsPlans_0");
            // verify the required parameter 'planId' is set
            if (planId == null)
                throw new ApiException(400, "Missing required parameter 'planId' when calling OrganizationsApi->GetOrganizationsPlans_0");

            var localVarPath = "/organizations/{organization_id}/plans/{plan_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (planId != null) localVarPathParams.Add("plan_id", this.Configuration.ApiClient.ParameterToString(planId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationsPlans_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPricingStruct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPricingStruct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPricingStruct)));
        }

        /// <summary>
        /// OrganizationsPlan Returns pricing plan for an organization identified by plan_id
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>Task of BillingPricingStruct</returns>
        public async System.Threading.Tasks.Task<BillingPricingStruct> GetOrganizationsPlans_0Async (int? organizationId, int? planId)
        {
             ApiResponse<BillingPricingStruct> localVarResponse = await GetOrganizationsPlans_0AsyncWithHttpInfo(organizationId, planId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// OrganizationsPlan Returns pricing plan for an organization identified by plan_id
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="planId">Numeric ID of the plan</param>
        /// <returns>Task of ApiResponse (BillingPricingStruct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPricingStruct>> GetOrganizationsPlans_0AsyncWithHttpInfo (int? organizationId, int? planId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationsPlans_0");
            // verify the required parameter 'planId' is set
            if (planId == null)
                throw new ApiException(400, "Missing required parameter 'planId' when calling OrganizationsApi->GetOrganizationsPlans_0");

            var localVarPath = "/organizations/{organization_id}/plans/{plan_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (planId != null) localVarPathParams.Add("plan_id", this.Configuration.ApiClient.ParameterToString(planId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationsPlans_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPricingStruct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPricingStruct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPricingStruct)));
        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>GroupsPatchOutput</returns>
        public GroupsPatchOutput PatchOrganizationGroup (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
             ApiResponse<GroupsPatchOutput> localVarResponse = PatchOrganizationGroupWithHttpInfo(organizationId, groupId, patchGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>ApiResponse of GroupsPatchOutput</returns>
        public ApiResponse< GroupsPatchOutput > PatchOrganizationGroupWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PatchOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling OrganizationsApi->PatchOrganizationGroup");
            // verify the required parameter 'patchGroupRequest' is set
            if (patchGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'patchGroupRequest' when calling OrganizationsApi->PatchOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (patchGroupRequest != null && patchGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupsPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupsPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupsPatchOutput)));
        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of GroupsPatchOutput</returns>
        public async System.Threading.Tasks.Task<GroupsPatchOutput> PatchOrganizationGroupAsync (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
             ApiResponse<GroupsPatchOutput> localVarResponse = await PatchOrganizationGroupAsyncWithHttpInfo(organizationId, groupId, patchGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch group Patches a group in the specified organization. Patches are applied individually.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="groupId">Numeric ID of the group.</param>
        /// <param name="patchGroupRequest">Array of patch operations.</param>
        /// <returns>Task of ApiResponse (GroupsPatchOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupsPatchOutput>> PatchOrganizationGroupAsyncWithHttpInfo (int? organizationId, int? groupId, List<GroupsPatchInput> patchGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PatchOrganizationGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling OrganizationsApi->PatchOrganizationGroup");
            // verify the required parameter 'patchGroupRequest' is set
            if (patchGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'patchGroupRequest' when calling OrganizationsApi->PatchOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (patchGroupRequest != null && patchGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupsPatchOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupsPatchOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupsPatchOutput)));
        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>string</returns>
        public string PatchOrganizationUsers (int? organizationId, UserPatchParams _params)
        {
             ApiResponse<string> localVarResponse = PatchOrganizationUsersWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PatchOrganizationUsersWithHttpInfo (int? organizationId, UserPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PatchOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling OrganizationsApi->PatchOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PatchOrganizationUsersAsync (int? organizationId, UserPatchParams _params)
        {
             ApiResponse<string> localVarResponse = await PatchOrganizationUsersAsyncWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply changes in bulk to users in an organization Apply changes in bulk to users in an organization (currently deletion only).
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the users to be patched.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PatchOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPatchParams _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PatchOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling OrganizationsApi->PatchOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Creates a new organization Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>OrganizationPostOrganizationReply</returns>
        public OrganizationPostOrganizationReply PostOrganization (ModelsPostPayload postOrganizationsRequest)
        {
             ApiResponse<OrganizationPostOrganizationReply> localVarResponse = PostOrganizationWithHttpInfo(postOrganizationsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new organization Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>ApiResponse of OrganizationPostOrganizationReply</returns>
        public ApiResponse< OrganizationPostOrganizationReply > PostOrganizationWithHttpInfo (ModelsPostPayload postOrganizationsRequest)
        {
            // verify the required parameter 'postOrganizationsRequest' is set
            if (postOrganizationsRequest == null)
                throw new ApiException(400, "Missing required parameter 'postOrganizationsRequest' when calling OrganizationsApi->PostOrganization");

            var localVarPath = "/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postOrganizationsRequest != null && postOrganizationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postOrganizationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postOrganizationsRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationPostOrganizationReply>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationPostOrganizationReply) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationPostOrganizationReply)));
        }

        /// <summary>
        /// Creates a new organization Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of OrganizationPostOrganizationReply</returns>
        public async System.Threading.Tasks.Task<OrganizationPostOrganizationReply> PostOrganizationAsync (ModelsPostPayload postOrganizationsRequest)
        {
             ApiResponse<OrganizationPostOrganizationReply> localVarResponse = await PostOrganizationAsyncWithHttpInfo(postOrganizationsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new organization Creates a new organization with a single workspace and assigns current user as the organization owner
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of ApiResponse (OrganizationPostOrganizationReply)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationPostOrganizationReply>> PostOrganizationAsyncWithHttpInfo (ModelsPostPayload postOrganizationsRequest)
        {
            // verify the required parameter 'postOrganizationsRequest' is set
            if (postOrganizationsRequest == null)
                throw new ApiException(400, "Missing required parameter 'postOrganizationsRequest' when calling OrganizationsApi->PostOrganization");

            var localVarPath = "/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postOrganizationsRequest != null && postOrganizationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postOrganizationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postOrganizationsRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationPostOrganizationReply>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationPostOrganizationReply) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationPostOrganizationReply)));
        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>string</returns>
        public string PostOrganizationAcceptInvitation (string inviutationCode)
        {
             ApiResponse<string> localVarResponse = PostOrganizationAcceptInvitationWithHttpInfo(inviutationCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostOrganizationAcceptInvitationWithHttpInfo (string inviutationCode)
        {
            // verify the required parameter 'inviutationCode' is set
            if (inviutationCode == null)
                throw new ApiException(400, "Missing required parameter 'inviutationCode' when calling OrganizationsApi->PostOrganizationAcceptInvitation");

            var localVarPath = "/organizations/invitations/{invitation_code}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviutationCode != null) localVarPathParams.Add("inviutation_code", this.Configuration.ApiClient.ParameterToString(inviutationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostOrganizationAcceptInvitationAsync (string inviutationCode)
        {
             ApiResponse<string> localVarResponse = await PostOrganizationAcceptInvitationAsyncWithHttpInfo(inviutationCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accepts invitation User connected with invitation is marked as joined, email is sent to the inviter.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviutationCode">Invitation code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostOrganizationAcceptInvitationAsyncWithHttpInfo (string inviutationCode)
        {
            // verify the required parameter 'inviutationCode' is set
            if (inviutationCode == null)
                throw new ApiException(400, "Missing required parameter 'inviutationCode' when calling OrganizationsApi->PostOrganizationAcceptInvitation");

            var localVarPath = "/organizations/invitations/{invitation_code}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviutationCode != null) localVarPathParams.Add("inviutation_code", this.Configuration.ApiClient.ParameterToString(inviutationCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        public GroupOrganizationGroupResponse PostOrganizationGroup (int? organizationId, GroupPayload postGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = PostOrganizationGroupWithHttpInfo(organizationId, postGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        public ApiResponse< GroupOrganizationGroupResponse > PostOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload postGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PostOrganizationGroup");
            // verify the required parameter 'postGroupRequest' is set
            if (postGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'postGroupRequest' when calling OrganizationsApi->PostOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postGroupRequest != null && postGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        public async System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PostOrganizationGroupAsync (int? organizationId, GroupPayload postGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = await PostOrganizationGroupAsyncWithHttpInfo(organizationId, postGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create group Creates a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postGroupRequest">Input data for group creation.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PostOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload postGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PostOrganizationGroup");
            // verify the required parameter 'postGroupRequest' is set
            if (postGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'postGroupRequest' when calling OrganizationsApi->PostOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postGroupRequest != null && postGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>InvitationResult</returns>
        public InvitationResult PostOrganizationInvitation (int? organizationId, InvitationPost postInvitationRequest)
        {
             ApiResponse<InvitationResult> localVarResponse = PostOrganizationInvitationWithHttpInfo(organizationId, postInvitationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>ApiResponse of InvitationResult</returns>
        public ApiResponse< InvitationResult > PostOrganizationInvitationWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PostOrganizationInvitation");
            // verify the required parameter 'postInvitationRequest' is set
            if (postInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'postInvitationRequest' when calling OrganizationsApi->PostOrganizationInvitation");

            var localVarPath = "/organizations/{organization_id}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postInvitationRequest != null && postInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInvitationRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationResult)));
        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of InvitationResult</returns>
        public async System.Threading.Tasks.Task<InvitationResult> PostOrganizationInvitationAsync (int? organizationId, InvitationPost postInvitationRequest)
        {
             ApiResponse<InvitationResult> localVarResponse = await PostOrganizationInvitationAsyncWithHttpInfo(organizationId, postInvitationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new invitation for the user Creates a new invitation for the user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="postInvitationRequest">Input data for invitation creation</param>
        /// <returns>Task of ApiResponse (InvitationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationResult>> PostOrganizationInvitationAsyncWithHttpInfo (int? organizationId, InvitationPost postInvitationRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PostOrganizationInvitation");
            // verify the required parameter 'postInvitationRequest' is set
            if (postInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'postInvitationRequest' when calling OrganizationsApi->PostOrganizationInvitation");

            var localVarPath = "/organizations/{organization_id}/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (postInvitationRequest != null && postInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postInvitationRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationResult)));
        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>WorkspaceWorkspace</returns>
        public WorkspaceWorkspace PostOrganizationWorkspaces (int? organizationId, WorkspacePayload post)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = PostOrganizationWorkspacesWithHttpInfo(organizationId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>ApiResponse of WorkspaceWorkspace</returns>
        public ApiResponse< WorkspaceWorkspace > PostOrganizationWorkspacesWithHttpInfo (int? organizationId, WorkspacePayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PostOrganizationWorkspaces");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling OrganizationsApi->PostOrganizationWorkspaces");

            var localVarPath = "/organizations/{organization_id}/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of WorkspaceWorkspace</returns>
        public async System.Threading.Tasks.Task<WorkspaceWorkspace> PostOrganizationWorkspacesAsync (int? organizationId, WorkspacePayload post)
        {
             ApiResponse<WorkspaceWorkspace> localVarResponse = await PostOrganizationWorkspacesAsyncWithHttpInfo(organizationId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new workspace. Create a workspace within an existing organization.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="post">Parameters of the new workspace</param>
        /// <returns>Task of ApiResponse (WorkspaceWorkspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceWorkspace>> PostOrganizationWorkspacesAsyncWithHttpInfo (int? organizationId, WorkspacePayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PostOrganizationWorkspaces");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling OrganizationsApi->PostOrganizationWorkspaces");

            var localVarPath = "/organizations/{organization_id}/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOrganizationWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceWorkspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceWorkspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceWorkspace)));
        }

        /// <summary>
        /// Updates an existing organization Updates an existing organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>string</returns>
        public string PutOrganization (int? organizationId, ModelsPutPayload putOrganizationsRequest)
        {
             ApiResponse<string> localVarResponse = PutOrganizationWithHttpInfo(organizationId, putOrganizationsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing organization Updates an existing organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutOrganizationWithHttpInfo (int? organizationId, ModelsPutPayload putOrganizationsRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganization");
            // verify the required parameter 'putOrganizationsRequest' is set
            if (putOrganizationsRequest == null)
                throw new ApiException(400, "Missing required parameter 'putOrganizationsRequest' when calling OrganizationsApi->PutOrganization");

            var localVarPath = "/organizations/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (putOrganizationsRequest != null && putOrganizationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putOrganizationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putOrganizationsRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Updates an existing organization Updates an existing organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutOrganizationAsync (int? organizationId, ModelsPutPayload putOrganizationsRequest)
        {
             ApiResponse<string> localVarResponse = await PutOrganizationAsyncWithHttpInfo(organizationId, putOrganizationsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing organization Updates an existing organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putOrganizationsRequest">Input data for organization.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationAsyncWithHttpInfo (int? organizationId, ModelsPutPayload putOrganizationsRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganization");
            // verify the required parameter 'putOrganizationsRequest' is set
            if (putOrganizationsRequest == null)
                throw new ApiException(400, "Missing required parameter 'putOrganizationsRequest' when calling OrganizationsApi->PutOrganization");

            var localVarPath = "/organizations/{organization_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (putOrganizationsRequest != null && putOrganizationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putOrganizationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putOrganizationsRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>GroupOrganizationGroupResponse</returns>
        public GroupOrganizationGroupResponse PutOrganizationGroup (int? organizationId, GroupPayload putGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = PutOrganizationGroupWithHttpInfo(organizationId, putGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>ApiResponse of GroupOrganizationGroupResponse</returns>
        public ApiResponse< GroupOrganizationGroupResponse > PutOrganizationGroupWithHttpInfo (int? organizationId, GroupPayload putGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationGroup");
            // verify the required parameter 'putGroupRequest' is set
            if (putGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'putGroupRequest' when calling OrganizationsApi->PutOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (putGroupRequest != null && putGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of GroupOrganizationGroupResponse</returns>
        public async System.Threading.Tasks.Task<GroupOrganizationGroupResponse> PutOrganizationGroupAsync (int? organizationId, GroupPayload putGroupRequest)
        {
             ApiResponse<GroupOrganizationGroupResponse> localVarResponse = await PutOrganizationGroupAsyncWithHttpInfo(organizationId, putGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit group Edits a group in the specified organization
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization.</param>
        /// <param name="putGroupRequest">Input data for group modification.</param>
        /// <returns>Task of ApiResponse (GroupOrganizationGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupOrganizationGroupResponse>> PutOrganizationGroupAsyncWithHttpInfo (int? organizationId, GroupPayload putGroupRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationGroup");
            // verify the required parameter 'putGroupRequest' is set
            if (putGroupRequest == null)
                throw new ApiException(400, "Missing required parameter 'putGroupRequest' when calling OrganizationsApi->PutOrganizationGroup");

            var localVarPath = "/organizations/{organization_id}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (putGroupRequest != null && putGroupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(putGroupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = putGroupRequest; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupOrganizationGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupOrganizationGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupOrganizationGroupResponse)));
        }

        /// <summary>
        /// Organization segmentation data Save organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ModelsOrganizationSegmentation</returns>
        public ModelsOrganizationSegmentation PutOrganizationSegmentation (int? organizationId)
        {
             ApiResponse<ModelsOrganizationSegmentation> localVarResponse = PutOrganizationSegmentationWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Organization segmentation data Save organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>ApiResponse of ModelsOrganizationSegmentation</returns>
        public ApiResponse< ModelsOrganizationSegmentation > PutOrganizationSegmentationWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationSegmentation");

            var localVarPath = "/organizations/{organization_id}/segmentation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationSegmentation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsOrganizationSegmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsOrganizationSegmentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsOrganizationSegmentation)));
        }

        /// <summary>
        /// Organization segmentation data Save organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ModelsOrganizationSegmentation</returns>
        public async System.Threading.Tasks.Task<ModelsOrganizationSegmentation> PutOrganizationSegmentationAsync (int? organizationId)
        {
             ApiResponse<ModelsOrganizationSegmentation> localVarResponse = await PutOrganizationSegmentationAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Organization segmentation data Save organization segmentation information
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <returns>Task of ApiResponse (ModelsOrganizationSegmentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsOrganizationSegmentation>> PutOrganizationSegmentationAsyncWithHttpInfo (int? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationSegmentation");

            var localVarPath = "/organizations/{organization_id}/segmentation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationSegmentation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsOrganizationSegmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsOrganizationSegmentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsOrganizationSegmentation)));
        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>string</returns>
        public string PutOrganizationUsers (int? organizationId, UserPayload _params)
        {
             ApiResponse<string> localVarResponse = PutOrganizationUsersWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutOrganizationUsersWithHttpInfo (int? organizationId, UserPayload _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling OrganizationsApi->PutOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users/{organization_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutOrganizationUsersAsync (int? organizationId, UserPayload _params)
        {
             ApiResponse<string> localVarResponse = await PutOrganizationUsersAsyncWithHttpInfo(organizationId, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes a single organization-user Changes a single organization-user. Can affect the following values:
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="_params">Input data of the organization user to be changed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationUsersAsyncWithHttpInfo (int? organizationId, UserPayload _params)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationUsers");
            // verify the required parameter '_params' is set
            if (_params == null)
                throw new ApiException(400, "Missing required parameter '_params' when calling OrganizationsApi->PutOrganizationUsers");

            var localVarPath = "/organizations/{organization_id}/users/{organization_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (_params != null && _params.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_params); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _params; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>string</returns>
        public string PutOrganizationWorkspacesAssignments (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = PutOrganizationWorkspacesAssignmentsWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutOrganizationWorkspacesAssignmentsWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling OrganizationsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling OrganizationsApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutOrganizationWorkspacesAssignmentsAsync (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
             ApiResponse<string> localVarResponse = await PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo(organizationId, workspaceId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change assignments of users within a workspace. Assign or remove users to/from a workspace or to/from groups belonging to said workspace.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Numeric ID of the organization</param>
        /// <param name="workspaceId">Numeric ID of the workspace within the organization</param>
        /// <param name="post">Describes the change in assignment</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutOrganizationWorkspacesAssignmentsAsyncWithHttpInfo (int? organizationId, int? workspaceId, UserAssignmentsPayload post)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling OrganizationsApi->PutOrganizationWorkspacesAssignments");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling OrganizationsApi->PutOrganizationWorkspacesAssignments");

            var localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organization_id", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutOrganizationWorkspacesAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
