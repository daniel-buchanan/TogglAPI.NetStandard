/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get last activity for every workspace user
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;DashboardAllActivities&gt;</returns>
        List<DashboardAllActivities> GetWorkspaceAllActivities (int? workspaceId, int? since = null);

        /// <summary>
        /// Get last activity for every workspace user
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardAllActivities&gt;</returns>
        ApiResponse<List<DashboardAllActivities>> GetWorkspaceAllActivitiesWithHttpInfo (int? workspaceId, int? since = null);
        /// <summary>
        /// Get most active users
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsMostActiveUser&gt;</returns>
        List<ModelsMostActiveUser> GetWorkspaceMostActive (int? workspaceId, int? since = null);

        /// <summary>
        /// Get most active users
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsMostActiveUser&gt;</returns>
        ApiResponse<List<ModelsMostActiveUser>> GetWorkspaceMostActiveWithHttpInfo (int? workspaceId, int? since = null);
        /// <summary>
        /// Get top activities
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;DashboardAllActivities&gt;</returns>
        List<DashboardAllActivities> GetWorkspaceTopActivity (int? workspaceId, int? since = null);

        /// <summary>
        /// Get top activities
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardAllActivities&gt;</returns>
        ApiResponse<List<DashboardAllActivities>> GetWorkspaceTopActivityWithHttpInfo (int? workspaceId, int? since = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get last activity for every workspace user
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;DashboardAllActivities&gt;</returns>
        System.Threading.Tasks.Task<List<DashboardAllActivities>> GetWorkspaceAllActivitiesAsync (int? workspaceId, int? since = null);

        /// <summary>
        /// Get last activity for every workspace user
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardAllActivities&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DashboardAllActivities>>> GetWorkspaceAllActivitiesAsyncWithHttpInfo (int? workspaceId, int? since = null);
        /// <summary>
        /// Get most active users
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsMostActiveUser&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsMostActiveUser>> GetWorkspaceMostActiveAsync (int? workspaceId, int? since = null);

        /// <summary>
        /// Get most active users
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsMostActiveUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsMostActiveUser>>> GetWorkspaceMostActiveAsyncWithHttpInfo (int? workspaceId, int? since = null);
        /// <summary>
        /// Get top activities
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;DashboardAllActivities&gt;</returns>
        System.Threading.Tasks.Task<List<DashboardAllActivities>> GetWorkspaceTopActivityAsync (int? workspaceId, int? since = null);

        /// <summary>
        /// Get top activities
        /// </summary>
        /// <remarks>
        /// Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardAllActivities&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DashboardAllActivities>>> GetWorkspaceTopActivityAsyncWithHttpInfo (int? workspaceId, int? since = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DashboardApi : IDashboardApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DashboardApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get last activity for every workspace user Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;DashboardAllActivities&gt;</returns>
        public List<DashboardAllActivities> GetWorkspaceAllActivities (int? workspaceId, int? since = null)
        {
             ApiResponse<List<DashboardAllActivities>> localVarResponse = GetWorkspaceAllActivitiesWithHttpInfo(workspaceId, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get last activity for every workspace user Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardAllActivities&gt;</returns>
        public ApiResponse< List<DashboardAllActivities> > GetWorkspaceAllActivitiesWithHttpInfo (int? workspaceId, int? since = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DashboardApi->GetWorkspaceAllActivities");

            var localVarPath = "/workspaces/{workspace_id}/dashboard/all_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceAllActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardAllActivities>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardAllActivities>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardAllActivities>)));
        }

        /// <summary>
        /// Get last activity for every workspace user Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;DashboardAllActivities&gt;</returns>
        public async System.Threading.Tasks.Task<List<DashboardAllActivities>> GetWorkspaceAllActivitiesAsync (int? workspaceId, int? since = null)
        {
             ApiResponse<List<DashboardAllActivities>> localVarResponse = await GetWorkspaceAllActivitiesAsyncWithHttpInfo(workspaceId, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get last activity for every workspace user Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The activity object holds the data of 20 latest actions in the workspace or latest activity for every workspace user. Activity object has the following properties * user_id: user ID * project_id: project ID (ID is 0 if time entry doesn&#39;t have project connected to it) * duration: time entry duration in seconds. If the time entry is currently running, the duration attribute contains a negative value, denoting the start of the time entry in seconds since epoch (Jan 1 1970). The correct duration can be calculated as current_time + duration, where current_time is the current time in seconds since epoch. * description: (Description property is not present if time entry description is empty) * stop: time entry stop time (ISO 8601 date and time. Stop property is not present when time entry is still running) * tid: task id, if applicable
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardAllActivities&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DashboardAllActivities>>> GetWorkspaceAllActivitiesAsyncWithHttpInfo (int? workspaceId, int? since = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DashboardApi->GetWorkspaceAllActivities");

            var localVarPath = "/workspaces/{workspace_id}/dashboard/all_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceAllActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardAllActivities>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardAllActivities>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardAllActivities>)));
        }

        /// <summary>
        /// Get most active users Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsMostActiveUser&gt;</returns>
        public List<ModelsMostActiveUser> GetWorkspaceMostActive (int? workspaceId, int? since = null)
        {
             ApiResponse<List<ModelsMostActiveUser>> localVarResponse = GetWorkspaceMostActiveWithHttpInfo(workspaceId, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get most active users Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsMostActiveUser&gt;</returns>
        public ApiResponse< List<ModelsMostActiveUser> > GetWorkspaceMostActiveWithHttpInfo (int? workspaceId, int? since = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DashboardApi->GetWorkspaceMostActive");

            var localVarPath = "/workspaces/{workspace_id}/dashboard/most_active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceMostActive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsMostActiveUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsMostActiveUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsMostActiveUser>)));
        }

        /// <summary>
        /// Get most active users Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsMostActiveUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsMostActiveUser>> GetWorkspaceMostActiveAsync (int? workspaceId, int? since = null)
        {
             ApiResponse<List<ModelsMostActiveUser>> localVarResponse = await GetWorkspaceMostActiveAsyncWithHttpInfo(workspaceId, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get most active users Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. The most active user object holds the data of the top 5 users who have tracked the most time during last 7 days. Most active user object has the following properties * user_id: user ID * duration: Sum of time entry durations that have been created during last 7 days.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsMostActiveUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsMostActiveUser>>> GetWorkspaceMostActiveAsyncWithHttpInfo (int? workspaceId, int? since = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DashboardApi->GetWorkspaceMostActive");

            var localVarPath = "/workspaces/{workspace_id}/dashboard/most_active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceMostActive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsMostActiveUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsMostActiveUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsMostActiveUser>)));
        }

        /// <summary>
        /// Get top activities Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;DashboardAllActivities&gt;</returns>
        public List<DashboardAllActivities> GetWorkspaceTopActivity (int? workspaceId, int? since = null)
        {
             ApiResponse<List<DashboardAllActivities>> localVarResponse = GetWorkspaceTopActivityWithHttpInfo(workspaceId, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get top activities Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardAllActivities&gt;</returns>
        public ApiResponse< List<DashboardAllActivities> > GetWorkspaceTopActivityWithHttpInfo (int? workspaceId, int? since = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DashboardApi->GetWorkspaceTopActivity");

            var localVarPath = "/workspaces/{workspace_id}/dashboard/top_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTopActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardAllActivities>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardAllActivities>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardAllActivities>)));
        }

        /// <summary>
        /// Get top activities Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;DashboardAllActivities&gt;</returns>
        public async System.Threading.Tasks.Task<List<DashboardAllActivities>> GetWorkspaceTopActivityAsync (int? workspaceId, int? since = null)
        {
             ApiResponse<List<DashboardAllActivities>> localVarResponse = await GetWorkspaceTopActivityAsyncWithHttpInfo(workspaceId, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get top activities Dashboard&#39;s main purpose is to give an overview of what users in the workspace are doing and have been doing. Return objects are same as with the &#x60;/workspaces/{workspace_id}/dashboard/all_activity&#x60; request.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Numeric ID of the workspace</param>
        /// <param name="since">Filter activities since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardAllActivities&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DashboardAllActivities>>> GetWorkspaceTopActivityAsyncWithHttpInfo (int? workspaceId, int? since = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DashboardApi->GetWorkspaceTopActivity");

            var localVarPath = "/workspaces/{workspace_id}/dashboard/top_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaceTopActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardAllActivities>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardAllActivities>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardAllActivities>)));
        }

    }
}
