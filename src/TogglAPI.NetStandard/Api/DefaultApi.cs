/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Load comparative report
        /// </summary>
        /// <remarks>
        /// Returns comparative report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>ComparativeReport</returns>
        ComparativeReport ReportsApiV3WorkspaceWorkspaceIdComparativePost (int? workspaceId, ComparativeComparativePost comparativePost = null);

        /// <summary>
        /// Load comparative report
        /// </summary>
        /// <remarks>
        /// Returns comparative report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>ApiResponse of ComparativeReport</returns>
        ApiResponse<ComparativeReport> ReportsApiV3WorkspaceWorkspaceIdComparativePostWithHttpInfo (int? workspaceId, ComparativeComparativePost comparativePost = null);
        /// <summary>
        /// Load clients&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns the clients&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>ClientsDataTrendsReport</returns>
        ClientsDataTrendsReport ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost (int? workspaceId, BaseDataTrendsPost dataTrendsPost);

        /// <summary>
        /// Load clients&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns the clients&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>ApiResponse of ClientsDataTrendsReport</returns>
        ApiResponse<ClientsDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost);
        /// <summary>
        /// Load projects&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns projects&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>ProjectsDataTrendsReport</returns>
        ProjectsDataTrendsReport ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPost (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null);

        /// <summary>
        /// Load projects&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns projects&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>ApiResponse of ProjectsDataTrendsReport</returns>
        ApiResponse<ProjectsDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null);
        /// <summary>
        /// Load users&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns users&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>UsersDataTrendsReport</returns>
        UsersDataTrendsReport ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost (int? workspaceId, BaseDataTrendsPost dataTrendsPost);

        /// <summary>
        /// Load users&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns users&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>ApiResponse of UsersDataTrendsReport</returns>
        ApiResponse<UsersDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost);
        /// <summary>
        /// Load profitability projects report
        /// </summary>
        /// <remarks>
        /// Returns profitability projects report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>ProjectsReport</returns>
        ProjectsReport ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPost (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null);

        /// <summary>
        /// Load profitability projects report
        /// </summary>
        /// <remarks>
        /// Returns profitability projects report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>ApiResponse of ProjectsReport</returns>
        ApiResponse<ProjectsReport> ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostWithHttpInfo (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Load comparative report
        /// </summary>
        /// <remarks>
        /// Returns comparative report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>Task of ComparativeReport</returns>
        System.Threading.Tasks.Task<ComparativeReport> ReportsApiV3WorkspaceWorkspaceIdComparativePostAsync (int? workspaceId, ComparativeComparativePost comparativePost = null);

        /// <summary>
        /// Load comparative report
        /// </summary>
        /// <remarks>
        /// Returns comparative report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>Task of ApiResponse (ComparativeReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComparativeReport>> ReportsApiV3WorkspaceWorkspaceIdComparativePostAsyncWithHttpInfo (int? workspaceId, ComparativeComparativePost comparativePost = null);
        /// <summary>
        /// Load clients&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns the clients&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of ClientsDataTrendsReport</returns>
        System.Threading.Tasks.Task<ClientsDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostAsync (int? workspaceId, BaseDataTrendsPost dataTrendsPost);

        /// <summary>
        /// Load clients&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns the clients&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of ApiResponse (ClientsDataTrendsReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientsDataTrendsReport>> ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostAsyncWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost);
        /// <summary>
        /// Load projects&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns projects&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>Task of ProjectsDataTrendsReport</returns>
        System.Threading.Tasks.Task<ProjectsDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostAsync (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null);

        /// <summary>
        /// Load projects&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns projects&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDataTrendsReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsDataTrendsReport>> ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostAsyncWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null);
        /// <summary>
        /// Load users&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns users&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of UsersDataTrendsReport</returns>
        System.Threading.Tasks.Task<UsersDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostAsync (int? workspaceId, BaseDataTrendsPost dataTrendsPost);

        /// <summary>
        /// Load users&#39; data trends
        /// </summary>
        /// <remarks>
        /// Returns users&#39; data trends.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of ApiResponse (UsersDataTrendsReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersDataTrendsReport>> ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostAsyncWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost);
        /// <summary>
        /// Load profitability projects report
        /// </summary>
        /// <remarks>
        /// Returns profitability projects report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>Task of ProjectsReport</returns>
        System.Threading.Tasks.Task<ProjectsReport> ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostAsync (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null);

        /// <summary>
        /// Load profitability projects report
        /// </summary>
        /// <remarks>
        /// Returns profitability projects report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsReport>> ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostAsyncWithHttpInfo (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Load comparative report Returns comparative report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>ComparativeReport</returns>
        public ComparativeReport ReportsApiV3WorkspaceWorkspaceIdComparativePost (int? workspaceId, ComparativeComparativePost comparativePost = null)
        {
             ApiResponse<ComparativeReport> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdComparativePostWithHttpInfo(workspaceId, comparativePost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load comparative report Returns comparative report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>ApiResponse of ComparativeReport</returns>
        public ApiResponse< ComparativeReport > ReportsApiV3WorkspaceWorkspaceIdComparativePostWithHttpInfo (int? workspaceId, ComparativeComparativePost comparativePost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdComparativePost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/comparative";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (comparativePost != null && comparativePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(comparativePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comparativePost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdComparativePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComparativeReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComparativeReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComparativeReport)));
        }

        /// <summary>
        /// Load comparative report Returns comparative report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>Task of ComparativeReport</returns>
        public async System.Threading.Tasks.Task<ComparativeReport> ReportsApiV3WorkspaceWorkspaceIdComparativePostAsync (int? workspaceId, ComparativeComparativePost comparativePost = null)
        {
             ApiResponse<ComparativeReport> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdComparativePostAsyncWithHttpInfo(workspaceId, comparativePost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load comparative report Returns comparative report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="comparativePost">Comparative reports conditions (optional)</param>
        /// <returns>Task of ApiResponse (ComparativeReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComparativeReport>> ReportsApiV3WorkspaceWorkspaceIdComparativePostAsyncWithHttpInfo (int? workspaceId, ComparativeComparativePost comparativePost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdComparativePost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/comparative";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (comparativePost != null && comparativePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(comparativePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comparativePost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdComparativePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComparativeReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComparativeReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComparativeReport)));
        }

        /// <summary>
        /// Load clients&#39; data trends Returns the clients&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>ClientsDataTrendsReport</returns>
        public ClientsDataTrendsReport ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
             ApiResponse<ClientsDataTrendsReport> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostWithHttpInfo(workspaceId, dataTrendsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load clients&#39; data trends Returns the clients&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>ApiResponse of ClientsDataTrendsReport</returns>
        public ApiResponse< ClientsDataTrendsReport > ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost");
            // verify the required parameter 'dataTrendsPost' is set
            if (dataTrendsPost == null)
                throw new ApiException(400, "Missing required parameter 'dataTrendsPost' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/data_trends/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (dataTrendsPost != null && dataTrendsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataTrendsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataTrendsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientsDataTrendsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientsDataTrendsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientsDataTrendsReport)));
        }

        /// <summary>
        /// Load clients&#39; data trends Returns the clients&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of ClientsDataTrendsReport</returns>
        public async System.Threading.Tasks.Task<ClientsDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostAsync (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
             ApiResponse<ClientsDataTrendsReport> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostAsyncWithHttpInfo(workspaceId, dataTrendsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load clients&#39; data trends Returns the clients&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of ApiResponse (ClientsDataTrendsReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientsDataTrendsReport>> ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPostAsyncWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost");
            // verify the required parameter 'dataTrendsPost' is set
            if (dataTrendsPost == null)
                throw new ApiException(400, "Missing required parameter 'dataTrendsPost' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/data_trends/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (dataTrendsPost != null && dataTrendsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataTrendsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataTrendsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdDataTrendsClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientsDataTrendsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientsDataTrendsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientsDataTrendsReport)));
        }

        /// <summary>
        /// Load projects&#39; data trends Returns projects&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>ProjectsDataTrendsReport</returns>
        public ProjectsDataTrendsReport ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPost (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null)
        {
             ApiResponse<ProjectsDataTrendsReport> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostWithHttpInfo(workspaceId, dataTrendsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load projects&#39; data trends Returns projects&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>ApiResponse of ProjectsDataTrendsReport</returns>
        public ApiResponse< ProjectsDataTrendsReport > ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/data_trends/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (dataTrendsPost != null && dataTrendsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataTrendsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataTrendsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDataTrendsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDataTrendsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDataTrendsReport)));
        }

        /// <summary>
        /// Load projects&#39; data trends Returns projects&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>Task of ProjectsDataTrendsReport</returns>
        public async System.Threading.Tasks.Task<ProjectsDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostAsync (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null)
        {
             ApiResponse<ProjectsDataTrendsReport> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostAsyncWithHttpInfo(workspaceId, dataTrendsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load projects&#39; data trends Returns projects&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Data trends conditions (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDataTrendsReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsDataTrendsReport>> ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPostAsyncWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/data_trends/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (dataTrendsPost != null && dataTrendsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataTrendsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataTrendsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdDataTrendsProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDataTrendsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDataTrendsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDataTrendsReport)));
        }

        /// <summary>
        /// Load users&#39; data trends Returns users&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>UsersDataTrendsReport</returns>
        public UsersDataTrendsReport ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
             ApiResponse<UsersDataTrendsReport> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostWithHttpInfo(workspaceId, dataTrendsPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load users&#39; data trends Returns users&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>ApiResponse of UsersDataTrendsReport</returns>
        public ApiResponse< UsersDataTrendsReport > ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost");
            // verify the required parameter 'dataTrendsPost' is set
            if (dataTrendsPost == null)
                throw new ApiException(400, "Missing required parameter 'dataTrendsPost' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/data_trends/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (dataTrendsPost != null && dataTrendsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataTrendsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataTrendsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDataTrendsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersDataTrendsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersDataTrendsReport)));
        }

        /// <summary>
        /// Load users&#39; data trends Returns users&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of UsersDataTrendsReport</returns>
        public async System.Threading.Tasks.Task<UsersDataTrendsReport> ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostAsync (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
             ApiResponse<UsersDataTrendsReport> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostAsyncWithHttpInfo(workspaceId, dataTrendsPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load users&#39; data trends Returns users&#39; data trends.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="dataTrendsPost">Report data trends conditions</param>
        /// <returns>Task of ApiResponse (UsersDataTrendsReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersDataTrendsReport>> ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPostAsyncWithHttpInfo (int? workspaceId, BaseDataTrendsPost dataTrendsPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost");
            // verify the required parameter 'dataTrendsPost' is set
            if (dataTrendsPost == null)
                throw new ApiException(400, "Missing required parameter 'dataTrendsPost' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/data_trends/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (dataTrendsPost != null && dataTrendsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataTrendsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataTrendsPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdDataTrendsUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDataTrendsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersDataTrendsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersDataTrendsReport)));
        }

        /// <summary>
        /// Load profitability projects report Returns profitability projects report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>ProjectsReport</returns>
        public ProjectsReport ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPost (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null)
        {
             ApiResponse<ProjectsReport> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostWithHttpInfo(workspaceId, projectProfitabilityPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load profitability projects report Returns profitability projects report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>ApiResponse of ProjectsReport</returns>
        public ApiResponse< ProjectsReport > ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostWithHttpInfo (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/profitability/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectProfitabilityPost != null && projectProfitabilityPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectProfitabilityPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectProfitabilityPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsReport)));
        }

        /// <summary>
        /// Load profitability projects report Returns profitability projects report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>Task of ProjectsReport</returns>
        public async System.Threading.Tasks.Task<ProjectsReport> ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostAsync (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null)
        {
             ApiResponse<ProjectsReport> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostAsyncWithHttpInfo(workspaceId, projectProfitabilityPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load profitability projects report Returns profitability projects report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectProfitabilityPost">Profitability projects report conditions (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsReport>> ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPostAsyncWithHttpInfo (int? workspaceId, RequestsProjectProfitability projectProfitabilityPost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling DefaultApi->ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/profitability/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectProfitabilityPost != null && projectProfitabilityPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectProfitabilityPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectProfitabilityPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdProfitabilityProjectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsReport)));
        }

    }
}
