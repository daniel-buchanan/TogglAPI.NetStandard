/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeeklyReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost (int? workspaceId, WeeklyExportPost weeklyExportPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost);
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);
        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for weekly report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost (int? workspaceId, BasePost post);

        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for weekly report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostWithHttpInfo (int? workspaceId, BasePost post);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsync (int? workspaceId, WeeklyExportPost weeklyExportPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in csv format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost);
        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsync (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);

        /// <summary>
        /// Export weekly report
        /// </summary>
        /// <remarks>
        /// Downloads weekly report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost);
        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for weekly report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostAsync (int? workspaceId, BasePost post);

        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for weekly report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostAsyncWithHttpInfo (int? workspaceId, BasePost post);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WeeklyReportsApi : IWeeklyReportsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WeeklyReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WeeklyReportsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeeklyReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WeeklyReportsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostWithHttpInfo(workspaceId, weeklyExportPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");
            // verify the required parameter 'weeklyExportPost' is set
            if (weeklyExportPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPost' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPost != null && weeklyExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsync (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsyncWithHttpInfo(workspaceId, weeklyExportPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export weekly report Downloads weekly report in csv format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPost weeklyExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");
            // verify the required parameter 'weeklyExportPost' is set
            if (weeklyExportPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPost' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPost != null && weeklyExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesCsvPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostWithHttpInfo(workspaceId, weeklyExportPdfPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");
            // verify the required parameter 'weeklyExportPdfPost' is set
            if (weeklyExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPdfPost' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPdfPost != null && weeklyExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsync (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsyncWithHttpInfo(workspaceId, weeklyExportPdfPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export weekly report Downloads weekly report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="weeklyExportPdfPost">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, WeeklyExportPDFPost weeklyExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");
            // verify the required parameter 'weeklyExportPdfPost' is set
            if (weeklyExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'weeklyExportPdfPost' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (weeklyExportPdfPost != null && weeklyExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(weeklyExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = weeklyExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search time entries Returns time entries for weekly report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost (int? workspaceId, BasePost post)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostWithHttpInfo(workspaceId, post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search time entries Returns time entries for weekly report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostWithHttpInfo (int? workspaceId, BasePost post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search time entries Returns time entries for weekly report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostAsync (int? workspaceId, BasePost post)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostAsyncWithHttpInfo(workspaceId, post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search time entries Returns time entries for weekly report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="post">Weekly report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPostAsyncWithHttpInfo (int? workspaceId, BasePost post)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost");
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling WeeklyReportsApi->ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (post != null && post.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(post); // http body (model) parameter
            }
            else
            {
                localVarPostBody = post; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdWeeklyTimeEntriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
