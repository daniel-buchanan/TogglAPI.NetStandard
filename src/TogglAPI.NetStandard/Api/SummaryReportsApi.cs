/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISummaryReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Load project summary
        /// </summary>
        /// <remarks>
        /// Returns project&#39;s summary.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>TotalsReportData</returns>
        TotalsReportData ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost (int? workspaceId, int? projectId, BaseRangePost rangePost = null);

        /// <summary>
        /// Load project summary
        /// </summary>
        /// <remarks>
        /// Returns project&#39;s summary.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>ApiResponse of TotalsReportData</returns>
        ApiResponse<TotalsReportData> ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostWithHttpInfo (int? workspaceId, int? projectId, BaseRangePost rangePost = null);
        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns summary user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>List&lt;UsersProjectUsersSummaryRow&gt;</returns>
        List<UsersProjectUsersSummaryRow> ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost (int? workspaceId, DtoProjectUsersRequest projectUsersInput);

        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns summary user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>ApiResponse of List&lt;UsersProjectUsersSummaryRow&gt;</returns>
        ApiResponse<List<UsersProjectUsersSummaryRow>> ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostWithHttpInfo (int? workspaceId, DtoProjectUsersRequest projectUsersInput);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost (int? workspaceId, string extension, SummaryExportPost summaryExportPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);
        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for summary report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>string</returns>
        string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost (int? workspaceId, SummaryReportPost summaryPost);

        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for summary report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostWithHttpInfo (int? workspaceId, SummaryReportPost summaryPost);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Load project summary
        /// </summary>
        /// <remarks>
        /// Returns project&#39;s summary.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>Task of TotalsReportData</returns>
        System.Threading.Tasks.Task<TotalsReportData> ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostAsync (int? workspaceId, int? projectId, BaseRangePost rangePost = null);

        /// <summary>
        /// Load project summary
        /// </summary>
        /// <remarks>
        /// Returns project&#39;s summary.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>Task of ApiResponse (TotalsReportData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotalsReportData>> ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostAsyncWithHttpInfo (int? workspaceId, int? projectId, BaseRangePost rangePost = null);
        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns summary user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>Task of List&lt;UsersProjectUsersSummaryRow&gt;</returns>
        System.Threading.Tasks.Task<List<UsersProjectUsersSummaryRow>> ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostAsync (int? workspaceId, DtoProjectUsersRequest projectUsersInput);

        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>
        /// Returns summary user projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>Task of ApiResponse (List&lt;UsersProjectUsersSummaryRow&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UsersProjectUsersSummaryRow>>> ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostAsyncWithHttpInfo (int? workspaceId, DtoProjectUsersRequest projectUsersInput);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsync (int? workspaceId, string extension, SummaryExportPost summaryExportPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost);
        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsync (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);

        /// <summary>
        /// Export summary report
        /// </summary>
        /// <remarks>
        /// Downloads summary report in pdf format.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost);
        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for summary report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostAsync (int? workspaceId, SummaryReportPost summaryPost);

        /// <summary>
        /// Search time entries
        /// </summary>
        /// <remarks>
        /// Returns time entries for summary report according to the given filters.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostAsyncWithHttpInfo (int? workspaceId, SummaryReportPost summaryPost);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SummaryReportsApi : ISummaryReportsApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SummaryReportsApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SummaryReportsApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Load project summary Returns project&#39;s summary.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>TotalsReportData</returns>
        public TotalsReportData ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost (int? workspaceId, int? projectId, BaseRangePost rangePost = null)
        {
             ApiResponse<TotalsReportData> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostWithHttpInfo(workspaceId, projectId, rangePost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Load project summary Returns project&#39;s summary.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>ApiResponse of TotalsReportData</returns>
        public ApiResponse< TotalsReportData > ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostWithHttpInfo (int? workspaceId, int? projectId, BaseRangePost rangePost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/projects/{project_id}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (rangePost != null && rangePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rangePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangePost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TotalsReportData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TotalsReportData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TotalsReportData)));
        }

        /// <summary>
        /// Load project summary Returns project&#39;s summary.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>Task of TotalsReportData</returns>
        public async System.Threading.Tasks.Task<TotalsReportData> ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostAsync (int? workspaceId, int? projectId, BaseRangePost rangePost = null)
        {
             ApiResponse<TotalsReportData> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostAsyncWithHttpInfo(workspaceId, projectId, rangePost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Load project summary Returns project&#39;s summary.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectId">Project ID</param>
        /// <param name="rangePost">Date range conditions (optional)</param>
        /// <returns>Task of ApiResponse (TotalsReportData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TotalsReportData>> ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPostAsyncWithHttpInfo (int? workspaceId, int? projectId, BaseRangePost rangePost = null)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/projects/{project_id}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (rangePost != null && rangePost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rangePost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangePost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdProjectsProjectIdSummaryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TotalsReportData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TotalsReportData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TotalsReportData)));
        }

        /// <summary>
        /// List project users Returns summary user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>List&lt;UsersProjectUsersSummaryRow&gt;</returns>
        public List<UsersProjectUsersSummaryRow> ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost (int? workspaceId, DtoProjectUsersRequest projectUsersInput)
        {
             ApiResponse<List<UsersProjectUsersSummaryRow>> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostWithHttpInfo(workspaceId, projectUsersInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List project users Returns summary user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>ApiResponse of List&lt;UsersProjectUsersSummaryRow&gt;</returns>
        public ApiResponse< List<UsersProjectUsersSummaryRow> > ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostWithHttpInfo (int? workspaceId, DtoProjectUsersRequest projectUsersInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost");
            // verify the required parameter 'projectUsersInput' is set
            if (projectUsersInput == null)
                throw new ApiException(400, "Missing required parameter 'projectUsersInput' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/projects/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUsersInput != null && projectUsersInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUsersInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUsersInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UsersProjectUsersSummaryRow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UsersProjectUsersSummaryRow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UsersProjectUsersSummaryRow>)));
        }

        /// <summary>
        /// List project users Returns summary user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>Task of List&lt;UsersProjectUsersSummaryRow&gt;</returns>
        public async System.Threading.Tasks.Task<List<UsersProjectUsersSummaryRow>> ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostAsync (int? workspaceId, DtoProjectUsersRequest projectUsersInput)
        {
             ApiResponse<List<UsersProjectUsersSummaryRow>> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostAsyncWithHttpInfo(workspaceId, projectUsersInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List project users Returns summary user projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="projectUsersInput">User projects summary input filter</param>
        /// <returns>Task of ApiResponse (List&lt;UsersProjectUsersSummaryRow&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UsersProjectUsersSummaryRow>>> ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPostAsyncWithHttpInfo (int? workspaceId, DtoProjectUsersRequest projectUsersInput)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost");
            // verify the required parameter 'projectUsersInput' is set
            if (projectUsersInput == null)
                throw new ApiException(400, "Missing required parameter 'projectUsersInput' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/projects/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (projectUsersInput != null && projectUsersInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUsersInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUsersInput; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdProjectsSummaryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UsersProjectUsersSummaryRow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UsersProjectUsersSummaryRow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UsersProjectUsersSummaryRow>)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostWithHttpInfo(workspaceId, extension, summaryExportPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'summaryExportPost' is set
            if (summaryExportPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPost' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (summaryExportPost != null && summaryExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPost; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsync (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsyncWithHttpInfo(workspaceId, extension, summaryExportPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export summary report Downloads summary report in the specified in the specified format: csv or xlsx.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="extension">csv,xlsx</param>
        /// <param name="summaryExportPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPostAsyncWithHttpInfo (int? workspaceId, string extension, SummaryExportPost summaryExportPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");
            // verify the required parameter 'summaryExportPost' is set
            if (summaryExportPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPost' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "text/xlsx"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter
            if (summaryExportPost != null && summaryExportPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPost; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesExtensionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostWithHttpInfo(workspaceId, summaryExportPdfPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");
            // verify the required parameter 'summaryExportPdfPost' is set
            if (summaryExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPdfPost' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (summaryExportPdfPost != null && summaryExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsync (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsyncWithHttpInfo(workspaceId, summaryExportPdfPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export summary report Downloads summary report in pdf format.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryExportPdfPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPostAsyncWithHttpInfo (int? workspaceId, SummaryExportPDFPost summaryExportPdfPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");
            // verify the required parameter 'summaryExportPdfPost' is set
            if (summaryExportPdfPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryExportPdfPost' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (summaryExportPdfPost != null && summaryExportPdfPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryExportPdfPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryExportPdfPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPdfPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search time entries Returns time entries for summary report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>string</returns>
        public string ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost (int? workspaceId, SummaryReportPost summaryPost)
        {
             ApiResponse<string> localVarResponse = ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostWithHttpInfo(workspaceId, summaryPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search time entries Returns time entries for summary report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostWithHttpInfo (int? workspaceId, SummaryReportPost summaryPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost");
            // verify the required parameter 'summaryPost' is set
            if (summaryPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryPost' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (summaryPost != null && summaryPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search time entries Returns time entries for summary report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostAsync (int? workspaceId, SummaryReportPost summaryPost)
        {
             ApiResponse<string> localVarResponse = await ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostAsyncWithHttpInfo(workspaceId, summaryPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search time entries Returns time entries for summary report according to the given filters.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceId">Workspace ID</param>
        /// <param name="summaryPost">Summary report conditions</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPostAsyncWithHttpInfo (int? workspaceId, SummaryReportPost summaryPost)
        {
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost");
            // verify the required parameter 'summaryPost' is set
            if (summaryPost == null)
                throw new ApiException(400, "Missing required parameter 'summaryPost' when calling SummaryReportsApi->ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost");

            var localVarPath = "/reports/api/v3/workspace/{workspace_id}/summary/time_entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceId != null) localVarPathParams.Add("workspace_id", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (summaryPost != null && summaryPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(summaryPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = summaryPost; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsApiV3WorkspaceWorkspaceIdSummaryTimeEntriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
