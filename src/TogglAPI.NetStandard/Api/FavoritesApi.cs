/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a favorite
        /// </summary>
        /// <remarks>
        /// This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ModelsFavorite</returns>
        ModelsFavorite CreateFavorite (HandlerfavoritesPayload favorite, bool? meta = null);

        /// <summary>
        /// Create a favorite
        /// </summary>
        /// <remarks>
        /// This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of ModelsFavorite</returns>
        ApiResponse<ModelsFavorite> CreateFavoriteWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null);
        /// <summary>
        /// Deletes a given favorite
        /// </summary>
        /// <remarks>
        /// Deletes a given favorite logically from database, as well as its tags.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteFavorite ();

        /// <summary>
        /// Deletes a given favorite
        /// </summary>
        /// <remarks>
        /// Deletes a given favorite logically from database, as well as its tags.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFavoriteWithHttpInfo ();
        /// <summary>
        /// Get a list of favorites
        /// </summary>
        /// <remarks>
        /// Gets all favorites for the requesting user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsFavorite&gt;</returns>
        List<ModelsFavorite> GetFavorites (int? since = null);

        /// <summary>
        /// Get a list of favorites
        /// </summary>
        /// <remarks>
        /// Gets all favorites for the requesting user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsFavorite&gt;</returns>
        ApiResponse<List<ModelsFavorite>> GetFavoritesWithHttpInfo (int? since = null);
        /// <summary>
        /// Generates and returns a list of suggested favorites.
        /// </summary>
        /// <remarks>
        /// It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsFavorite&gt;</returns>
        List<ModelsFavorite> PostFavoritesSuggestions ();

        /// <summary>
        /// Generates and returns a list of suggested favorites.
        /// </summary>
        /// <remarks>
        /// It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsFavorite&gt;</returns>
        ApiResponse<List<ModelsFavorite>> PostFavoritesSuggestionsWithHttpInfo ();
        /// <summary>
        /// Update an array of favorites
        /// </summary>
        /// <remarks>
        /// This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ModelsFavorite</returns>
        ModelsFavorite UpdateFavorite (HandlerfavoritesPayload favorite, bool? meta = null);

        /// <summary>
        /// Update an array of favorites
        /// </summary>
        /// <remarks>
        /// This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of ModelsFavorite</returns>
        ApiResponse<ModelsFavorite> UpdateFavoriteWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a favorite
        /// </summary>
        /// <remarks>
        /// This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ModelsFavorite</returns>
        System.Threading.Tasks.Task<ModelsFavorite> CreateFavoriteAsync (HandlerfavoritesPayload favorite, bool? meta = null);

        /// <summary>
        /// Create a favorite
        /// </summary>
        /// <remarks>
        /// This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (ModelsFavorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsFavorite>> CreateFavoriteAsyncWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null);
        /// <summary>
        /// Deletes a given favorite
        /// </summary>
        /// <remarks>
        /// Deletes a given favorite logically from database, as well as its tags.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFavoriteAsync ();

        /// <summary>
        /// Deletes a given favorite
        /// </summary>
        /// <remarks>
        /// Deletes a given favorite logically from database, as well as its tags.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFavoriteAsyncWithHttpInfo ();
        /// <summary>
        /// Get a list of favorites
        /// </summary>
        /// <remarks>
        /// Gets all favorites for the requesting user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsFavorite&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsFavorite>> GetFavoritesAsync (int? since = null);

        /// <summary>
        /// Get a list of favorites
        /// </summary>
        /// <remarks>
        /// Gets all favorites for the requesting user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsFavorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsFavorite>>> GetFavoritesAsyncWithHttpInfo (int? since = null);
        /// <summary>
        /// Generates and returns a list of suggested favorites.
        /// </summary>
        /// <remarks>
        /// It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsFavorite&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsFavorite>> PostFavoritesSuggestionsAsync ();

        /// <summary>
        /// Generates and returns a list of suggested favorites.
        /// </summary>
        /// <remarks>
        /// It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsFavorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsFavorite>>> PostFavoritesSuggestionsAsyncWithHttpInfo ();
        /// <summary>
        /// Update an array of favorites
        /// </summary>
        /// <remarks>
        /// This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ModelsFavorite</returns>
        System.Threading.Tasks.Task<ModelsFavorite> UpdateFavoriteAsync (HandlerfavoritesPayload favorite, bool? meta = null);

        /// <summary>
        /// Update an array of favorites
        /// </summary>
        /// <remarks>
        /// This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (ModelsFavorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsFavorite>> UpdateFavoriteAsyncWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FavoritesApi : IFavoritesApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FavoritesApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FavoritesApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a favorite This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ModelsFavorite</returns>
        public ModelsFavorite CreateFavorite (HandlerfavoritesPayload favorite, bool? meta = null)
        {
             ApiResponse<ModelsFavorite> localVarResponse = CreateFavoriteWithHttpInfo(favorite, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a favorite This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of ModelsFavorite</returns>
        public ApiResponse< ModelsFavorite > CreateFavoriteWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null)
        {
            // verify the required parameter 'favorite' is set
            if (favorite == null)
                throw new ApiException(400, "Missing required parameter 'favorite' when calling FavoritesApi->CreateFavorite");

            var localVarPath = "/me/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (favorite != null && favorite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(favorite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = favorite; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsFavorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsFavorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsFavorite)));
        }

        /// <summary>
        /// Create a favorite This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ModelsFavorite</returns>
        public async System.Threading.Tasks.Task<ModelsFavorite> CreateFavoriteAsync (HandlerfavoritesPayload favorite, bool? meta = null)
        {
             ApiResponse<ModelsFavorite> localVarResponse = await CreateFavoriteAsyncWithHttpInfo(favorite, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a favorite This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don&#39;t relate correctly between themselves the status returned will be 400.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (ModelsFavorite)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsFavorite>> CreateFavoriteAsyncWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null)
        {
            // verify the required parameter 'favorite' is set
            if (favorite == null)
                throw new ApiException(400, "Missing required parameter 'favorite' when calling FavoritesApi->CreateFavorite");

            var localVarPath = "/me/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (favorite != null && favorite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(favorite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = favorite; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsFavorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsFavorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsFavorite)));
        }

        /// <summary>
        /// Deletes a given favorite Deletes a given favorite logically from database, as well as its tags.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteFavorite ()
        {
             DeleteFavoriteWithHttpInfo();
        }

        /// <summary>
        /// Deletes a given favorite Deletes a given favorite logically from database, as well as its tags.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFavoriteWithHttpInfo ()
        {

            var localVarPath = "/me/favorites/{favorite_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a given favorite Deletes a given favorite logically from database, as well as its tags.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFavoriteAsync ()
        {
             await DeleteFavoriteAsyncWithHttpInfo();

        }

        /// <summary>
        /// Deletes a given favorite Deletes a given favorite logically from database, as well as its tags.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFavoriteAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/favorites/{favorite_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a list of favorites Gets all favorites for the requesting user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsFavorite&gt;</returns>
        public List<ModelsFavorite> GetFavorites (int? since = null)
        {
             ApiResponse<List<ModelsFavorite>> localVarResponse = GetFavoritesWithHttpInfo(since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of favorites Gets all favorites for the requesting user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsFavorite&gt;</returns>
        public ApiResponse< List<ModelsFavorite> > GetFavoritesWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsFavorite>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsFavorite>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsFavorite>)));
        }

        /// <summary>
        /// Get a list of favorites Gets all favorites for the requesting user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsFavorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsFavorite>> GetFavoritesAsync (int? since = null)
        {
             ApiResponse<List<ModelsFavorite>> localVarResponse = await GetFavoritesAsyncWithHttpInfo(since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of favorites Gets all favorites for the requesting user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve favorites created/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsFavorite&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsFavorite>>> GetFavoritesAsyncWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsFavorite>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsFavorite>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsFavorite>)));
        }

        /// <summary>
        /// Generates and returns a list of suggested favorites. It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsFavorite&gt;</returns>
        public List<ModelsFavorite> PostFavoritesSuggestions ()
        {
             ApiResponse<List<ModelsFavorite>> localVarResponse = PostFavoritesSuggestionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates and returns a list of suggested favorites. It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsFavorite&gt;</returns>
        public ApiResponse< List<ModelsFavorite> > PostFavoritesSuggestionsWithHttpInfo ()
        {

            var localVarPath = "/me/favorites/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFavoritesSuggestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsFavorite>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsFavorite>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsFavorite>)));
        }

        /// <summary>
        /// Generates and returns a list of suggested favorites. It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsFavorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsFavorite>> PostFavoritesSuggestionsAsync ()
        {
             ApiResponse<List<ModelsFavorite>> localVarResponse = await PostFavoritesSuggestionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates and returns a list of suggested favorites. It will create 3 favorites based on past user&#39;s TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won&#39;t be suggested favorites either.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsFavorite&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsFavorite>>> PostFavoritesSuggestionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/favorites/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFavoritesSuggestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsFavorite>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsFavorite>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsFavorite>)));
        }

        /// <summary>
        /// Update an array of favorites This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ModelsFavorite</returns>
        public ModelsFavorite UpdateFavorite (HandlerfavoritesPayload favorite, bool? meta = null)
        {
             ApiResponse<ModelsFavorite> localVarResponse = UpdateFavoriteWithHttpInfo(favorite, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an array of favorites This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of ModelsFavorite</returns>
        public ApiResponse< ModelsFavorite > UpdateFavoriteWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null)
        {
            // verify the required parameter 'favorite' is set
            if (favorite == null)
                throw new ApiException(400, "Missing required parameter 'favorite' when calling FavoritesApi->UpdateFavorite");

            var localVarPath = "/me/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (favorite != null && favorite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(favorite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = favorite; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsFavorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsFavorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsFavorite)));
        }

        /// <summary>
        /// Update an array of favorites This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ModelsFavorite</returns>
        public async System.Threading.Tasks.Task<ModelsFavorite> UpdateFavoriteAsync (HandlerfavoritesPayload favorite, bool? meta = null)
        {
             ApiResponse<ModelsFavorite> localVarResponse = await UpdateFavoriteAsyncWithHttpInfo(favorite, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an array of favorites This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favorite">Favorite details</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (ModelsFavorite)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsFavorite>> UpdateFavoriteAsyncWithHttpInfo (HandlerfavoritesPayload favorite, bool? meta = null)
        {
            // verify the required parameter 'favorite' is set
            if (favorite == null)
                throw new ApiException(400, "Missing required parameter 'favorite' when calling FavoritesApi->UpdateFavorite");

            var localVarPath = "/me/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (favorite != null && favorite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(favorite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = favorite; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsFavorite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsFavorite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsFavorite)));
        }

    }
}
