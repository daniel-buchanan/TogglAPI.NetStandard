/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Unregister Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>string</returns>
        string DeletePushServices (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe);

        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Unregister Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeletePushServicesWithHttpInfo (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe);
        /// <summary>
        /// Clients
        /// </summary>
        /// <remarks>
        /// Get Clients.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsClient&gt;</returns>
        List<ModelsClient> GetClients (int? since = null);

        /// <summary>
        /// Clients
        /// </summary>
        /// <remarks>
        /// Get Clients.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsClient&gt;</returns>
        ApiResponse<List<ModelsClient>> GetClientsWithHttpInfo (int? since = null);
        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Verifies the user request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>string</returns>
        string GetLostPassword (string tokenCode);

        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Verifies the user request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetLostPasswordWithHttpInfo (string tokenCode);
        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Returns details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>RelatedUserWithRelated</returns>
        RelatedUserWithRelated GetMe (bool? withRelatedData = null);

        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Returns details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>ApiResponse of RelatedUserWithRelated</returns>
        ApiResponse<RelatedUserWithRelated> GetMeWithHttpInfo (bool? withRelatedData = null);
        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Get features.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MeWorkspace&gt;</returns>
        List<MeWorkspace> GetMeFeatures ();

        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Get features.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MeWorkspace&gt;</returns>
        ApiResponse<List<MeWorkspace>> GetMeFeaturesWithHttpInfo ();
        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserFlags</returns>
        UserFlags GetMeFlags ();

        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserFlags</returns>
        ApiResponse<UserFlags> GetMeFlagsWithHttpInfo ();
        /// <summary>
        /// User&#39;s last known location
        /// </summary>
        /// <remarks>
        /// Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MeUserLocationResponse</returns>
        MeUserLocationResponse GetMeLocation ();

        /// <summary>
        /// User&#39;s last known location
        /// </summary>
        /// <remarks>
        /// Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MeUserLocationResponse</returns>
        ApiResponse<MeUserLocationResponse> GetMeLocationWithHttpInfo ();
        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Get notifications.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsUserNotification&gt;</returns>
        List<ModelsUserNotification> GetMeNotifications ();

        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Get notifications.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsUserNotification&gt;</returns>
        ApiResponse<List<ModelsUserNotification>> GetMeNotificationsWithHttpInfo ();
        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        List<ModelsProject> GetMeProjects (string includeArchived = null, int? since = null);

        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        ApiResponse<List<ModelsProject>> GetMeProjectsWithHttpInfo (string includeArchived = null, int? since = null);
        /// <summary>
        /// ProjectsPaginated
        /// </summary>
        /// <remarks>
        /// Get paginated projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        List<ModelsProject> GetMeProjectsPaginated (int? startProjectId = null, int? since = null, int? perPage = null);

        /// <summary>
        /// ProjectsPaginated
        /// </summary>
        /// <remarks>
        /// Get paginated projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        ApiResponse<List<ModelsProject>> GetMeProjectsPaginatedWithHttpInfo (int? startProjectId = null, int? since = null, int? perPage = null);
        /// <summary>
        /// User&#39;s Timesheets
        /// </summary>
        /// <remarks>
        /// Returns the timehseets for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsTimesheet&gt;</returns>
        List<ModelsTimesheet> GetMeTimesheets ();

        /// <summary>
        /// User&#39;s Timesheets
        /// </summary>
        /// <remarks>
        /// Returns the timehseets for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsTimesheet&gt;</returns>
        ApiResponse<List<ModelsTimesheet>> GetMeTimesheetsWithHttpInfo ();
        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsTrackReminder&gt;</returns>
        List<ModelsTrackReminder> GetMeTrackReminders ();

        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsTrackReminder&gt;</returns>
        ApiResponse<List<ModelsTrackReminder>> GetMeTrackRemindersWithHttpInfo ();
        /// <summary>
        /// Organizations that a user is part of
        /// </summary>
        /// <remarks>
        /// Get all organizations a given user is part of.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsMeOrganization&gt;</returns>
        List<ModelsMeOrganization> GetOrganizations ();

        /// <summary>
        /// Organizations that a user is part of
        /// </summary>
        /// <remarks>
        /// Get all organizations a given user is part of.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsMeOrganization&gt;</returns>
        ApiResponse<List<ModelsMeOrganization>> GetOrganizationsWithHttpInfo ();
        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Get list of firebase tokens registered for current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetPushServices ();

        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Get list of firebase tokens registered for current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetPushServicesWithHttpInfo ();
        /// <summary>
        /// Tags
        /// </summary>
        /// <remarks>
        /// Returns tags for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsTag&gt;</returns>
        List<ModelsTag> GetTags (int? since = null);

        /// <summary>
        /// Tags
        /// </summary>
        /// <remarks>
        /// Returns tags for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTag&gt;</returns>
        ApiResponse<List<ModelsTag>> GetTagsWithHttpInfo (int? since = null);
        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// Returns tasks from projects in which the user is participating.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>List&lt;ModelsTask&gt;</returns>
        List<ModelsTask> GetTasks (int? since = null, string includeNotActive = null, bool? meta = null);

        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// Returns tasks from projects in which the user is participating.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTask&gt;</returns>
        ApiResponse<List<ModelsTask>> GetTasksWithHttpInfo (int? since = null, string includeNotActive = null, bool? meta = null);
        /// <summary>
        /// WebTimer
        /// </summary>
        /// <remarks>
        /// Get web timer.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetWebTimer ();

        /// <summary>
        /// WebTimer
        /// </summary>
        /// <remarks>
        /// Get web timer.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWebTimerWithHttpInfo ();
        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        List<WorkspaceWithActiveProjectCount> GetWorkspaces (int? since = null);

        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        ApiResponse<List<WorkspaceWithActiveProjectCount>> GetWorkspacesWithHttpInfo (int? since = null);
        /// <summary>
        /// Logged
        /// </summary>
        /// <remarks>
        /// Used to check if authentication works.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void MeLoggedGet ();

        /// <summary>
        /// Logged
        /// </summary>
        /// <remarks>
        /// Used to check if authentication works.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MeLoggedGetWithHttpInfo ();
        /// <summary>
        /// CloseAccount
        /// </summary>
        /// <remarks>
        /// Close Account
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string PostCloseAccount ();

        /// <summary>
        /// CloseAccount
        /// </summary>
        /// <remarks>
        /// Close Account
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostCloseAccountWithHttpInfo ();
        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Handles the users request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>string</returns>
        string PostLostPassword (ModelsLostPassword postLostPassword);

        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Handles the users request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostLostPasswordWithHttpInfo (ModelsLostPassword postLostPassword);
        /// <summary>
        /// LostPassword conformation
        /// </summary>
        /// <remarks>
        /// Handles lost password request confirmation.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>string</returns>
        string PostLostPasswordConfirm (MeLostPasswordPayload postNewPassword);

        /// <summary>
        /// LostPassword conformation
        /// </summary>
        /// <remarks>
        /// Handles lost password request confirmation.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostLostPasswordConfirmWithHttpInfo (MeLostPasswordPayload postNewPassword);
        /// <summary>
        /// AcceptTOS
        /// </summary>
        /// <remarks>
        /// Accepts the last version of the Terms of Service for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string PostMeAcceptTos ();

        /// <summary>
        /// AcceptTOS
        /// </summary>
        /// <remarks>
        /// Accepts the last version of the Terms of Service for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostMeAcceptTosWithHttpInfo ();
        /// <summary>
        /// Disable product emails
        /// </summary>
        /// <remarks>
        /// Disable product emails.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>string</returns>
        string PostMeDisableProductEmails (string disableCode);

        /// <summary>
        /// Disable product emails
        /// </summary>
        /// <remarks>
        /// Disable product emails.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostMeDisableProductEmailsWithHttpInfo (string disableCode);
        /// <summary>
        /// Disable weekly report
        /// </summary>
        /// <remarks>
        /// Disable weekly report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>string</returns>
        string PostMeDisableWeeklyReport (string weeklyReportCode);

        /// <summary>
        /// Disable weekly report
        /// </summary>
        /// <remarks>
        /// Disable weekly report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostMeDisableWeeklyReportWithHttpInfo (string weeklyReportCode);
        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>UserFlags</returns>
        UserFlags PostMeFlags (UserFlags postFlags);

        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>ApiResponse of UserFlags</returns>
        ApiResponse<UserFlags> PostMeFlagsWithHttpInfo (UserFlags postFlags);
        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Register Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>string</returns>
        string PostPushServices (PushPostPushServicesSubscribe postPushServicesSubscribe);

        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Register Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostPushServicesWithHttpInfo (PushPostPushServicesSubscribe postPushServicesSubscribe);
        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Updates details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>ModelsTogglUser</returns>
        ModelsTogglUser PutMe (MePayload payload);

        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Updates details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>ApiResponse of ModelsTogglUser</returns>
        ApiResponse<ModelsTogglUser> PutMeWithHttpInfo (MePayload payload);
        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Mark notification seen.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>string</returns>
        string PutNotifications (int? notificationId);

        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Mark notification seen.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutNotificationsWithHttpInfo (int? notificationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Unregister Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeletePushServicesAsync (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe);

        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Unregister Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeletePushServicesAsyncWithHttpInfo (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe);
        /// <summary>
        /// Clients
        /// </summary>
        /// <remarks>
        /// Get Clients.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsClient&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsClient>> GetClientsAsync (int? since = null);

        /// <summary>
        /// Clients
        /// </summary>
        /// <remarks>
        /// Get Clients.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsClient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsClient>>> GetClientsAsyncWithHttpInfo (int? since = null);
        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Verifies the user request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetLostPasswordAsync (string tokenCode);

        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Verifies the user request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetLostPasswordAsyncWithHttpInfo (string tokenCode);
        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Returns details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>Task of RelatedUserWithRelated</returns>
        System.Threading.Tasks.Task<RelatedUserWithRelated> GetMeAsync (bool? withRelatedData = null);

        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Returns details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>Task of ApiResponse (RelatedUserWithRelated)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedUserWithRelated>> GetMeAsyncWithHttpInfo (bool? withRelatedData = null);
        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Get features.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MeWorkspace&gt;</returns>
        System.Threading.Tasks.Task<List<MeWorkspace>> GetMeFeaturesAsync ();

        /// <summary>
        /// Features
        /// </summary>
        /// <remarks>
        /// Get features.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MeWorkspace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MeWorkspace>>> GetMeFeaturesAsyncWithHttpInfo ();
        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserFlags</returns>
        System.Threading.Tasks.Task<UserFlags> GetMeFlagsAsync ();

        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserFlags)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFlags>> GetMeFlagsAsyncWithHttpInfo ();
        /// <summary>
        /// User&#39;s last known location
        /// </summary>
        /// <remarks>
        /// Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MeUserLocationResponse</returns>
        System.Threading.Tasks.Task<MeUserLocationResponse> GetMeLocationAsync ();

        /// <summary>
        /// User&#39;s last known location
        /// </summary>
        /// <remarks>
        /// Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MeUserLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeUserLocationResponse>> GetMeLocationAsyncWithHttpInfo ();
        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Get notifications.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsUserNotification&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsUserNotification>> GetMeNotificationsAsync ();

        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Get notifications.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsUserNotification&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsUserNotification>>> GetMeNotificationsAsyncWithHttpInfo ();
        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsProject>> GetMeProjectsAsync (string includeArchived = null, int? since = null);

        /// <summary>
        /// Projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> GetMeProjectsAsyncWithHttpInfo (string includeArchived = null, int? since = null);
        /// <summary>
        /// ProjectsPaginated
        /// </summary>
        /// <remarks>
        /// Get paginated projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsProject>> GetMeProjectsPaginatedAsync (int? startProjectId = null, int? since = null, int? perPage = null);

        /// <summary>
        /// ProjectsPaginated
        /// </summary>
        /// <remarks>
        /// Get paginated projects.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> GetMeProjectsPaginatedAsyncWithHttpInfo (int? startProjectId = null, int? since = null, int? perPage = null);
        /// <summary>
        /// User&#39;s Timesheets
        /// </summary>
        /// <remarks>
        /// Returns the timehseets for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsTimesheet&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTimesheet>> GetMeTimesheetsAsync ();

        /// <summary>
        /// User&#39;s Timesheets
        /// </summary>
        /// <remarks>
        /// Returns the timehseets for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimesheet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTimesheet>>> GetMeTimesheetsAsyncWithHttpInfo ();
        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsTrackReminder&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTrackReminder>> GetMeTrackRemindersAsync ();

        /// <summary>
        /// TrackReminders
        /// </summary>
        /// <remarks>
        /// Returns a list of track reminders.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsTrackReminder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTrackReminder>>> GetMeTrackRemindersAsyncWithHttpInfo ();
        /// <summary>
        /// Organizations that a user is part of
        /// </summary>
        /// <remarks>
        /// Get all organizations a given user is part of.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsMeOrganization&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsMeOrganization>> GetOrganizationsAsync ();

        /// <summary>
        /// Organizations that a user is part of
        /// </summary>
        /// <remarks>
        /// Get all organizations a given user is part of.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsMeOrganization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsMeOrganization>>> GetOrganizationsAsyncWithHttpInfo ();
        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Get list of firebase tokens registered for current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetPushServicesAsync ();

        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Get list of firebase tokens registered for current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetPushServicesAsyncWithHttpInfo ();
        /// <summary>
        /// Tags
        /// </summary>
        /// <remarks>
        /// Returns tags for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsTag&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTag>> GetTagsAsync (int? since = null);

        /// <summary>
        /// Tags
        /// </summary>
        /// <remarks>
        /// Returns tags for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTag>>> GetTagsAsyncWithHttpInfo (int? since = null);
        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// Returns tasks from projects in which the user is participating.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of List&lt;ModelsTask&gt;</returns>
        System.Threading.Tasks.Task<List<ModelsTask>> GetTasksAsync (int? since = null, string includeNotActive = null, bool? meta = null);

        /// <summary>
        /// Tasks
        /// </summary>
        /// <remarks>
        /// Returns tasks from projects in which the user is participating.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTask&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelsTask>>> GetTasksAsyncWithHttpInfo (int? since = null, string includeNotActive = null, bool? meta = null);
        /// <summary>
        /// WebTimer
        /// </summary>
        /// <remarks>
        /// Get web timer.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWebTimerAsync ();

        /// <summary>
        /// WebTimer
        /// </summary>
        /// <remarks>
        /// Get web timer.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWebTimerAsyncWithHttpInfo ();
        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        System.Threading.Tasks.Task<List<WorkspaceWithActiveProjectCount>> GetWorkspacesAsync (int? since = null);

        /// <summary>
        /// Workspaces
        /// </summary>
        /// <remarks>
        /// Lists workspaces for given user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkspaceWithActiveProjectCount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkspaceWithActiveProjectCount>>> GetWorkspacesAsyncWithHttpInfo (int? since = null);
        /// <summary>
        /// Logged
        /// </summary>
        /// <remarks>
        /// Used to check if authentication works.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MeLoggedGetAsync ();

        /// <summary>
        /// Logged
        /// </summary>
        /// <remarks>
        /// Used to check if authentication works.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MeLoggedGetAsyncWithHttpInfo ();
        /// <summary>
        /// CloseAccount
        /// </summary>
        /// <remarks>
        /// Close Account
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostCloseAccountAsync ();

        /// <summary>
        /// CloseAccount
        /// </summary>
        /// <remarks>
        /// Close Account
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostCloseAccountAsyncWithHttpInfo ();
        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Handles the users request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostLostPasswordAsync (ModelsLostPassword postLostPassword);

        /// <summary>
        /// LostPassword
        /// </summary>
        /// <remarks>
        /// Handles the users request to reset the password.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostLostPasswordAsyncWithHttpInfo (ModelsLostPassword postLostPassword);
        /// <summary>
        /// LostPassword conformation
        /// </summary>
        /// <remarks>
        /// Handles lost password request confirmation.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostLostPasswordConfirmAsync (MeLostPasswordPayload postNewPassword);

        /// <summary>
        /// LostPassword conformation
        /// </summary>
        /// <remarks>
        /// Handles lost password request confirmation.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostLostPasswordConfirmAsyncWithHttpInfo (MeLostPasswordPayload postNewPassword);
        /// <summary>
        /// AcceptTOS
        /// </summary>
        /// <remarks>
        /// Accepts the last version of the Terms of Service for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostMeAcceptTosAsync ();

        /// <summary>
        /// AcceptTOS
        /// </summary>
        /// <remarks>
        /// Accepts the last version of the Terms of Service for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostMeAcceptTosAsyncWithHttpInfo ();
        /// <summary>
        /// Disable product emails
        /// </summary>
        /// <remarks>
        /// Disable product emails.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostMeDisableProductEmailsAsync (string disableCode);

        /// <summary>
        /// Disable product emails
        /// </summary>
        /// <remarks>
        /// Disable product emails.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostMeDisableProductEmailsAsyncWithHttpInfo (string disableCode);
        /// <summary>
        /// Disable weekly report
        /// </summary>
        /// <remarks>
        /// Disable weekly report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostMeDisableWeeklyReportAsync (string weeklyReportCode);

        /// <summary>
        /// Disable weekly report
        /// </summary>
        /// <remarks>
        /// Disable weekly report.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostMeDisableWeeklyReportAsyncWithHttpInfo (string weeklyReportCode);
        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>Task of UserFlags</returns>
        System.Threading.Tasks.Task<UserFlags> PostMeFlagsAsync (UserFlags postFlags);

        /// <summary>
        /// Flags
        /// </summary>
        /// <remarks>
        /// Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>Task of ApiResponse (UserFlags)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFlags>> PostMeFlagsAsyncWithHttpInfo (UserFlags postFlags);
        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Register Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostPushServicesAsync (PushPostPushServicesSubscribe postPushServicesSubscribe);

        /// <summary>
        /// PushServices
        /// </summary>
        /// <remarks>
        /// Register Firebase token for current user
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostPushServicesAsyncWithHttpInfo (PushPostPushServicesSubscribe postPushServicesSubscribe);
        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Updates details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>Task of ModelsTogglUser</returns>
        System.Threading.Tasks.Task<ModelsTogglUser> PutMeAsync (MePayload payload);

        /// <summary>
        /// Me
        /// </summary>
        /// <remarks>
        /// Updates details for the current user.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>Task of ApiResponse (ModelsTogglUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelsTogglUser>> PutMeAsyncWithHttpInfo (MePayload payload);
        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Mark notification seen.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutNotificationsAsync (int? notificationId);

        /// <summary>
        /// Notifications
        /// </summary>
        /// <remarks>
        /// Mark notification seen.
        /// </remarks>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutNotificationsAsyncWithHttpInfo (int? notificationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeApi : IMeApi
    {
        private TogglAPI.NetStandard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeApi(String basePath)
        {
            this.Configuration = new TogglAPI.NetStandard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeApi(TogglAPI.NetStandard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TogglAPI.NetStandard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TogglAPI.NetStandard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TogglAPI.NetStandard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TogglAPI.NetStandard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// PushServices Unregister Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>string</returns>
        public string DeletePushServices (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe)
        {
             ApiResponse<string> localVarResponse = DeletePushServicesWithHttpInfo(deletePushServicesUnsubscribe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PushServices Unregister Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeletePushServicesWithHttpInfo (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe)
        {
            // verify the required parameter 'deletePushServicesUnsubscribe' is set
            if (deletePushServicesUnsubscribe == null)
                throw new ApiException(400, "Missing required parameter 'deletePushServicesUnsubscribe' when calling MeApi->DeletePushServices");

            var localVarPath = "/me/push_services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deletePushServicesUnsubscribe != null && deletePushServicesUnsubscribe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deletePushServicesUnsubscribe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deletePushServicesUnsubscribe; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PushServices Unregister Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeletePushServicesAsync (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe)
        {
             ApiResponse<string> localVarResponse = await DeletePushServicesAsyncWithHttpInfo(deletePushServicesUnsubscribe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PushServices Unregister Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePushServicesUnsubscribe">FirebaseToken</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeletePushServicesAsyncWithHttpInfo (PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe)
        {
            // verify the required parameter 'deletePushServicesUnsubscribe' is set
            if (deletePushServicesUnsubscribe == null)
                throw new ApiException(400, "Missing required parameter 'deletePushServicesUnsubscribe' when calling MeApi->DeletePushServices");

            var localVarPath = "/me/push_services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deletePushServicesUnsubscribe != null && deletePushServicesUnsubscribe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deletePushServicesUnsubscribe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deletePushServicesUnsubscribe; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Clients Get Clients.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsClient&gt;</returns>
        public List<ModelsClient> GetClients (int? since = null)
        {
             ApiResponse<List<ModelsClient>> localVarResponse = GetClientsWithHttpInfo(since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clients Get Clients.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsClient&gt;</returns>
        public ApiResponse< List<ModelsClient> > GetClientsWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsClient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsClient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsClient>)));
        }

        /// <summary>
        /// Clients Get Clients.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsClient&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsClient>> GetClientsAsync (int? since = null)
        {
             ApiResponse<List<ModelsClient>> localVarResponse = await GetClientsAsyncWithHttpInfo(since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clients Get Clients.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve clients created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsClient&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsClient>>> GetClientsAsyncWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsClient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsClient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsClient>)));
        }

        /// <summary>
        /// LostPassword Verifies the user request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>string</returns>
        public string GetLostPassword (string tokenCode)
        {
             ApiResponse<string> localVarResponse = GetLostPasswordWithHttpInfo(tokenCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// LostPassword Verifies the user request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetLostPasswordWithHttpInfo (string tokenCode)
        {
            // verify the required parameter 'tokenCode' is set
            if (tokenCode == null)
                throw new ApiException(400, "Missing required parameter 'tokenCode' when calling MeApi->GetLostPassword");

            var localVarPath = "/me/lost_passwords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenCode != null && tokenCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenCode; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// LostPassword Verifies the user request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetLostPasswordAsync (string tokenCode)
        {
             ApiResponse<string> localVarResponse = await GetLostPasswordAsyncWithHttpInfo(tokenCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// LostPassword Verifies the user request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenCode">Token code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetLostPasswordAsyncWithHttpInfo (string tokenCode)
        {
            // verify the required parameter 'tokenCode' is set
            if (tokenCode == null)
                throw new ApiException(400, "Missing required parameter 'tokenCode' when calling MeApi->GetLostPassword");

            var localVarPath = "/me/lost_passwords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenCode != null && tokenCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenCode; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Me Returns details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>RelatedUserWithRelated</returns>
        public RelatedUserWithRelated GetMe (bool? withRelatedData = null)
        {
             ApiResponse<RelatedUserWithRelated> localVarResponse = GetMeWithHttpInfo(withRelatedData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Me Returns details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>ApiResponse of RelatedUserWithRelated</returns>
        public ApiResponse< RelatedUserWithRelated > GetMeWithHttpInfo (bool? withRelatedData = null)
        {

            var localVarPath = "/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withRelatedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_related_data", withRelatedData)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedUserWithRelated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedUserWithRelated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedUserWithRelated)));
        }

        /// <summary>
        /// Me Returns details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>Task of RelatedUserWithRelated</returns>
        public async System.Threading.Tasks.Task<RelatedUserWithRelated> GetMeAsync (bool? withRelatedData = null)
        {
             ApiResponse<RelatedUserWithRelated> localVarResponse = await GetMeAsyncWithHttpInfo(withRelatedData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Me Returns details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withRelatedData">Retrieve user related data (clients, projects, tasks, tags, workspaces, time entries, etc.) (optional)</param>
        /// <returns>Task of ApiResponse (RelatedUserWithRelated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedUserWithRelated>> GetMeAsyncWithHttpInfo (bool? withRelatedData = null)
        {

            var localVarPath = "/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withRelatedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_related_data", withRelatedData)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedUserWithRelated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedUserWithRelated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedUserWithRelated)));
        }

        /// <summary>
        /// Features Get features.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MeWorkspace&gt;</returns>
        public List<MeWorkspace> GetMeFeatures ()
        {
             ApiResponse<List<MeWorkspace>> localVarResponse = GetMeFeaturesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Features Get features.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MeWorkspace&gt;</returns>
        public ApiResponse< List<MeWorkspace> > GetMeFeaturesWithHttpInfo ()
        {

            var localVarPath = "/me/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MeWorkspace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MeWorkspace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MeWorkspace>)));
        }

        /// <summary>
        /// Features Get features.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MeWorkspace&gt;</returns>
        public async System.Threading.Tasks.Task<List<MeWorkspace>> GetMeFeaturesAsync ()
        {
             ApiResponse<List<MeWorkspace>> localVarResponse = await GetMeFeaturesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Features Get features.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MeWorkspace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MeWorkspace>>> GetMeFeaturesAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MeWorkspace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MeWorkspace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MeWorkspace>)));
        }

        /// <summary>
        /// Flags Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserFlags</returns>
        public UserFlags GetMeFlags ()
        {
             ApiResponse<UserFlags> localVarResponse = GetMeFlagsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Flags Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserFlags</returns>
        public ApiResponse< UserFlags > GetMeFlagsWithHttpInfo ()
        {

            var localVarPath = "/me/flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlags)));
        }

        /// <summary>
        /// Flags Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserFlags</returns>
        public async System.Threading.Tasks.Task<UserFlags> GetMeFlagsAsync ()
        {
             ApiResponse<UserFlags> localVarResponse = await GetMeFlagsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Flags Returns flags for the current user. They will be represented by an object with dynamic string keys, where the value can be of any type.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserFlags)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFlags>> GetMeFlagsAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlags)));
        }

        /// <summary>
        /// User&#39;s last known location Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MeUserLocationResponse</returns>
        public MeUserLocationResponse GetMeLocation ()
        {
             ApiResponse<MeUserLocationResponse> localVarResponse = GetMeLocationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s last known location Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MeUserLocationResponse</returns>
        public ApiResponse< MeUserLocationResponse > GetMeLocationWithHttpInfo ()
        {

            var localVarPath = "/me/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeUserLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MeUserLocationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeUserLocationResponse)));
        }

        /// <summary>
        /// User&#39;s last known location Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MeUserLocationResponse</returns>
        public async System.Threading.Tasks.Task<MeUserLocationResponse> GetMeLocationAsync ()
        {
             ApiResponse<MeUserLocationResponse> localVarResponse = await GetMeLocationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// User&#39;s last known location Returns the client&#39;s IP-based location. If no data is present, empty response will be yielded.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MeUserLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MeUserLocationResponse>> GetMeLocationAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MeUserLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MeUserLocationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MeUserLocationResponse)));
        }

        /// <summary>
        /// Notifications Get notifications.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsUserNotification&gt;</returns>
        public List<ModelsUserNotification> GetMeNotifications ()
        {
             ApiResponse<List<ModelsUserNotification>> localVarResponse = GetMeNotificationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Notifications Get notifications.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsUserNotification&gt;</returns>
        public ApiResponse< List<ModelsUserNotification> > GetMeNotificationsWithHttpInfo ()
        {

            var localVarPath = "/me/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsUserNotification>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsUserNotification>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsUserNotification>)));
        }

        /// <summary>
        /// Notifications Get notifications.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsUserNotification&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsUserNotification>> GetMeNotificationsAsync ()
        {
             ApiResponse<List<ModelsUserNotification>> localVarResponse = await GetMeNotificationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Notifications Get notifications.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsUserNotification&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsUserNotification>>> GetMeNotificationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsUserNotification>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsUserNotification>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsUserNotification>)));
        }

        /// <summary>
        /// Projects Get projects
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        public List<ModelsProject> GetMeProjects (string includeArchived = null, int? since = null)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = GetMeProjectsWithHttpInfo(includeArchived, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Projects Get projects
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        public ApiResponse< List<ModelsProject> > GetMeProjectsWithHttpInfo (string includeArchived = null, int? since = null)
        {

            var localVarPath = "/me/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeArchived != null) localVarFormParams.Add("include_archived", this.Configuration.ApiClient.ParameterToString(includeArchived)); // form parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// Projects Get projects
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsProject>> GetMeProjectsAsync (string includeArchived = null, int? since = null)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = await GetMeProjectsAsyncWithHttpInfo(includeArchived, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Projects Get projects
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeArchived">Include archived projects. (optional)</param>
        /// <param name="since">Retrieve projects modified since this date using UNIX timestamp, including deleted ones. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> GetMeProjectsAsyncWithHttpInfo (string includeArchived = null, int? since = null)
        {

            var localVarPath = "/me/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeArchived != null) localVarFormParams.Add("include_archived", this.Configuration.ApiClient.ParameterToString(includeArchived)); // form parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// ProjectsPaginated Get paginated projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>List&lt;ModelsProject&gt;</returns>
        public List<ModelsProject> GetMeProjectsPaginated (int? startProjectId = null, int? since = null, int? perPage = null)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = GetMeProjectsPaginatedWithHttpInfo(startProjectId, since, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ProjectsPaginated Get paginated projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsProject&gt;</returns>
        public ApiResponse< List<ModelsProject> > GetMeProjectsPaginatedWithHttpInfo (int? startProjectId = null, int? since = null, int? perPage = null)
        {

            var localVarPath = "/me/projects/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startProjectId != null) localVarFormParams.Add("start_project_id", this.Configuration.ApiClient.ParameterToString(startProjectId)); // form parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (perPage != null) localVarFormParams.Add("per_page", this.Configuration.ApiClient.ParameterToString(perPage)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeProjectsPaginated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// ProjectsPaginated Get paginated projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>Task of List&lt;ModelsProject&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsProject>> GetMeProjectsPaginatedAsync (int? startProjectId = null, int? since = null, int? perPage = null)
        {
             ApiResponse<List<ModelsProject>> localVarResponse = await GetMeProjectsPaginatedAsyncWithHttpInfo(startProjectId, since, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ProjectsPaginated Get paginated projects.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startProjectId">Project ID to resume the next pagination from. (optional)</param>
        /// <param name="since">Retrieve projects created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="perPage">Number of items per page, default 201. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsProject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsProject>>> GetMeProjectsPaginatedAsyncWithHttpInfo (int? startProjectId = null, int? since = null, int? perPage = null)
        {

            var localVarPath = "/me/projects/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startProjectId != null) localVarFormParams.Add("start_project_id", this.Configuration.ApiClient.ParameterToString(startProjectId)); // form parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (perPage != null) localVarFormParams.Add("per_page", this.Configuration.ApiClient.ParameterToString(perPage)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeProjectsPaginated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsProject>)));
        }

        /// <summary>
        /// User&#39;s Timesheets Returns the timehseets for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsTimesheet&gt;</returns>
        public List<ModelsTimesheet> GetMeTimesheets ()
        {
             ApiResponse<List<ModelsTimesheet>> localVarResponse = GetMeTimesheetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s Timesheets Returns the timehseets for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsTimesheet&gt;</returns>
        public ApiResponse< List<ModelsTimesheet> > GetMeTimesheetsWithHttpInfo ()
        {

            var localVarPath = "/me/timesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimesheet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimesheet>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimesheet>)));
        }

        /// <summary>
        /// User&#39;s Timesheets Returns the timehseets for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsTimesheet&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTimesheet>> GetMeTimesheetsAsync ()
        {
             ApiResponse<List<ModelsTimesheet>> localVarResponse = await GetMeTimesheetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// User&#39;s Timesheets Returns the timehseets for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsTimesheet&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTimesheet>>> GetMeTimesheetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/timesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTimesheet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTimesheet>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTimesheet>)));
        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsTrackReminder&gt;</returns>
        public List<ModelsTrackReminder> GetMeTrackReminders ()
        {
             ApiResponse<List<ModelsTrackReminder>> localVarResponse = GetMeTrackRemindersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsTrackReminder&gt;</returns>
        public ApiResponse< List<ModelsTrackReminder> > GetMeTrackRemindersWithHttpInfo ()
        {

            var localVarPath = "/me/track_reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeTrackReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTrackReminder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTrackReminder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTrackReminder>)));
        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsTrackReminder&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTrackReminder>> GetMeTrackRemindersAsync ()
        {
             ApiResponse<List<ModelsTrackReminder>> localVarResponse = await GetMeTrackRemindersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// TrackReminders Returns a list of track reminders.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsTrackReminder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTrackReminder>>> GetMeTrackRemindersAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/track_reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMeTrackReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTrackReminder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTrackReminder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTrackReminder>)));
        }

        /// <summary>
        /// Organizations that a user is part of Get all organizations a given user is part of.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelsMeOrganization&gt;</returns>
        public List<ModelsMeOrganization> GetOrganizations ()
        {
             ApiResponse<List<ModelsMeOrganization>> localVarResponse = GetOrganizationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Organizations that a user is part of Get all organizations a given user is part of.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelsMeOrganization&gt;</returns>
        public ApiResponse< List<ModelsMeOrganization> > GetOrganizationsWithHttpInfo ()
        {

            var localVarPath = "/me/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsMeOrganization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsMeOrganization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsMeOrganization>)));
        }

        /// <summary>
        /// Organizations that a user is part of Get all organizations a given user is part of.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelsMeOrganization&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsMeOrganization>> GetOrganizationsAsync ()
        {
             ApiResponse<List<ModelsMeOrganization>> localVarResponse = await GetOrganizationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Organizations that a user is part of Get all organizations a given user is part of.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelsMeOrganization&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsMeOrganization>>> GetOrganizationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsMeOrganization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsMeOrganization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsMeOrganization>)));
        }

        /// <summary>
        /// PushServices Get list of firebase tokens registered for current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetPushServices ()
        {
             ApiResponse<List<string>> localVarResponse = GetPushServicesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// PushServices Get list of firebase tokens registered for current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetPushServicesWithHttpInfo ()
        {

            var localVarPath = "/me/push_services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// PushServices Get list of firebase tokens registered for current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetPushServicesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetPushServicesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// PushServices Get list of firebase tokens registered for current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetPushServicesAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/push_services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Tags Returns tags for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>List&lt;ModelsTag&gt;</returns>
        public List<ModelsTag> GetTags (int? since = null)
        {
             ApiResponse<List<ModelsTag>> localVarResponse = GetTagsWithHttpInfo(since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tags Returns tags for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTag&gt;</returns>
        public ApiResponse< List<ModelsTag> > GetTagsWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTag>)));
        }

        /// <summary>
        /// Tags Returns tags for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of List&lt;ModelsTag&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTag>> GetTagsAsync (int? since = null)
        {
             ApiResponse<List<ModelsTag>> localVarResponse = await GetTagsAsyncWithHttpInfo(since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tags Returns tags for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tags modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTag>>> GetTagsAsyncWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTag>)));
        }

        /// <summary>
        /// Tasks Returns tasks from projects in which the user is participating.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>List&lt;ModelsTask&gt;</returns>
        public List<ModelsTask> GetTasks (int? since = null, string includeNotActive = null, bool? meta = null)
        {
             ApiResponse<List<ModelsTask>> localVarResponse = GetTasksWithHttpInfo(since, includeNotActive, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tasks Returns tasks from projects in which the user is participating.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelsTask&gt;</returns>
        public ApiResponse< List<ModelsTask> > GetTasksWithHttpInfo (int? since = null, string includeNotActive = null, bool? meta = null)
        {

            var localVarPath = "/me/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (includeNotActive != null) localVarFormParams.Add("include_not_active", this.Configuration.ApiClient.ParameterToString(includeNotActive)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTask>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTask>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTask>)));
        }

        /// <summary>
        /// Tasks Returns tasks from projects in which the user is participating.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of List&lt;ModelsTask&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelsTask>> GetTasksAsync (int? since = null, string includeNotActive = null, bool? meta = null)
        {
             ApiResponse<List<ModelsTask>> localVarResponse = await GetTasksAsyncWithHttpInfo(since, includeNotActive, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tasks Returns tasks from projects in which the user is participating.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve tasks created/modified/deleted since this date using UNIX timestamp. (optional)</param>
        /// <param name="includeNotActive">Include tasks marked as done. (optional)</param>
        /// <param name="meta">Should the response contain data for meta entities (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelsTask&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelsTask>>> GetTasksAsyncWithHttpInfo (int? since = null, string includeNotActive = null, bool? meta = null)
        {

            var localVarPath = "/me/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter
            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter
            if (includeNotActive != null) localVarFormParams.Add("include_not_active", this.Configuration.ApiClient.ParameterToString(includeNotActive)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelsTask>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelsTask>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelsTask>)));
        }

        /// <summary>
        /// WebTimer Get web timer.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetWebTimer ()
        {
             ApiResponse<string> localVarResponse = GetWebTimerWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// WebTimer Get web timer.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWebTimerWithHttpInfo ()
        {

            var localVarPath = "/me/web-timer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// WebTimer Get web timer.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWebTimerAsync ()
        {
             ApiResponse<string> localVarResponse = await GetWebTimerAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// WebTimer Get web timer.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWebTimerAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/web-timer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        public List<WorkspaceWithActiveProjectCount> GetWorkspaces (int? since = null)
        {
             ApiResponse<List<WorkspaceWithActiveProjectCount>> localVarResponse = GetWorkspacesWithHttpInfo(since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        public ApiResponse< List<WorkspaceWithActiveProjectCount> > GetWorkspacesWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkspaceWithActiveProjectCount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkspaceWithActiveProjectCount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkspaceWithActiveProjectCount>)));
        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of List&lt;WorkspaceWithActiveProjectCount&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkspaceWithActiveProjectCount>> GetWorkspacesAsync (int? since = null)
        {
             ApiResponse<List<WorkspaceWithActiveProjectCount>> localVarResponse = await GetWorkspacesAsyncWithHttpInfo(since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Workspaces Lists workspaces for given user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkspaceWithActiveProjectCount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkspaceWithActiveProjectCount>>> GetWorkspacesAsyncWithHttpInfo (int? since = null)
        {

            var localVarPath = "/me/workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarFormParams.Add("since", this.Configuration.ApiClient.ParameterToString(since)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkspaceWithActiveProjectCount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkspaceWithActiveProjectCount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkspaceWithActiveProjectCount>)));
        }

        /// <summary>
        /// Logged Used to check if authentication works.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void MeLoggedGet ()
        {
             MeLoggedGetWithHttpInfo();
        }

        /// <summary>
        /// Logged Used to check if authentication works.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MeLoggedGetWithHttpInfo ()
        {

            var localVarPath = "/me/logged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeLoggedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Logged Used to check if authentication works.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MeLoggedGetAsync ()
        {
             await MeLoggedGetAsyncWithHttpInfo();

        }

        /// <summary>
        /// Logged Used to check if authentication works.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MeLoggedGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/logged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeLoggedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CloseAccount Close Account
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string PostCloseAccount ()
        {
             ApiResponse<string> localVarResponse = PostCloseAccountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// CloseAccount Close Account
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostCloseAccountWithHttpInfo ()
        {

            var localVarPath = "/me/close_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCloseAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// CloseAccount Close Account
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostCloseAccountAsync ()
        {
             ApiResponse<string> localVarResponse = await PostCloseAccountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// CloseAccount Close Account
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostCloseAccountAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/close_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCloseAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// LostPassword Handles the users request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>string</returns>
        public string PostLostPassword (ModelsLostPassword postLostPassword)
        {
             ApiResponse<string> localVarResponse = PostLostPasswordWithHttpInfo(postLostPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// LostPassword Handles the users request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostLostPasswordWithHttpInfo (ModelsLostPassword postLostPassword)
        {
            // verify the required parameter 'postLostPassword' is set
            if (postLostPassword == null)
                throw new ApiException(400, "Missing required parameter 'postLostPassword' when calling MeApi->PostLostPassword");

            var localVarPath = "/me/lost_passwords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postLostPassword != null && postLostPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postLostPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postLostPassword; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// LostPassword Handles the users request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostLostPasswordAsync (ModelsLostPassword postLostPassword)
        {
             ApiResponse<string> localVarResponse = await PostLostPasswordAsyncWithHttpInfo(postLostPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// LostPassword Handles the users request to reset the password.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLostPassword">Lost Password Parameters</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostLostPasswordAsyncWithHttpInfo (ModelsLostPassword postLostPassword)
        {
            // verify the required parameter 'postLostPassword' is set
            if (postLostPassword == null)
                throw new ApiException(400, "Missing required parameter 'postLostPassword' when calling MeApi->PostLostPassword");

            var localVarPath = "/me/lost_passwords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postLostPassword != null && postLostPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postLostPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postLostPassword; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLostPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// LostPassword conformation Handles lost password request confirmation.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>string</returns>
        public string PostLostPasswordConfirm (MeLostPasswordPayload postNewPassword)
        {
             ApiResponse<string> localVarResponse = PostLostPasswordConfirmWithHttpInfo(postNewPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// LostPassword conformation Handles lost password request confirmation.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostLostPasswordConfirmWithHttpInfo (MeLostPasswordPayload postNewPassword)
        {
            // verify the required parameter 'postNewPassword' is set
            if (postNewPassword == null)
                throw new ApiException(400, "Missing required parameter 'postNewPassword' when calling MeApi->PostLostPasswordConfirm");

            var localVarPath = "/me/lost_passwords/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postNewPassword != null && postNewPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postNewPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postNewPassword; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLostPasswordConfirm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// LostPassword conformation Handles lost password request confirmation.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostLostPasswordConfirmAsync (MeLostPasswordPayload postNewPassword)
        {
             ApiResponse<string> localVarResponse = await PostLostPasswordConfirmAsyncWithHttpInfo(postNewPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// LostPassword conformation Handles lost password request confirmation.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewPassword">New Password Data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostLostPasswordConfirmAsyncWithHttpInfo (MeLostPasswordPayload postNewPassword)
        {
            // verify the required parameter 'postNewPassword' is set
            if (postNewPassword == null)
                throw new ApiException(400, "Missing required parameter 'postNewPassword' when calling MeApi->PostLostPasswordConfirm");

            var localVarPath = "/me/lost_passwords/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postNewPassword != null && postNewPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postNewPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postNewPassword; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLostPasswordConfirm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// AcceptTOS Accepts the last version of the Terms of Service for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string PostMeAcceptTos ()
        {
             ApiResponse<string> localVarResponse = PostMeAcceptTosWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// AcceptTOS Accepts the last version of the Terms of Service for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostMeAcceptTosWithHttpInfo ()
        {

            var localVarPath = "/me/accept_tos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeAcceptTos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// AcceptTOS Accepts the last version of the Terms of Service for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostMeAcceptTosAsync ()
        {
             ApiResponse<string> localVarResponse = await PostMeAcceptTosAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// AcceptTOS Accepts the last version of the Terms of Service for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostMeAcceptTosAsyncWithHttpInfo ()
        {

            var localVarPath = "/me/accept_tos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeAcceptTos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Disable product emails Disable product emails.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>string</returns>
        public string PostMeDisableProductEmails (string disableCode)
        {
             ApiResponse<string> localVarResponse = PostMeDisableProductEmailsWithHttpInfo(disableCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable product emails Disable product emails.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostMeDisableProductEmailsWithHttpInfo (string disableCode)
        {
            // verify the required parameter 'disableCode' is set
            if (disableCode == null)
                throw new ApiException(400, "Missing required parameter 'disableCode' when calling MeApi->PostMeDisableProductEmails");

            var localVarPath = "/me/disable_product_emails/{disable_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (disableCode != null) localVarPathParams.Add("disable_code", this.Configuration.ApiClient.ParameterToString(disableCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeDisableProductEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Disable product emails Disable product emails.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostMeDisableProductEmailsAsync (string disableCode)
        {
             ApiResponse<string> localVarResponse = await PostMeDisableProductEmailsAsyncWithHttpInfo(disableCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable product emails Disable product emails.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableCode">Disable Code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostMeDisableProductEmailsAsyncWithHttpInfo (string disableCode)
        {
            // verify the required parameter 'disableCode' is set
            if (disableCode == null)
                throw new ApiException(400, "Missing required parameter 'disableCode' when calling MeApi->PostMeDisableProductEmails");

            var localVarPath = "/me/disable_product_emails/{disable_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (disableCode != null) localVarPathParams.Add("disable_code", this.Configuration.ApiClient.ParameterToString(disableCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeDisableProductEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Disable weekly report Disable weekly report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>string</returns>
        public string PostMeDisableWeeklyReport (string weeklyReportCode)
        {
             ApiResponse<string> localVarResponse = PostMeDisableWeeklyReportWithHttpInfo(weeklyReportCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable weekly report Disable weekly report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostMeDisableWeeklyReportWithHttpInfo (string weeklyReportCode)
        {
            // verify the required parameter 'weeklyReportCode' is set
            if (weeklyReportCode == null)
                throw new ApiException(400, "Missing required parameter 'weeklyReportCode' when calling MeApi->PostMeDisableWeeklyReport");

            var localVarPath = "/me/disable_weekly_report/{weekly_report_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weeklyReportCode != null) localVarPathParams.Add("weekly_report_code", this.Configuration.ApiClient.ParameterToString(weeklyReportCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeDisableWeeklyReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Disable weekly report Disable weekly report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostMeDisableWeeklyReportAsync (string weeklyReportCode)
        {
             ApiResponse<string> localVarResponse = await PostMeDisableWeeklyReportAsyncWithHttpInfo(weeklyReportCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable weekly report Disable weekly report.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weeklyReportCode">Weekly report code</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostMeDisableWeeklyReportAsyncWithHttpInfo (string weeklyReportCode)
        {
            // verify the required parameter 'weeklyReportCode' is set
            if (weeklyReportCode == null)
                throw new ApiException(400, "Missing required parameter 'weeklyReportCode' when calling MeApi->PostMeDisableWeeklyReport");

            var localVarPath = "/me/disable_weekly_report/{weekly_report_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weeklyReportCode != null) localVarPathParams.Add("weekly_report_code", this.Configuration.ApiClient.ParameterToString(weeklyReportCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeDisableWeeklyReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Flags Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>UserFlags</returns>
        public UserFlags PostMeFlags (UserFlags postFlags)
        {
             ApiResponse<UserFlags> localVarResponse = PostMeFlagsWithHttpInfo(postFlags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Flags Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>ApiResponse of UserFlags</returns>
        public ApiResponse< UserFlags > PostMeFlagsWithHttpInfo (UserFlags postFlags)
        {
            // verify the required parameter 'postFlags' is set
            if (postFlags == null)
                throw new ApiException(400, "Missing required parameter 'postFlags' when calling MeApi->PostMeFlags");

            var localVarPath = "/me/flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postFlags != null && postFlags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postFlags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postFlags; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlags)));
        }

        /// <summary>
        /// Flags Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>Task of UserFlags</returns>
        public async System.Threading.Tasks.Task<UserFlags> PostMeFlagsAsync (UserFlags postFlags)
        {
             ApiResponse<UserFlags> localVarResponse = await PostMeFlagsAsyncWithHttpInfo(postFlags);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Flags Add flags for the current user. The current limits are 4 flags per request, 128 flags in total. Keys and values can be up to 32 and 64 characters, respectively.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFlags">flags</param>
        /// <returns>Task of ApiResponse (UserFlags)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFlags>> PostMeFlagsAsyncWithHttpInfo (UserFlags postFlags)
        {
            // verify the required parameter 'postFlags' is set
            if (postFlags == null)
                throw new ApiException(400, "Missing required parameter 'postFlags' when calling MeApi->PostMeFlags");

            var localVarPath = "/me/flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postFlags != null && postFlags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postFlags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postFlags; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMeFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlags)));
        }

        /// <summary>
        /// PushServices Register Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>string</returns>
        public string PostPushServices (PushPostPushServicesSubscribe postPushServicesSubscribe)
        {
             ApiResponse<string> localVarResponse = PostPushServicesWithHttpInfo(postPushServicesSubscribe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PushServices Register Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostPushServicesWithHttpInfo (PushPostPushServicesSubscribe postPushServicesSubscribe)
        {
            // verify the required parameter 'postPushServicesSubscribe' is set
            if (postPushServicesSubscribe == null)
                throw new ApiException(400, "Missing required parameter 'postPushServicesSubscribe' when calling MeApi->PostPushServices");

            var localVarPath = "/me/push_services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postPushServicesSubscribe != null && postPushServicesSubscribe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postPushServicesSubscribe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postPushServicesSubscribe; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPushServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// PushServices Register Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostPushServicesAsync (PushPostPushServicesSubscribe postPushServicesSubscribe)
        {
             ApiResponse<string> localVarResponse = await PostPushServicesAsyncWithHttpInfo(postPushServicesSubscribe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PushServices Register Firebase token for current user
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPushServicesSubscribe">FirebaseToken</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostPushServicesAsyncWithHttpInfo (PushPostPushServicesSubscribe postPushServicesSubscribe)
        {
            // verify the required parameter 'postPushServicesSubscribe' is set
            if (postPushServicesSubscribe == null)
                throw new ApiException(400, "Missing required parameter 'postPushServicesSubscribe' when calling MeApi->PostPushServices");

            var localVarPath = "/me/push_services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postPushServicesSubscribe != null && postPushServicesSubscribe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postPushServicesSubscribe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postPushServicesSubscribe; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPushServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Me Updates details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>ModelsTogglUser</returns>
        public ModelsTogglUser PutMe (MePayload payload)
        {
             ApiResponse<ModelsTogglUser> localVarResponse = PutMeWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Me Updates details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>ApiResponse of ModelsTogglUser</returns>
        public ApiResponse< ModelsTogglUser > PutMeWithHttpInfo (MePayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling MeApi->PutMe");

            var localVarPath = "/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTogglUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTogglUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTogglUser)));
        }

        /// <summary>
        /// Me Updates details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>Task of ModelsTogglUser</returns>
        public async System.Threading.Tasks.Task<ModelsTogglUser> PutMeAsync (MePayload payload)
        {
             ApiResponse<ModelsTogglUser> localVarResponse = await PutMeAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Me Updates details for the current user.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Update user parameters</param>
        /// <returns>Task of ApiResponse (ModelsTogglUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelsTogglUser>> PutMeAsyncWithHttpInfo (MePayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling MeApi->PutMe");

            var localVarPath = "/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelsTogglUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelsTogglUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelsTogglUser)));
        }

        /// <summary>
        /// Notifications Mark notification seen.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>string</returns>
        public string PutNotifications (int? notificationId)
        {
             ApiResponse<string> localVarResponse = PutNotificationsWithHttpInfo(notificationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Notifications Mark notification seen.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutNotificationsWithHttpInfo (int? notificationId)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling MeApi->PutNotifications");

            var localVarPath = "/me/notifications/{notification_id}/seen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Notifications Mark notification seen.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutNotificationsAsync (int? notificationId)
        {
             ApiResponse<string> localVarResponse = await PutNotificationsAsyncWithHttpInfo(notificationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Notifications Mark notification seen.
        /// </summary>
        /// <exception cref="TogglAPI.NetStandard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Notification ID.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutNotificationsAsyncWithHttpInfo (int? notificationId)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling MeApi->PutNotifications");

            var localVarPath = "/me/notifications/{notification_id}/seen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
