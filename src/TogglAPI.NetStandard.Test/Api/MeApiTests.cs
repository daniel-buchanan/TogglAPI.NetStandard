/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing MeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MeApiTests
    {
        private MeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MeApi
            //Assert.IsInstanceOfType(typeof(MeApi), instance, "instance is a MeApi");
        }

        
        /// <summary>
        /// Test DeletePushServices
        /// </summary>
        [Test]
        public void DeletePushServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PushDeletePushServicesUnsubscribe deletePushServicesUnsubscribe = null;
            //var response = instance.DeletePushServices(deletePushServicesUnsubscribe);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetClients
        /// </summary>
        [Test]
        public void GetClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? since = null;
            //var response = instance.GetClients(since);
            //Assert.IsInstanceOf<List<ModelsClient>> (response, "response is List<ModelsClient>");
        }
        
        /// <summary>
        /// Test GetLostPassword
        /// </summary>
        [Test]
        public void GetLostPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenCode = null;
            //var response = instance.GetLostPassword(tokenCode);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetMe
        /// </summary>
        [Test]
        public void GetMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? withRelatedData = null;
            //var response = instance.GetMe(withRelatedData);
            //Assert.IsInstanceOf<RelatedUserWithRelated> (response, "response is RelatedUserWithRelated");
        }
        
        /// <summary>
        /// Test GetMeFeatures
        /// </summary>
        [Test]
        public void GetMeFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMeFeatures();
            //Assert.IsInstanceOf<List<MeWorkspace>> (response, "response is List<MeWorkspace>");
        }
        
        /// <summary>
        /// Test GetMeFlags
        /// </summary>
        [Test]
        public void GetMeFlagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMeFlags();
            //Assert.IsInstanceOf<UserFlags> (response, "response is UserFlags");
        }
        
        /// <summary>
        /// Test GetMeLocation
        /// </summary>
        [Test]
        public void GetMeLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMeLocation();
            //Assert.IsInstanceOf<MeUserLocationResponse> (response, "response is MeUserLocationResponse");
        }
        
        /// <summary>
        /// Test GetMeNotifications
        /// </summary>
        [Test]
        public void GetMeNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMeNotifications();
            //Assert.IsInstanceOf<List<ModelsUserNotification>> (response, "response is List<ModelsUserNotification>");
        }
        
        /// <summary>
        /// Test GetMeProjects
        /// </summary>
        [Test]
        public void GetMeProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string includeArchived = null;
            //int? since = null;
            //var response = instance.GetMeProjects(includeArchived, since);
            //Assert.IsInstanceOf<List<ModelsProject>> (response, "response is List<ModelsProject>");
        }
        
        /// <summary>
        /// Test GetMeProjectsPaginated
        /// </summary>
        [Test]
        public void GetMeProjectsPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? startProjectId = null;
            //int? since = null;
            //int? perPage = null;
            //var response = instance.GetMeProjectsPaginated(startProjectId, since, perPage);
            //Assert.IsInstanceOf<List<ModelsProject>> (response, "response is List<ModelsProject>");
        }
        
        /// <summary>
        /// Test GetMeTimesheets
        /// </summary>
        [Test]
        public void GetMeTimesheetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMeTimesheets();
            //Assert.IsInstanceOf<List<ModelsTimesheet>> (response, "response is List<ModelsTimesheet>");
        }
        
        /// <summary>
        /// Test GetMeTrackReminders
        /// </summary>
        [Test]
        public void GetMeTrackRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMeTrackReminders();
            //Assert.IsInstanceOf<List<ModelsTrackReminder>> (response, "response is List<ModelsTrackReminder>");
        }
        
        /// <summary>
        /// Test GetOrganizations
        /// </summary>
        [Test]
        public void GetOrganizationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrganizations();
            //Assert.IsInstanceOf<List<ModelsMeOrganization>> (response, "response is List<ModelsMeOrganization>");
        }
        
        /// <summary>
        /// Test GetPushServices
        /// </summary>
        [Test]
        public void GetPushServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPushServices();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetTags
        /// </summary>
        [Test]
        public void GetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? since = null;
            //var response = instance.GetTags(since);
            //Assert.IsInstanceOf<List<ModelsTag>> (response, "response is List<ModelsTag>");
        }
        
        /// <summary>
        /// Test GetTasks
        /// </summary>
        [Test]
        public void GetTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? since = null;
            //string includeNotActive = null;
            //bool? meta = null;
            //var response = instance.GetTasks(since, includeNotActive, meta);
            //Assert.IsInstanceOf<List<ModelsTask>> (response, "response is List<ModelsTask>");
        }
        
        /// <summary>
        /// Test GetWebTimer
        /// </summary>
        [Test]
        public void GetWebTimerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWebTimer();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetWorkspaces
        /// </summary>
        [Test]
        public void GetWorkspacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? since = null;
            //var response = instance.GetWorkspaces(since);
            //Assert.IsInstanceOf<List<WorkspaceWithActiveProjectCount>> (response, "response is List<WorkspaceWithActiveProjectCount>");
        }
        
        /// <summary>
        /// Test MeLoggedGet
        /// </summary>
        [Test]
        public void MeLoggedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MeLoggedGet();
            
        }
        
        /// <summary>
        /// Test PostCloseAccount
        /// </summary>
        [Test]
        public void PostCloseAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PostCloseAccount();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostLostPassword
        /// </summary>
        [Test]
        public void PostLostPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelsLostPassword postLostPassword = null;
            //var response = instance.PostLostPassword(postLostPassword);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostLostPasswordConfirm
        /// </summary>
        [Test]
        public void PostLostPasswordConfirmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MeLostPasswordPayload postNewPassword = null;
            //var response = instance.PostLostPasswordConfirm(postNewPassword);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostMeAcceptTos
        /// </summary>
        [Test]
        public void PostMeAcceptTosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PostMeAcceptTos();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostMeDisableProductEmails
        /// </summary>
        [Test]
        public void PostMeDisableProductEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string disableCode = null;
            //var response = instance.PostMeDisableProductEmails(disableCode);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostMeDisableWeeklyReport
        /// </summary>
        [Test]
        public void PostMeDisableWeeklyReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string weeklyReportCode = null;
            //var response = instance.PostMeDisableWeeklyReport(weeklyReportCode);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostMeFlags
        /// </summary>
        [Test]
        public void PostMeFlagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserFlags postFlags = null;
            //var response = instance.PostMeFlags(postFlags);
            //Assert.IsInstanceOf<UserFlags> (response, "response is UserFlags");
        }
        
        /// <summary>
        /// Test PostPushServices
        /// </summary>
        [Test]
        public void PostPushServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PushPostPushServicesSubscribe postPushServicesSubscribe = null;
            //var response = instance.PostPushServices(postPushServicesSubscribe);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutMe
        /// </summary>
        [Test]
        public void PutMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MePayload payload = null;
            //var response = instance.PutMe(payload);
            //Assert.IsInstanceOf<ModelsTogglUser> (response, "response is ModelsTogglUser");
        }
        
        /// <summary>
        /// Test PutNotifications
        /// </summary>
        [Test]
        public void PutNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? notificationId = null;
            //var response = instance.PutNotifications(notificationId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
