/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing ApprovalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ApprovalsApiTests
    {
        private ApprovalsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApprovalsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApprovalsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ApprovalsApi
            //Assert.IsInstanceOfType(typeof(ApprovalsApi), instance, "instance is a ApprovalsApi");
        }

        
        /// <summary>
        /// Test DeleteTimesheetSetups
        /// </summary>
        [Test]
        public void DeleteTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //var response = instance.DeleteTimesheetSetups(workspaceId, setupId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetTimesheetSetups
        /// </summary>
        [Test]
        public void GetTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? memberIds = null;
            //int? approverIds = null;
            //string sortField = null;
            //string sortOrder = null;
            //var response = instance.GetTimesheetSetups(workspaceId, memberIds, approverIds, sortField, sortOrder);
            //Assert.IsInstanceOf<TimesheetsetupsGetPaginatedResponse> (response, "response is TimesheetsetupsGetPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimesheetHoursHandler
        /// </summary>
        [Test]
        public void GetWorkspaceTimesheetHoursHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //TimesheetsPostTimesheetHoursPayload payload = null;
            //var response = instance.GetWorkspaceTimesheetHoursHandler(workspaceId, payload);
            //Assert.IsInstanceOf<List<TimesheetsTimesheetHoursResponse>> (response, "response is List<TimesheetsTimesheetHoursResponse>");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimesheetTimeEntriesHandler
        /// </summary>
        [Test]
        public void GetWorkspaceTimesheetTimeEntriesHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //string startDate = null;
            //var response = instance.GetWorkspaceTimesheetTimeEntriesHandler(workspaceId, setupId, startDate);
            //Assert.IsInstanceOf<List<ModelsTimeEntry>> (response, "response is List<ModelsTimeEntry>");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimesheetsHandler
        /// </summary>
        [Test]
        public void GetWorkspaceTimesheetsHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? memberIds = null;
            //int? approverIds = null;
            //int? timesheetSetupIds = null;
            //int? statuses = null;
            //int? before = null;
            //int? after = null;
            //int? page = null;
            //int? perPage = null;
            //string sortField = null;
            //string sortOrder = null;
            //var response = instance.GetWorkspaceTimesheetsHandler(workspaceId, memberIds, approverIds, timesheetSetupIds, statuses, before, after, page, perPage, sortField, sortOrder);
            //Assert.IsInstanceOf<List<TimesheetsGetPaginatedResponse>> (response, "response is List<TimesheetsGetPaginatedResponse>");
        }
        
        /// <summary>
        /// Test PostTimesheetSetups
        /// </summary>
        [Test]
        public void PostTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //TimesheetsetupsCreatePayload payload = null;
            //var response = instance.PostTimesheetSetups(workspaceId, payload);
            //Assert.IsInstanceOf<List<TimesheetsetupsAPITimesheetSetup>> (response, "response is List<TimesheetsetupsAPITimesheetSetup>");
        }
        
        /// <summary>
        /// Test PutTimesheetSetups
        /// </summary>
        [Test]
        public void PutTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //TimesheetsetupsUpdatePayload payload = null;
            //var response = instance.PutTimesheetSetups(workspaceId, setupId, payload);
            //Assert.IsInstanceOf<TimesheetsetupsAPITimesheetSetup> (response, "response is TimesheetsetupsAPITimesheetSetup");
        }
        
        /// <summary>
        /// Test PutWorkspaceTimesheetsHandler
        /// </summary>
        [Test]
        public void PutWorkspaceTimesheetsHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //string startDate = null;
            //TimesheetsPutTimesheetPayload payload = null;
            //var response = instance.PutWorkspaceTimesheetsHandler(workspaceId, setupId, startDate, payload);
            //Assert.IsInstanceOf<TimesheetsAPITimesheet> (response, "response is TimesheetsAPITimesheet");
        }
        
    }

}
