/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing WorkspacesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WorkspacesApiTests
    {
        private WorkspacesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WorkspacesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WorkspacesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WorkspacesApi
            //Assert.IsInstanceOfType(typeof(WorkspacesApi), instance, "instance is a WorkspacesApi");
        }

        
        /// <summary>
        /// Test DeleteAlerts
        /// </summary>
        [Test]
        public void DeleteAlertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DeleteAlerts();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteTimesheetSetups
        /// </summary>
        [Test]
        public void DeleteTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //var response = instance.DeleteTimesheetSetups(workspaceId, setupId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceTrackReminder
        /// </summary>
        [Test]
        public void DeleteWorkspaceTrackReminderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? reminderId = null;
            //var response = instance.DeleteWorkspaceTrackReminder(workspaceId, reminderId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceUser
        /// </summary>
        [Test]
        public void DeleteWorkspaceUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? workspaceUserId = null;
            //instance.DeleteWorkspaceUser(workspaceId, workspaceUserId);
            
        }
        
        /// <summary>
        /// Test GetOrganizationWorkspacesGroups
        /// </summary>
        [Test]
        public void GetOrganizationWorkspacesGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //var response = instance.GetOrganizationWorkspacesGroups(organizationId, workspaceId);
            //Assert.IsInstanceOf<List<GroupOrganizationGroupResponse>> (response, "response is List<GroupOrganizationGroupResponse>");
        }
        
        /// <summary>
        /// Test GetOrganizationWorkspacesStatistics
        /// </summary>
        [Test]
        public void GetOrganizationWorkspacesStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrganizationWorkspacesStatistics();
            //Assert.IsInstanceOf<Dictionary<string, ModelsStatistics>> (response, "response is Dictionary<string, ModelsStatistics>");
        }
        
        /// <summary>
        /// Test GetOrganizationWorkspacesWorkspaceusers
        /// </summary>
        [Test]
        public void GetOrganizationWorkspacesWorkspaceusersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //string name = null;
            //var response = instance.GetOrganizationWorkspacesWorkspaceusers(organizationId, workspaceId, name);
            //Assert.IsInstanceOf<List<ModelsOrganizationWorkspaceUser>> (response, "response is List<ModelsOrganizationWorkspaceUser>");
        }
        
        /// <summary>
        /// Test GetTimesheetSetups
        /// </summary>
        [Test]
        public void GetTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? memberIds = null;
            //int? approverIds = null;
            //string sortField = null;
            //string sortOrder = null;
            //var response = instance.GetTimesheetSetups(workspaceId, memberIds, approverIds, sortField, sortOrder);
            //Assert.IsInstanceOf<TimesheetsetupsGetPaginatedResponse> (response, "response is TimesheetsetupsGetPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetWorkspace
        /// </summary>
        [Test]
        public void GetWorkspaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspace(workspaceId);
            //Assert.IsInstanceOf<WorkspaceWorkspace> (response, "response is WorkspaceWorkspace");
        }
        
        /// <summary>
        /// Test GetWorkspaceStatistics
        /// </summary>
        [Test]
        public void GetWorkspaceStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWorkspaceStatistics();
            //Assert.IsInstanceOf<ModelsStatistics> (response, "response is ModelsStatistics");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimeEntryConstraints
        /// </summary>
        [Test]
        public void GetWorkspaceTimeEntryConstraintsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceTimeEntryConstraints(workspaceId);
            //Assert.IsInstanceOf<ModelsTimeEntryConstraints> (response, "response is ModelsTimeEntryConstraints");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimesheetHoursHandler
        /// </summary>
        [Test]
        public void GetWorkspaceTimesheetHoursHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //TimesheetsPostTimesheetHoursPayload payload = null;
            //var response = instance.GetWorkspaceTimesheetHoursHandler(workspaceId, payload);
            //Assert.IsInstanceOf<List<TimesheetsTimesheetHoursResponse>> (response, "response is List<TimesheetsTimesheetHoursResponse>");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimesheetTimeEntriesHandler
        /// </summary>
        [Test]
        public void GetWorkspaceTimesheetTimeEntriesHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //string startDate = null;
            //var response = instance.GetWorkspaceTimesheetTimeEntriesHandler(workspaceId, setupId, startDate);
            //Assert.IsInstanceOf<List<ModelsTimeEntry>> (response, "response is List<ModelsTimeEntry>");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimesheetsHandler
        /// </summary>
        [Test]
        public void GetWorkspaceTimesheetsHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? memberIds = null;
            //int? approverIds = null;
            //int? timesheetSetupIds = null;
            //int? statuses = null;
            //int? before = null;
            //int? after = null;
            //int? page = null;
            //int? perPage = null;
            //string sortField = null;
            //string sortOrder = null;
            //var response = instance.GetWorkspaceTimesheetsHandler(workspaceId, memberIds, approverIds, timesheetSetupIds, statuses, before, after, page, perPage, sortField, sortOrder);
            //Assert.IsInstanceOf<List<TimesheetsGetPaginatedResponse>> (response, "response is List<TimesheetsGetPaginatedResponse>");
        }
        
        /// <summary>
        /// Test GetWorkspaceTrackReminders
        /// </summary>
        [Test]
        public void GetWorkspaceTrackRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceTrackReminders(workspaceId);
            //Assert.IsInstanceOf<List<ModelsTrackReminder>> (response, "response is List<ModelsTrackReminder>");
        }
        
        /// <summary>
        /// Test GetWorkspaceUsers
        /// </summary>
        [Test]
        public void GetWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //bool? excludeDeleted = null;
            //var response = instance.GetWorkspaceUsers(workspaceId, excludeDeleted);
            //Assert.IsInstanceOf<List<ModelsSimpleWorkspaceUser>> (response, "response is List<ModelsSimpleWorkspaceUser>");
        }
        
        /// <summary>
        /// Test GetWorkspaces
        /// </summary>
        [Test]
        public void GetWorkspacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? since = null;
            //var response = instance.GetWorkspaces(since);
            //Assert.IsInstanceOf<List<WorkspaceWithActiveProjectCount>> (response, "response is List<WorkspaceWithActiveProjectCount>");
        }
        
        /// <summary>
        /// Test PatchOrganizationWorkspaceUsers
        /// </summary>
        [Test]
        public void PatchOrganizationWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //WorkspaceUsersPatchParams _params = null;
            //var response = instance.PatchOrganizationWorkspaceUsers(organizationId, workspaceId, _params);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostAlerts
        /// </summary>
        [Test]
        public void PostAlertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //object request = null;
            //var response = instance.PostAlerts(request);
            //Assert.IsInstanceOf<ModelsAlert> (response, "response is ModelsAlert");
        }
        
        /// <summary>
        /// Test PostOrganizationWorkspaces
        /// </summary>
        [Test]
        public void PostOrganizationWorkspacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //WorkspacePayload post = null;
            //var response = instance.PostOrganizationWorkspaces(organizationId, post);
            //Assert.IsInstanceOf<WorkspaceWorkspace> (response, "response is WorkspaceWorkspace");
        }
        
        /// <summary>
        /// Test PostTimesheetSetups
        /// </summary>
        [Test]
        public void PostTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //TimesheetsetupsCreatePayload payload = null;
            //var response = instance.PostTimesheetSetups(workspaceId, payload);
            //Assert.IsInstanceOf<List<TimesheetsetupsAPITimesheetSetup>> (response, "response is List<TimesheetsetupsAPITimesheetSetup>");
        }
        
        /// <summary>
        /// Test PostWorkspaceTrackReminders
        /// </summary>
        [Test]
        public void PostWorkspaceTrackRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //RemindersPayload trackReminderPost = null;
            //var response = instance.PostWorkspaceTrackReminders(workspaceId, trackReminderPost);
            //Assert.IsInstanceOf<ModelsTrackReminder> (response, "response is ModelsTrackReminder");
        }
        
        /// <summary>
        /// Test PostWorkspaceUsersLostPassword
        /// </summary>
        [Test]
        public void PostWorkspaceUsersLostPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? userId = null;
            //var response = instance.PostWorkspaceUsersLostPassword(workspaceId, userId);
            //Assert.IsInstanceOf<UsersLostPasswordURL> (response, "response is UsersLostPasswordURL");
        }
        
        /// <summary>
        /// Test PutOrganizationWorkspacesAssignments
        /// </summary>
        [Test]
        public void PutOrganizationWorkspacesAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //UserAssignmentsPayload post = null;
            //var response = instance.PutOrganizationWorkspacesAssignments(organizationId, workspaceId, post);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutTimesheetSetups
        /// </summary>
        [Test]
        public void PutTimesheetSetupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //TimesheetsetupsUpdatePayload payload = null;
            //var response = instance.PutTimesheetSetups(workspaceId, setupId, payload);
            //Assert.IsInstanceOf<TimesheetsetupsAPITimesheetSetup> (response, "response is TimesheetsetupsAPITimesheetSetup");
        }
        
        /// <summary>
        /// Test PutWorkspaceTimesheetsHandler
        /// </summary>
        [Test]
        public void PutWorkspaceTimesheetsHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? setupId = null;
            //string startDate = null;
            //TimesheetsPutTimesheetPayload payload = null;
            //var response = instance.PutWorkspaceTimesheetsHandler(workspaceId, setupId, startDate, payload);
            //Assert.IsInstanceOf<TimesheetsAPITimesheet> (response, "response is TimesheetsAPITimesheet");
        }
        
        /// <summary>
        /// Test PutWorkspaceTrackReminder
        /// </summary>
        [Test]
        public void PutWorkspaceTrackReminderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? reminderId = null;
            //RemindersPayload trackReminderPost = null;
            //var response = instance.PutWorkspaceTrackReminder(workspaceId, reminderId, trackReminderPost);
            //Assert.IsInstanceOf<ModelsTrackReminder> (response, "response is ModelsTrackReminder");
        }
        
        /// <summary>
        /// Test PutWorkspaceUsers
        /// </summary>
        [Test]
        public void PutWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? userId = null;
            //var response = instance.PutWorkspaceUsers(workspaceId, userId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutWorkspaceWorkspaceUsers
        /// </summary>
        [Test]
        public void PutWorkspaceWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? workspaceUserId = null;
            //UserPayload post = null;
            //var response = instance.PutWorkspaceWorkspaceUsers(workspaceId, workspaceUserId, post);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutWorkspaces
        /// </summary>
        [Test]
        public void PutWorkspacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //WorkspacePayload post = null;
            //var response = instance.PutWorkspaces(workspaceId, post);
            //Assert.IsInstanceOf<WorkspaceWorkspace> (response, "response is WorkspaceWorkspace");
        }
        
    }

}
