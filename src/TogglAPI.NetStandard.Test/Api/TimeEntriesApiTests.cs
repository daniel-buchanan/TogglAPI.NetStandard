/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing TimeEntriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TimeEntriesApiTests
    {
        private TimeEntriesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TimeEntriesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TimeEntriesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TimeEntriesApi
            //Assert.IsInstanceOfType(typeof(TimeEntriesApi), instance, "instance is a TimeEntriesApi");
        }

        
        /// <summary>
        /// Test DeleteWorkspaceTimeEntries
        /// </summary>
        [Test]
        public void DeleteWorkspaceTimeEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? timeEntryId = null;
            //var response = instance.DeleteWorkspaceTimeEntries(workspaceId, timeEntryId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetCurrentTimeEntry
        /// </summary>
        [Test]
        public void GetCurrentTimeEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentTimeEntry();
            //Assert.IsInstanceOf<ModelsTimeEntry> (response, "response is ModelsTimeEntry");
        }
        
        /// <summary>
        /// Test GetTimeEntries
        /// </summary>
        [Test]
        public void GetTimeEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? since = null;
            //string before = null;
            //string startDate = null;
            //string endDate = null;
            //bool? meta = null;
            //bool? includeSharing = null;
            //var response = instance.GetTimeEntries(since, before, startDate, endDate, meta, includeSharing);
            //Assert.IsInstanceOf<List<ModelsTimeEntry>> (response, "response is List<ModelsTimeEntry>");
        }
        
        /// <summary>
        /// Test GetTimeEntryById
        /// </summary>
        [Test]
        public void GetTimeEntryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? timeEntryId = null;
            //bool? meta = null;
            //bool? includeSharing = null;
            //var response = instance.GetTimeEntryById(timeEntryId, meta, includeSharing);
            //Assert.IsInstanceOf<ModelsTimeEntry> (response, "response is ModelsTimeEntry");
        }
        
        /// <summary>
        /// Test GetTimeNotesEntryNotesById
        /// </summary>
        [Test]
        public void GetTimeNotesEntryNotesByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? timeEntryId = null;
            //var response = instance.GetTimeNotesEntryNotesById(timeEntryId);
            //Assert.IsInstanceOf<ModelsTimeEntryNotes> (response, "response is ModelsTimeEntryNotes");
        }
        
        /// <summary>
        /// Test GetTimeNotesEntryNotesById_0
        /// </summary>
        [Test]
        public void GetTimeNotesEntryNotesById_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? timeEntryId = null;
            //var response = instance.GetTimeNotesEntryNotesById_0(timeEntryId);
            //Assert.IsInstanceOf<List<ModelsTimeEntryNotes>> (response, "response is List<ModelsTimeEntryNotes>");
        }
        
        /// <summary>
        /// Test GetWorkspaceTimeEntryInvitations
        /// </summary>
        [Test]
        public void GetWorkspaceTimeEntryInvitationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceTimeEntryInvitations(workspaceId);
            //Assert.IsInstanceOf<List<TimeentriesGetTimEntryInvitationsResponse>> (response, "response is List<TimeentriesGetTimEntryInvitationsResponse>");
        }
        
        /// <summary>
        /// Test PatchTimeEntries
        /// </summary>
        [Test]
        public void PatchTimeEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string timeEntryIds = null;
            //TimeentriesPatchPost patchInput = null;
            //bool? meta = null;
            //var response = instance.PatchTimeEntries(workspaceId, timeEntryIds, patchInput, meta);
            //Assert.IsInstanceOf<TimeentryPatchOutput> (response, "response is TimeentryPatchOutput");
        }
        
        /// <summary>
        /// Test PatchWorkspaceStopTimeEntryHandler
        /// </summary>
        [Test]
        public void PatchWorkspaceStopTimeEntryHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? timeEntryId = null;
            //var response = instance.PatchWorkspaceStopTimeEntryHandler(workspaceId, timeEntryId);
            //Assert.IsInstanceOf<ModelsTimeEntry> (response, "response is ModelsTimeEntry");
        }
        
        /// <summary>
        /// Test PostMeTimeEntriesSharedWith
        /// </summary>
        [Test]
        public void PostMeTimeEntriesSharedWithTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<TimeentriesBulkGetSharingRequest> request = null;
            //var response = instance.PostMeTimeEntriesSharedWith(request);
            //Assert.IsInstanceOf<List<TimeentriesBulkGetSharingResponse>> (response, "response is List<TimeentriesBulkGetSharingResponse>");
        }
        
        /// <summary>
        /// Test PostWorkspaceTimeEntries
        /// </summary>
        [Test]
        public void PostWorkspaceTimeEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //TimeentryPayload workspaceTimeEntryPost = null;
            //bool? meta = null;
            //var response = instance.PostWorkspaceTimeEntries(workspaceId, workspaceTimeEntryPost, meta);
            //Assert.IsInstanceOf<ModelsTimeEntry> (response, "response is ModelsTimeEntry");
        }
        
        /// <summary>
        /// Test PostWorkspaceTimeEntryInvitationAction
        /// </summary>
        [Test]
        public void PostWorkspaceTimeEntryInvitationActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? timeEntryInvitationId = null;
            //var response = instance.PostWorkspaceTimeEntryInvitationAction(workspaceId, timeEntryInvitationId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutTimeEntryNotesById
        /// </summary>
        [Test]
        public void PutTimeEntryNotesByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? timeEntryId = null;
            //var response = instance.PutTimeEntryNotesById(timeEntryId);
            //Assert.IsInstanceOf<ModelsTimeEntryNotes> (response, "response is ModelsTimeEntryNotes");
        }
        
        /// <summary>
        /// Test PutWorkspaceTimeEntryHandler
        /// </summary>
        [Test]
        public void PutWorkspaceTimeEntryHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? timeEntryId = null;
            //TimeentryPayload workspaceTimeEntryPost = null;
            //bool? meta = null;
            //bool? includeSharing = null;
            //var response = instance.PutWorkspaceTimeEntryHandler(workspaceId, timeEntryId, workspaceTimeEntryPost, meta, includeSharing);
            //Assert.IsInstanceOf<ModelsTimeEntry> (response, "response is ModelsTimeEntry");
        }
        
    }

}
