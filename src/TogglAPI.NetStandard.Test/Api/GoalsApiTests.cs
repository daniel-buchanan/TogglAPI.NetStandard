/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing GoalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GoalsApiTests
    {
        private GoalsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GoalsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GoalsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GoalsApi
            //Assert.IsInstanceOfType(typeof(GoalsApi), instance, "instance is a GoalsApi");
        }

        
        /// <summary>
        /// Test GoalsGoalIdStatsGet
        /// </summary>
        [Test]
        public void GoalsGoalIdStatsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? goalId = null;
            //var response = instance.GoalsGoalIdStatsGet(goalId);
            //Assert.IsInstanceOf<ModelsGoalStats> (response, "response is ModelsGoalStats");
        }
        
        /// <summary>
        /// Test GoalsInsightPost
        /// </summary>
        [Test]
        public void GoalsInsightPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalsParamsInsight goal = null;
            //var response = instance.GoalsInsightPost(goal);
            //Assert.IsInstanceOf<GoalsInsightResponse> (response, "response is GoalsInsightResponse");
        }
        
        /// <summary>
        /// Test MeGoalsGet
        /// </summary>
        [Test]
        public void MeGoalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? active = null;
            //var response = instance.MeGoalsGet(active);
            //Assert.IsInstanceOf<List<HandlergoalsAPIResponse>> (response, "response is List<HandlergoalsAPIResponse>");
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdGoalsGet
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdGoalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? teamGoals = null;
            //bool? active = null;
            //var response = instance.WorkspacesWorkspaceIdGoalsGet(teamGoals, active);
            //Assert.IsInstanceOf<List<HandlergoalsAPIResponse>> (response, "response is List<HandlergoalsAPIResponse>");
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdGoalsGoalIdDelete
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdGoalsGoalIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? goalId = null;
            //instance.WorkspacesWorkspaceIdGoalsGoalIdDelete(workspaceId, goalId);
            
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdGoalsGoalIdGet
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdGoalsGoalIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? goalId = null;
            //var response = instance.WorkspacesWorkspaceIdGoalsGoalIdGet(workspaceId, goalId);
            //Assert.IsInstanceOf<HandlergoalsAPIResponse> (response, "response is HandlergoalsAPIResponse");
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdGoalsGoalIdPut
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdGoalsGoalIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HandlergoalsUpdatePayload goal = null;
            //var response = instance.WorkspacesWorkspaceIdGoalsGoalIdPut(goal);
            //Assert.IsInstanceOf<ModelsGoal> (response, "response is ModelsGoal");
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdGoalsPost
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdGoalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HandlergoalsCreatePayload goal = null;
            //var response = instance.WorkspacesWorkspaceIdGoalsPost(goal);
            //Assert.IsInstanceOf<ModelsGoal> (response, "response is ModelsGoal");
        }
        
    }

}
