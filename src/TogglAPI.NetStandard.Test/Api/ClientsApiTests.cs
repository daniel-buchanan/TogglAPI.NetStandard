/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing ClientsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ClientsApiTests
    {
        private ClientsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ClientsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ClientsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ClientsApi
            //Assert.IsInstanceOfType(typeof(ClientsApi), instance, "instance is a ClientsApi");
        }

        
        /// <summary>
        /// Test ArchiveClient
        /// </summary>
        [Test]
        public void ArchiveClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? clientId = null;
            //var response = instance.ArchiveClient(workspaceId, clientId);
            //Assert.IsInstanceOf<List<int?>> (response, "response is List<int?>");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceClients
        /// </summary>
        [Test]
        public void DeleteWorkspaceClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? clientId = null;
            //var response = instance.DeleteWorkspaceClients(workspaceId, clientId);
            //Assert.IsInstanceOf<decimal?> (response, "response is decimal?");
        }
        
        /// <summary>
        /// Test GetWorkspaceClient
        /// </summary>
        [Test]
        public void GetWorkspaceClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? clientId = null;
            //var response = instance.GetWorkspaceClient(workspaceId, clientId);
            //Assert.IsInstanceOf<ModelsClient> (response, "response is ModelsClient");
        }
        
        /// <summary>
        /// Test GetWorkspaceClients
        /// </summary>
        [Test]
        public void GetWorkspaceClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string status = null;
            //string name = null;
            //var response = instance.GetWorkspaceClients(workspaceId, status, name);
            //Assert.IsInstanceOf<List<ModelsClient>> (response, "response is List<ModelsClient>");
        }
        
        /// <summary>
        /// Test PostWorkspaceClients
        /// </summary>
        [Test]
        public void PostWorkspaceClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //ClientPayload postedClient = null;
            //var response = instance.PostWorkspaceClients(workspaceId, postedClient);
            //Assert.IsInstanceOf<ModelsClient> (response, "response is ModelsClient");
        }
        
        /// <summary>
        /// Test PutWorkspaceClients
        /// </summary>
        [Test]
        public void PutWorkspaceClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? clientId = null;
            //ClientPayload postedClient = null;
            //var response = instance.PutWorkspaceClients(workspaceId, clientId, postedClient);
            //Assert.IsInstanceOf<ModelsClient> (response, "response is ModelsClient");
        }
        
        /// <summary>
        /// Test RestoreClient
        /// </summary>
        [Test]
        public void RestoreClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? clientId = null;
            //ProjectRestoreParams restoreParams = null;
            //var response = instance.RestoreClient(workspaceId, clientId, restoreParams);
            //Assert.IsInstanceOf<ModelsClient> (response, "response is ModelsClient");
        }
        
    }

}
