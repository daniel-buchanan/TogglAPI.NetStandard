/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing TagsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TagsApiTests
    {
        private TagsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TagsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TagsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TagsApi
            //Assert.IsInstanceOfType(typeof(TagsApi), instance, "instance is a TagsApi");
        }

        
        /// <summary>
        /// Test DeleteWorkspaceTag
        /// </summary>
        [Test]
        public void DeleteWorkspaceTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? tagId = null;
            //var response = instance.DeleteWorkspaceTag(workspaceId, tagId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetWorkspaceTag
        /// </summary>
        [Test]
        public void GetWorkspaceTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceTag(workspaceId);
            //Assert.IsInstanceOf<List<ModelsTag>> (response, "response is List<ModelsTag>");
        }
        
        /// <summary>
        /// Test PatchWorkspaceTags
        /// </summary>
        [Test]
        public void PatchWorkspaceTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.PatchWorkspaceTags(workspaceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostWorkspaceTag
        /// </summary>
        [Test]
        public void PostWorkspaceTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //TagsPayload tagPost = null;
            //var response = instance.PostWorkspaceTag(workspaceId, tagPost);
            //Assert.IsInstanceOf<List<ModelsTag>> (response, "response is List<ModelsTag>");
        }
        
        /// <summary>
        /// Test PutWorkspaceTag
        /// </summary>
        [Test]
        public void PutWorkspaceTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? tagId = null;
            //TagsPayload tagPost = null;
            //var response = instance.PutWorkspaceTag(workspaceId, tagId, tagPost);
            //Assert.IsInstanceOf<List<ModelsTag>> (response, "response is List<ModelsTag>");
        }
        
    }

}
