/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupsApiTests
    {
        private GroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupsApi
            //Assert.IsInstanceOfType(typeof(GroupsApi), instance, "instance is a GroupsApi");
        }

        
        /// <summary>
        /// Test DeleteOrganizationGroup
        /// </summary>
        [Test]
        public void DeleteOrganizationGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? groupId = null;
            //var response = instance.DeleteOrganizationGroup(organizationId, groupId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProjectGroup
        /// </summary>
        [Test]
        public void DeleteProjectGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectGroupId = null;
            //var response = instance.DeleteProjectGroup(workspaceId, projectGroupId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceGroup
        /// </summary>
        [Test]
        public void DeleteWorkspaceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? groupId = null;
            //instance.DeleteWorkspaceGroup(workspaceId, groupId);
            
        }
        
        /// <summary>
        /// Test GetOrganizationGroups
        /// </summary>
        [Test]
        public void GetOrganizationGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //string name = null;
            //string workspace = null;
            //var response = instance.GetOrganizationGroups(organizationId, name, workspace);
            //Assert.IsInstanceOf<List<GroupOrganizationGroupResponse>> (response, "response is List<GroupOrganizationGroupResponse>");
        }
        
        /// <summary>
        /// Test GetOrganizationWorkspacesGroups
        /// </summary>
        [Test]
        public void GetOrganizationWorkspacesGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //var response = instance.GetOrganizationWorkspacesGroups(organizationId, workspaceId);
            //Assert.IsInstanceOf<List<GroupOrganizationGroupResponse>> (response, "response is List<GroupOrganizationGroupResponse>");
        }
        
        /// <summary>
        /// Test GetProjectGroups
        /// </summary>
        [Test]
        public void GetProjectGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string projectIds = null;
            //var response = instance.GetProjectGroups(workspaceId, projectIds);
            //Assert.IsInstanceOf<List<ModelsProjectGroup>> (response, "response is List<ModelsProjectGroup>");
        }
        
        /// <summary>
        /// Test GetWorkspaceGroups
        /// </summary>
        [Test]
        public void GetWorkspaceGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceGroups(workspaceId);
            //Assert.IsInstanceOf<List<ModelsGroup>> (response, "response is List<ModelsGroup>");
        }
        
        /// <summary>
        /// Test PatchOrganizationGroup
        /// </summary>
        [Test]
        public void PatchOrganizationGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? groupId = null;
            //List<GroupsPatchInput> patchGroupRequest = null;
            //var response = instance.PatchOrganizationGroup(organizationId, groupId, patchGroupRequest);
            //Assert.IsInstanceOf<GroupsPatchOutput> (response, "response is GroupsPatchOutput");
        }
        
        /// <summary>
        /// Test PostOrganizationGroup
        /// </summary>
        [Test]
        public void PostOrganizationGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //GroupPayload postGroupRequest = null;
            //var response = instance.PostOrganizationGroup(organizationId, postGroupRequest);
            //Assert.IsInstanceOf<GroupOrganizationGroupResponse> (response, "response is GroupOrganizationGroupResponse");
        }
        
        /// <summary>
        /// Test PostProjectGroup
        /// </summary>
        [Test]
        public void PostProjectGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //GroupProjectGroupPayload projectGroupPost = null;
            //var response = instance.PostProjectGroup(workspaceId, projectGroupPost);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostWorkspaceGroup
        /// </summary>
        [Test]
        public void PostWorkspaceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //GroupNamePayload postGroupRequest = null;
            //var response = instance.PostWorkspaceGroup(workspaceId, postGroupRequest);
            //Assert.IsInstanceOf<ModelsGroup> (response, "response is ModelsGroup");
        }
        
        /// <summary>
        /// Test PutOrganizationGroup
        /// </summary>
        [Test]
        public void PutOrganizationGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //GroupPayload putGroupRequest = null;
            //var response = instance.PutOrganizationGroup(organizationId, putGroupRequest);
            //Assert.IsInstanceOf<GroupOrganizationGroupResponse> (response, "response is GroupOrganizationGroupResponse");
        }
        
        /// <summary>
        /// Test PutOrganizationWorkspacesAssignments
        /// </summary>
        [Test]
        public void PutOrganizationWorkspacesAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //UserAssignmentsPayload post = null;
            //var response = instance.PutOrganizationWorkspacesAssignments(organizationId, workspaceId, post);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutWorkspaceGroup
        /// </summary>
        [Test]
        public void PutWorkspaceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? groupId = null;
            //GroupNamePayload putGroupRequest = null;
            //var response = instance.PutWorkspaceGroup(workspaceId, groupId, putGroupRequest);
            //Assert.IsInstanceOf<ModelsGroup> (response, "response is ModelsGroup");
        }
        
    }

}
