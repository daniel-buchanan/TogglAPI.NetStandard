/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing FeedbackApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FeedbackApiTests
    {
        private FeedbackApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FeedbackApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FeedbackApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FeedbackApi
            //Assert.IsInstanceOfType(typeof(FeedbackApi), instance, "instance is a FeedbackApi");
        }

        
        /// <summary>
        /// Test PostFeedbackWeb
        /// </summary>
        [Test]
        public void PostFeedbackWebTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string togglVersion = null;
            //string date = null;
            //string details = null;
            //string updateChannel = null;
            //string subject = null;
            //bool? latest = null;
            //System.IO.Stream files = null;
            //instance.PostFeedbackWeb(togglVersion, date, details, updateChannel, subject, latest, files);
            
        }
        
        /// <summary>
        /// Test PostUnifiedFeedback
        /// </summary>
        [Test]
        public void PostUnifiedFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string togglVersion = null;
            //string date = null;
            //string details = null;
            //string updateChannel = null;
            //string subject = null;
            //string deviceModel = null;
            //string buildNumber = null;
            //string operatingSystem = null;
            //bool? latest = null;
            //System.IO.Stream files = null;
            //instance.PostUnifiedFeedback(togglVersion, date, details, updateChannel, subject, deviceModel, buildNumber, operatingSystem, latest, files);
            
        }
        
    }

}
