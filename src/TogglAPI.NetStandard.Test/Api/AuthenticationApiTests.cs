/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing AuthenticationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AuthenticationApiTests
    {
        private AuthenticationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AuthenticationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthenticationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AuthenticationApi
            //Assert.IsInstanceOfType(typeof(AuthenticationApi), instance, "instance is a AuthenticationApi");
        }

        
        /// <summary>
        /// Test GetSaml2LoginUrl
        /// </summary>
        [Test]
        public void GetSaml2LoginUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //string _client = null;
            //string state = null;
            //var response = instance.GetSaml2LoginUrl(email, _client, state);
            //Assert.IsInstanceOf<Saml2LoginResponse> (response, "response is Saml2LoginResponse");
        }
        
        /// <summary>
        /// Test GetWorkspaceSso
        /// </summary>
        [Test]
        public void GetWorkspaceSsoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceSso(workspaceId);
            //Assert.IsInstanceOf<SsoConfigResult> (response, "response is SsoConfigResult");
        }
        
        /// <summary>
        /// Test MeSessionsDelete
        /// </summary>
        [Test]
        public void MeSessionsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.MeSessionsDelete();
            
        }
        
        /// <summary>
        /// Test MeSessionsPost
        /// </summary>
        [Test]
        public void MeSessionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MePostSessionHandlerRequestBody sessionPost = null;
            //var response = instance.MeSessionsPost(sessionPost);
            //Assert.IsInstanceOf<ModelsUser> (response, "response is ModelsUser");
        }
        
        /// <summary>
        /// Test PostEnableSso
        /// </summary>
        [Test]
        public void PostEnableSsoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SsoConfirmation enableSsoPost = null;
            //var response = instance.PostEnableSso(enableSsoPost);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostResetToken
        /// </summary>
        [Test]
        public void PostResetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PostResetToken();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostSaml2Callback
        /// </summary>
        [Test]
        public void PostSaml2CallbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string sAMLResponse = null;
            //string relayState = null;
            //instance.PostSaml2Callback(workspaceId, sAMLResponse, relayState);
            
        }
        
        /// <summary>
        /// Test PostSignup
        /// </summary>
        [Test]
        public void PostSignupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MePostUser postUser = null;
            //var response = instance.PostSignup(postUser);
            //Assert.IsInstanceOf<ModelsTogglUser> (response, "response is ModelsTogglUser");
        }
        
    }

}
