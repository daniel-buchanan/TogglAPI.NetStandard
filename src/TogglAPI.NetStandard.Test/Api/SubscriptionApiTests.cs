/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing SubscriptionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubscriptionApiTests
    {
        private SubscriptionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubscriptionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubscriptionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubscriptionApi
            //Assert.IsInstanceOfType(typeof(SubscriptionApi), instance, "instance is a SubscriptionApi");
        }

        
        /// <summary>
        /// Test DeleteOrganizationSubscription
        /// </summary>
        [Test]
        public void DeleteOrganizationSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //string immediateCancel = null;
            //var response = instance.DeleteOrganizationSubscription(organizationId, immediateCancel);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceSubscription
        /// </summary>
        [Test]
        public void DeleteWorkspaceSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? subscriptionId = null;
            //ModelsPlanChangeFeedback feedbackData = null;
            //var response = instance.DeleteWorkspaceSubscription(workspaceId, subscriptionId, feedbackData);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetCurrencies
        /// </summary>
        [Test]
        public void GetCurrenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrencies();
            //Assert.IsInstanceOf<List<ModelsCurrency>> (response, "response is List<ModelsCurrency>");
        }
        
        /// <summary>
        /// Test GetOrganizationInvoice
        /// </summary>
        [Test]
        public void GetOrganizationInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //string invoiceUid = null;
            //var response = instance.GetOrganizationInvoice(organizationId, invoiceUid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetOrganizationInvoiceSummary
        /// </summary>
        [Test]
        public void GetOrganizationInvoiceSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? quantity = null;
            //string pricingPlanTag = null;
            //var response = instance.GetOrganizationInvoiceSummary(organizationId, quantity, pricingPlanTag);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetOrganizationSubscription
        /// </summary>
        [Test]
        public void GetOrganizationSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //var response = instance.GetOrganizationSubscription(organizationId);
            //Assert.IsInstanceOf<SubscriptionOutData> (response, "response is SubscriptionOutData");
        }
        
        /// <summary>
        /// Test GetPublicSubscriptionPlans
        /// </summary>
        [Test]
        public void GetPublicSubscriptionPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPublicSubscriptionPlans();
            //Assert.IsInstanceOf<List<BillingFancyPlan>> (response, "response is List<BillingFancyPlan>");
        }
        
        /// <summary>
        /// Test GetWorkspaceCurrencies
        /// </summary>
        [Test]
        public void GetWorkspaceCurrenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceCurrencies(workspaceId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetWorkspaceCustomer
        /// </summary>
        [Test]
        public void GetWorkspaceCustomerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceCustomer(workspaceId);
            //Assert.IsInstanceOf<ModelsCustomer> (response, "response is ModelsCustomer");
        }
        
        /// <summary>
        /// Test GetWorkspaceFeatures
        /// </summary>
        [Test]
        public void GetWorkspaceFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceFeatures(workspaceId);
            //Assert.IsInstanceOf<SubscriptionFeatureReturn> (response, "response is SubscriptionFeatureReturn");
        }
        
        /// <summary>
        /// Test GetWorkspaceFeaturesSelected
        /// </summary>
        [Test]
        public void GetWorkspaceFeaturesSelectedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceFeaturesSelected(workspaceId);
            //Assert.IsInstanceOf<SubscriptionFeatureReturn> (response, "response is SubscriptionFeatureReturn");
        }
        
        /// <summary>
        /// Test GetWorkspaceInvoices
        /// </summary>
        [Test]
        public void GetWorkspaceInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? invoiceId = null;
            //var response = instance.GetWorkspaceInvoices(workspaceId, invoiceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetWorkspacePaymentReceipts
        /// </summary>
        [Test]
        public void GetWorkspacePaymentReceiptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? paymentId = null;
            //var response = instance.GetWorkspacePaymentReceipts(workspaceId, paymentId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetWorkspacePaymentRecords
        /// </summary>
        [Test]
        public void GetWorkspacePaymentRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspacePaymentRecords(workspaceId);
            //Assert.IsInstanceOf<List<ModelsPaymentRecord>> (response, "response is List<ModelsPaymentRecord>");
        }
        
        /// <summary>
        /// Test GetWorkspacePlans
        /// </summary>
        [Test]
        public void GetWorkspacePlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspacePlans(workspaceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetWorkspacePlansPricing
        /// </summary>
        [Test]
        public void GetWorkspacePlansPricingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? planId = null;
            //var response = instance.GetWorkspacePlansPricing(workspaceId, planId);
            //Assert.IsInstanceOf<List<BillingFancyPlan>> (response, "response is List<BillingFancyPlan>");
        }
        
        /// <summary>
        /// Test GetWorkspacePurchaseOrderPdf
        /// </summary>
        [Test]
        public void GetWorkspacePurchaseOrderPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? purchaseOrderId = null;
            //var response = instance.GetWorkspacePurchaseOrderPdf(workspaceId, purchaseOrderId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetWorkspaceSubscription
        /// </summary>
        [Test]
        public void GetWorkspaceSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceSubscription(workspaceId);
            //Assert.IsInstanceOf<SubscriptionOutData> (response, "response is SubscriptionOutData");
        }
        
        /// <summary>
        /// Test PostOrganizationPlansPricingFeedback
        /// </summary>
        [Test]
        public void PostOrganizationPlansPricingFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? pricingPlanId = null;
            //ModelsPlanChangeFeedback comment = null;
            //var response = instance.PostOrganizationPlansPricingFeedback(organizationId, pricingPlanId, comment);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostOrganizationPurchaseOrder
        /// </summary>
        [Test]
        public void PostOrganizationPurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //PurchaseordersPayload organizationPurchaseOrderRequest = null;
            //var response = instance.PostOrganizationPurchaseOrder(organizationId, organizationPurchaseOrderRequest);
            //Assert.IsInstanceOf<AccountingPurchaseOrderListItem> (response, "response is AccountingPurchaseOrderListItem");
        }
        
        /// <summary>
        /// Test PostOrganizationSubscription
        /// </summary>
        [Test]
        public void PostOrganizationSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //SubscriptionCreateUnifiedSubsRequest organizationSubscriptionRequest = null;
            //instance.PostOrganizationSubscription(organizationId, organizationSubscriptionRequest);
            
        }
        
        /// <summary>
        /// Test PostOrganizationSubscription_0
        /// </summary>
        [Test]
        public void PostOrganizationSubscription_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //instance.PostOrganizationSubscription_0(organizationId);
            
        }
        
        /// <summary>
        /// Test PostWorkspaceCustomer
        /// </summary>
        [Test]
        public void PostWorkspaceCustomerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //SubscriptionContactDetailRequest contactDetailRequest = null;
            //var response = instance.PostWorkspaceCustomer(workspaceId, contactDetailRequest);
            //Assert.IsInstanceOf<ModelsContactDetail> (response, "response is ModelsContactDetail");
        }
        
        /// <summary>
        /// Test PostWorkspacePlansPricingFeedback
        /// </summary>
        [Test]
        public void PostWorkspacePlansPricingFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? pricingPlanId = null;
            //ModelsPlanChangeFeedback comment = null;
            //var response = instance.PostWorkspacePlansPricingFeedback(workspaceId, pricingPlanId, comment);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostWorkspacePurchaseOrder
        /// </summary>
        [Test]
        public void PostWorkspacePurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //PurchaseordersPayload workspacePurchaseOrderRequest = null;
            //var response = instance.PostWorkspacePurchaseOrder(workspaceId, workspacePurchaseOrderRequest);
            //Assert.IsInstanceOf<AccountingPurchaseOrderListItem> (response, "response is AccountingPurchaseOrderListItem");
        }
        
        /// <summary>
        /// Test PostWorkspaceSubscription
        /// </summary>
        [Test]
        public void PostWorkspaceSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //SubscriptionPayload workspaceSubscriptionRequest = null;
            //var response = instance.PostWorkspaceSubscription(workspaceId, workspaceSubscriptionRequest);
            //Assert.IsInstanceOf<ModelsSubscription> (response, "response is ModelsSubscription");
        }
        
        /// <summary>
        /// Test PostWorkspaceSubscriptionCalculate
        /// </summary>
        [Test]
        public void PostWorkspaceSubscriptionCalculateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //SubscriptionCalculateRequest calculationDataRequest = null;
            //var response = instance.PostWorkspaceSubscriptionCalculate(workspaceId, calculationDataRequest);
            //Assert.IsInstanceOf<SubscriptionCalculatedData> (response, "response is SubscriptionCalculatedData");
        }
        
        /// <summary>
        /// Test PostWorkspaceSubscriptionIncAccept
        /// </summary>
        [Test]
        public void PostWorkspaceSubscriptionIncAcceptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.PostWorkspaceSubscriptionIncAccept(workspaceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutOrganizationSubscription
        /// </summary>
        [Test]
        public void PutOrganizationSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //SubscriptionUpdateUnifiedSubsRequest organizationSubscriptionRequest = null;
            //instance.PutOrganizationSubscription(organizationId, organizationSubscriptionRequest);
            
        }
        
        /// <summary>
        /// Test PutWorkspaceProfile
        /// </summary>
        [Test]
        public void PutWorkspaceProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? profileId = null;
            //ModelsPlanChangeFeedback feedbackData = null;
            //var response = instance.PutWorkspaceProfile(workspaceId, profileId, feedbackData);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
