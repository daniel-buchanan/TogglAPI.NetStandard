/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing ReportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ReportsApiTests
    {
        private ReportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ReportsApi
            //Assert.IsInstanceOfType(typeof(ReportsApi), instance, "instance is a ReportsApi");
        }

        
        /// <summary>
        /// Test DeleteSavedReportResource
        /// </summary>
        [Test]
        public void DeleteSavedReportResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? reportId = null;
            //var response = instance.DeleteSavedReportResource(workspaceId, reportId);
            //Assert.IsInstanceOf<ModelsSavedReport> (response, "response is ModelsSavedReport");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceScheduledReports
        /// </summary>
        [Test]
        public void DeleteWorkspaceScheduledReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? reportId = null;
            //var response = instance.DeleteWorkspaceScheduledReports(workspaceId, reportId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetSavedReportResource
        /// </summary>
        [Test]
        public void GetSavedReportResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? reportId = null;
            //var response = instance.GetSavedReportResource(workspaceId, reportId);
            //Assert.IsInstanceOf<ModelsSavedReport> (response, "response is ModelsSavedReport");
        }
        
        /// <summary>
        /// Test GetSharedReport
        /// </summary>
        [Test]
        public void GetSharedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //bool? fixedDates = null;
            //string name = null;
            //int? ownerID = null;
            //int? page = null;
            //int? perPage = null;
            //bool? _public = null;
            //bool? scheduled = null;
            //string sortDirection = null;
            //string sortField = null;
            //var response = instance.GetSharedReport(workspaceId, fixedDates, name, ownerID, page, perPage, _public, scheduled, sortDirection, sortField);
            //Assert.IsInstanceOf<List<ModelsSavedReport>> (response, "response is List<ModelsSavedReport>");
        }
        
        /// <summary>
        /// Test GetWorkspaceScheduledReports
        /// </summary>
        [Test]
        public void GetWorkspaceScheduledReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetWorkspaceScheduledReports(workspaceId);
            //Assert.IsInstanceOf<List<ModelsScheduledReport>> (response, "response is List<ModelsScheduledReport>");
        }
        
        /// <summary>
        /// Test PostSharedReport
        /// </summary>
        [Test]
        public void PostSharedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //SavedPayload savedReportPayload = null;
            //var response = instance.PostSharedReport(workspaceId, savedReportPayload);
            //Assert.IsInstanceOf<ModelsSavedReport> (response, "response is ModelsSavedReport");
        }
        
        /// <summary>
        /// Test PostWorkspaceScheduledReports
        /// </summary>
        [Test]
        public void PostWorkspaceScheduledReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //ScheduledPayload workspaceId2 = null;
            //var response = instance.PostWorkspaceScheduledReports(workspaceId, workspaceId2);
            //Assert.IsInstanceOf<ModelsScheduledReport> (response, "response is ModelsScheduledReport");
        }
        
        /// <summary>
        /// Test PutSavedReportResource
        /// </summary>
        [Test]
        public void PutSavedReportResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? reportId = null;
            //SavedPayload savedReportPayload = null;
            //var response = instance.PutSavedReportResource(workspaceId, reportId, savedReportPayload);
            //Assert.IsInstanceOf<ModelsSavedReport> (response, "response is ModelsSavedReport");
        }
        
        /// <summary>
        /// Test PutSharedReport
        /// </summary>
        [Test]
        public void PutSharedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? reportId = null;
            //List<SavedPayload> savedReportPayload = null;
            //var response = instance.PutSharedReport(workspaceId, reportId, savedReportPayload);
            //Assert.IsInstanceOf<ModelsSavedReport> (response, "response is ModelsSavedReport");
        }
        
    }

}
