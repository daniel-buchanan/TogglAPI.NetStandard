/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing CalendarApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CalendarApiTests
    {
        private CalendarApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CalendarApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CalendarApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CalendarApi
            //Assert.IsInstanceOfType(typeof(CalendarApi), instance, "instance is a CalendarApi");
        }

        
        /// <summary>
        /// Test IntegrationsCalendarCalendarsSelectedGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarCalendarsSelectedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string limit = null;
            //string pageToken = null;
            //int? integrationId = null;
            //bool? selected = null;
            //var response = instance.IntegrationsCalendarCalendarsSelectedGet(limit, pageToken, integrationId, selected);
            //Assert.IsInstanceOf<HandlercalendarCalendarsResponse> (response, "response is HandlercalendarCalendarsResponse");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarCallbackProviderGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarCallbackProviderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string provider = null;
            //string state = null;
            //string code = null;
            //instance.IntegrationsCalendarCallbackProviderGet(provider, state, code);
            
        }
        
        /// <summary>
        /// Test IntegrationsCalendarEventsDetailsSuggestionPost
        /// </summary>
        [Test]
        public void IntegrationsCalendarEventsDetailsSuggestionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HandlercalendarPostDetailsSuggestionRequest request = null;
            //var response = instance.IntegrationsCalendarEventsDetailsSuggestionPost(request);
            //Assert.IsInstanceOf<HandlercalendarPostDetailsSuggestionResponse> (response, "response is HandlercalendarPostDetailsSuggestionResponse");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarEventsEventIdDetailsSuggestionGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarEventsEventIdDetailsSuggestionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? eventId = null;
            //var response = instance.IntegrationsCalendarEventsEventIdDetailsSuggestionGet(eventId);
            //Assert.IsInstanceOf<ModelsSuggestion> (response, "response is ModelsSuggestion");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarEventsGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarEventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string endDate = null;
            //string limit = null;
            //string pageToken = null;
            //var response = instance.IntegrationsCalendarEventsGet(startDate, endDate, limit, pageToken);
            //Assert.IsInstanceOf<HandlercalendarEventsResponse> (response, "response is HandlercalendarEventsResponse");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarEventsUpdatePost
        /// </summary>
        [Test]
        public void IntegrationsCalendarEventsUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IntegrationsCalendarEventsUpdatePost();
            //Assert.IsInstanceOf<HandlercalendarResponse> (response, "response is HandlercalendarResponse");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IntegrationsCalendarGet();
            //Assert.IsInstanceOf<List<ModelsIntegration>> (response, "response is List<ModelsIntegration>");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch
        /// </summary>
        [Test]
        public void IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? integrationId = null;
            //int? calendarId = null;
            //HandlercalendarPatchCalendar payload = null;
            //var response = instance.IntegrationsCalendarIntegrationIdCalendarsCalendarIdPatch(integrationId, calendarId, payload);
            //Assert.IsInstanceOf<List<ModelsCalendar>> (response, "response is List<ModelsCalendar>");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarIntegrationIdCalendarsGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarIntegrationIdCalendarsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? integrationId = null;
            //int? limit = null;
            //bool? selected = null;
            //string pageToken = null;
            //var response = instance.IntegrationsCalendarIntegrationIdCalendarsGet(integrationId, limit, selected, pageToken);
            //Assert.IsInstanceOf<HandlercalendarCalendarsResponse> (response, "response is HandlercalendarCalendarsResponse");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? integrationId = null;
            //string idCalendar = null;
            //string startDate = null;
            //string endDate = null;
            //string limit = null;
            //string pageToken = null;
            //var response = instance.IntegrationsCalendarIntegrationIdCalendarsIdCalendarEventsGet(integrationId, idCalendar, startDate, endDate, limit, pageToken);
            //Assert.IsInstanceOf<HandlercalendarEventsResponse> (response, "response is HandlercalendarEventsResponse");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarIntegrationIdCalendarsUpdatePost
        /// </summary>
        [Test]
        public void IntegrationsCalendarIntegrationIdCalendarsUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? integrationId = null;
            //var response = instance.IntegrationsCalendarIntegrationIdCalendarsUpdatePost(integrationId);
            //Assert.IsInstanceOf<HandlercalendarFetchedCalendarsResponse> (response, "response is HandlercalendarFetchedCalendarsResponse");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarIntegrationIdDelete
        /// </summary>
        [Test]
        public void IntegrationsCalendarIntegrationIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? integrationId = null;
            //var response = instance.IntegrationsCalendarIntegrationIdDelete(integrationId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test IntegrationsCalendarSetupGet
        /// </summary>
        [Test]
        public void IntegrationsCalendarSetupGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string provider = null;
            //string returnTo = null;
            //instance.IntegrationsCalendarSetupGet(provider, returnTo);
            
        }
        
    }

}
