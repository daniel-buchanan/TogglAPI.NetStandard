/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test DeleteOrganizationUsersLeave
        /// </summary>
        [Test]
        public void DeleteOrganizationUsersLeaveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //var response = instance.DeleteOrganizationUsersLeave(organizationId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceUser
        /// </summary>
        [Test]
        public void DeleteWorkspaceUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? workspaceUserId = null;
            //instance.DeleteWorkspaceUser(workspaceId, workspaceUserId);
            
        }
        
        /// <summary>
        /// Test GetOrganizationUsers
        /// </summary>
        [Test]
        public void GetOrganizationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //string filter = null;
            //string activeStatus = null;
            //string onlyAdmins = null;
            //string groups = null;
            //string workspaces = null;
            //int? page = null;
            //int? perPage = null;
            //string sortDir = null;
            //var response = instance.GetOrganizationUsers(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
            //Assert.IsInstanceOf<List<ModelsOrgUser>> (response, "response is List<ModelsOrgUser>");
        }
        
        /// <summary>
        /// Test GetOrganizationUsersDetailed
        /// </summary>
        [Test]
        public void GetOrganizationUsersDetailedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //string filter = null;
            //string activeStatus = null;
            //string onlyAdmins = null;
            //string groups = null;
            //string workspaces = null;
            //int? page = null;
            //int? perPage = null;
            //string sortDir = null;
            //var response = instance.GetOrganizationUsersDetailed(organizationId, filter, activeStatus, onlyAdmins, groups, workspaces, page, perPage, sortDir);
            //Assert.IsInstanceOf<List<ModelsOrgUserDetailed>> (response, "response is List<ModelsOrgUserDetailed>");
        }
        
        /// <summary>
        /// Test GetOrganizationWorkspacesWorkspaceusers
        /// </summary>
        [Test]
        public void GetOrganizationWorkspacesWorkspaceusersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //string name = null;
            //var response = instance.GetOrganizationWorkspacesWorkspaceusers(organizationId, workspaceId, name);
            //Assert.IsInstanceOf<List<ModelsOrganizationWorkspaceUser>> (response, "response is List<ModelsOrganizationWorkspaceUser>");
        }
        
        /// <summary>
        /// Test GetWorkspaceUsers
        /// </summary>
        [Test]
        public void GetWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //bool? excludeDeleted = null;
            //var response = instance.GetWorkspaceUsers(workspaceId, excludeDeleted);
            //Assert.IsInstanceOf<List<ModelsSimpleWorkspaceUser>> (response, "response is List<ModelsSimpleWorkspaceUser>");
        }
        
        /// <summary>
        /// Test GetWorkspaceWorkspaceUsers
        /// </summary>
        [Test]
        public void GetWorkspaceWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string includeIndirect = null;
            //var response = instance.GetWorkspaceWorkspaceUsers(workspaceId, includeIndirect);
            //Assert.IsInstanceOf<List<ModelsWorkspaceUser>> (response, "response is List<ModelsWorkspaceUser>");
        }
        
        /// <summary>
        /// Test PatchOrganizationUsers
        /// </summary>
        [Test]
        public void PatchOrganizationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //UserPatchParams _params = null;
            //var response = instance.PatchOrganizationUsers(organizationId, _params);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PatchOrganizationWorkspaceUsers
        /// </summary>
        [Test]
        public void PatchOrganizationWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //WorkspaceUsersPatchParams _params = null;
            //var response = instance.PatchOrganizationWorkspaceUsers(organizationId, workspaceId, _params);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostWorkspaceUsersLostPassword
        /// </summary>
        [Test]
        public void PostWorkspaceUsersLostPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? userId = null;
            //var response = instance.PostWorkspaceUsersLostPassword(workspaceId, userId);
            //Assert.IsInstanceOf<UsersLostPasswordURL> (response, "response is UsersLostPasswordURL");
        }
        
        /// <summary>
        /// Test PutOrganizationUsers
        /// </summary>
        [Test]
        public void PutOrganizationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //UserPayload _params = null;
            //var response = instance.PutOrganizationUsers(organizationId, _params);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutOrganizationWorkspacesAssignments
        /// </summary>
        [Test]
        public void PutOrganizationWorkspacesAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? organizationId = null;
            //int? workspaceId = null;
            //UserAssignmentsPayload post = null;
            //var response = instance.PutOrganizationWorkspacesAssignments(organizationId, workspaceId, post);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutWorkspaceUsers
        /// </summary>
        [Test]
        public void PutWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? userId = null;
            //var response = instance.PutWorkspaceUsers(workspaceId, userId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutWorkspaceWorkspaceUsers
        /// </summary>
        [Test]
        public void PutWorkspaceWorkspaceUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? workspaceUserId = null;
            //UserPayload post = null;
            //var response = instance.PutWorkspaceWorkspaceUsers(workspaceId, workspaceUserId, post);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
