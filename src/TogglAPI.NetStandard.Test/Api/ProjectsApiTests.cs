/* 
 * Toggl API
 *
 * Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.
 *
 * OpenAPI spec version: 9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TogglAPI.NetStandard.Client;
using TogglAPI.NetStandard.Api;
using TogglAPI.NetStandard.Model;

namespace TogglAPI.NetStandard.Test
{
    /// <summary>
    ///  Class for testing ProjectsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProjectsApiTests
    {
        private ProjectsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProjectsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProjectsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProjectsApi
            //Assert.IsInstanceOfType(typeof(ProjectsApi), instance, "instance is a ProjectsApi");
        }

        
        /// <summary>
        /// Test DeleteWorkspaceProject
        /// </summary>
        [Test]
        public void DeleteWorkspaceProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectId = null;
            //string teDeletionMode = null;
            //var response = instance.DeleteWorkspaceProject(workspaceId, projectId, teDeletionMode);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test DeleteWorkspaceProjectUsers
        /// </summary>
        [Test]
        public void DeleteWorkspaceProjectUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectUserId = null;
            //var response = instance.DeleteWorkspaceProjectUsers(workspaceId, projectUserId);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test GetProjects
        /// </summary>
        [Test]
        public void GetProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string name = null;
            //int? page = null;
            //string sortField = null;
            //string sortOrder = null;
            //bool? onlyTemplates = null;
            //bool? active = null;
            //int? since = null;
            //bool? billable = null;
            //List<string> userIds = null;
            //List<string> clientIds = null;
            //List<string> groupIds = null;
            //List<string> statuses = null;
            //bool? onlyMe = null;
            //int? perPage = null;
            //var response = instance.GetProjects(workspaceId, name, page, sortField, sortOrder, onlyTemplates, active, since, billable, userIds, clientIds, groupIds, statuses, onlyMe, perPage);
            //Assert.IsInstanceOf<List<ModelsProject>> (response, "response is List<ModelsProject>");
        }
        
        /// <summary>
        /// Test GetProjectsTemplates
        /// </summary>
        [Test]
        public void GetProjectsTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //var response = instance.GetProjectsTemplates(workspaceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetSharedProject
        /// </summary>
        [Test]
        public void GetSharedProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hash = null;
            //var response = instance.GetSharedProject(hash);
            //Assert.IsInstanceOf<List<ModelsSharedProject>> (response, "response is List<ModelsSharedProject>");
        }
        
        /// <summary>
        /// Test GetWorkspaceProjectPeriods
        /// </summary>
        [Test]
        public void GetWorkspaceProjectPeriodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectId = null;
            //string startDate = null;
            //string endDate = null;
            //var response = instance.GetWorkspaceProjectPeriods(workspaceId, projectId, startDate, endDate);
            //Assert.IsInstanceOf<ModelsRecurringPeriod> (response, "response is ModelsRecurringPeriod");
        }
        
        /// <summary>
        /// Test GetWorkspaceProjectUsers
        /// </summary>
        [Test]
        public void GetWorkspaceProjectUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string projectIds = null;
            //bool? withGroupMembers = null;
            //var response = instance.GetWorkspaceProjectUsers(workspaceId, projectIds, withGroupMembers);
            //Assert.IsInstanceOf<List<ModelsProjectUser>> (response, "response is List<ModelsProjectUser>");
        }
        
        /// <summary>
        /// Test PatchWorkspaceProjectUsersIds
        /// </summary>
        [Test]
        public void PatchWorkspaceProjectUsersIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //List<int?> projectUserIds = null;
            //var response = instance.PatchWorkspaceProjectUsersIds(workspaceId, projectUserIds);
            //Assert.IsInstanceOf<UserOutput> (response, "response is UserOutput");
        }
        
        /// <summary>
        /// Test PatchWorkspaceProjects
        /// </summary>
        [Test]
        public void PatchWorkspaceProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //string projectIds = null;
            //ProjectsPatchPost patchInput = null;
            //var response = instance.PatchWorkspaceProjects(workspaceId, projectIds, patchInput);
            //Assert.IsInstanceOf<ProjectsPatchOutput> (response, "response is ProjectsPatchOutput");
        }
        
        /// <summary>
        /// Test PostWorkspaceProjectCreate
        /// </summary>
        [Test]
        public void PostWorkspaceProjectCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //ProjectPayload postInput = null;
            //var response = instance.PostWorkspaceProjectCreate(workspaceId, postInput);
            //Assert.IsInstanceOf<ModelsProject> (response, "response is ModelsProject");
        }
        
        /// <summary>
        /// Test PostWorkspaceProjectUsers
        /// </summary>
        [Test]
        public void PostWorkspaceProjectUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //UserPostPayload projectUser = null;
            //var response = instance.PostWorkspaceProjectUsers(workspaceId, projectUser);
            //Assert.IsInstanceOf<ModelsProjectUser> (response, "response is ModelsProjectUser");
        }
        
        /// <summary>
        /// Test PutSharedProjectTimeEntries
        /// </summary>
        [Test]
        public void PutSharedProjectTimeEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hash = null;
            //TimeentryPayload workspaceTimeEntryPut = null;
            //var response = instance.PutSharedProjectTimeEntries(hash, workspaceTimeEntryPut);
            //Assert.IsInstanceOf<ModelsTimeEntry> (response, "response is ModelsTimeEntry");
        }
        
        /// <summary>
        /// Test PutWorkspaceProject
        /// </summary>
        [Test]
        public void PutWorkspaceProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectId = null;
            //ProjectPayload postInput = null;
            //var response = instance.PutWorkspaceProject(workspaceId, projectId, postInput);
            //Assert.IsInstanceOf<ModelsProject> (response, "response is ModelsProject");
        }
        
        /// <summary>
        /// Test PutWorkspaceProjectUsers
        /// </summary>
        [Test]
        public void PutWorkspaceProjectUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectUserId = null;
            //UserPutPayload projectUser = null;
            //var response = instance.PutWorkspaceProjectUsers(workspaceId, projectUserId, projectUser);
            //Assert.IsInstanceOf<ModelsProjectUser> (response, "response is ModelsProjectUser");
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdProjectsBillableAmountsPost
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdProjectsBillableAmountsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //ProjectsPayload postInput = null;
            //var response = instance.WorkspacesWorkspaceIdProjectsBillableAmountsPost(workspaceId, postInput);
            //Assert.IsInstanceOf<List<ModelsProject>> (response, "response is List<ModelsProject>");
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdProjectsProjectIdGet
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdProjectsProjectIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectId = null;
            //var response = instance.WorkspacesWorkspaceIdProjectsProjectIdGet(workspaceId, projectId);
            //Assert.IsInstanceOf<ModelsProject> (response, "response is ModelsProject");
        }
        
        /// <summary>
        /// Test WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet
        /// </summary>
        [Test]
        public void WorkspacesWorkspaceIdProjectsProjectIdStatisticsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workspaceId = null;
            //int? projectId = null;
            //var response = instance.WorkspacesWorkspaceIdProjectsProjectIdStatisticsGet(workspaceId, projectId);
            //Assert.IsInstanceOf<ModelsProjectStatistics> (response, "response is ModelsProjectStatistics");
        }
        
    }

}
